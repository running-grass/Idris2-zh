# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: 2022-09-03 13:48+0000\n"
"Last-Translator: grass <hi@grass.show>\n"
"Language-Team: Chinese (Simplified) <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../source/ffi/ffi.rst:5 7055e93819f84cb1b5e7c7237542ee35
msgid "FFI Overview"
msgstr "FFI 概述"

#: ../source/ffi/ffi.rst:7 4915985777804bdd9b5aec7af2418fdc
#, python-format
msgid ""
"Foreign functions are declared with the ``%foreign`` directive, which "
"takes the following general form:"
msgstr "外部函数使用 ``%foreign`` 指令声明，它采用以下一般形式："

#: ../source/ffi/ffi.rst:15 7fb92f54a4b449a9a27a9ccbaa52dcef
msgid ""
"The specifier is an Idris ``String`` which says in which language the "
"foreign function is written, what it's called, and where to find it. "
"There may be more than one specifier, and a code generator is free to "
"choose any specifier it understands - or even ignore the specifiers "
"completely and use their own approach. In general, a specifier has the "
"form \"Language:name,library\". For example, in C:"
msgstr ""
"说明符是一个 Idris ``String`` ，它表示外部函数是用哪种语言编写的，它被称为什"
"么，以及在哪里可以找到它。可能有多个说明符，"
"并且代码生成器可以自由选择它理解的任何说明符 - 甚至完全忽略说明符并使用自己的"
"方法。通常，说明符的形式为“Language:name,library”。例如，在 C 中："

#: ../source/ffi/ffi.rst:27 7a9f1a15d8bb498ea4cdb59ab1d155af
msgid ""
"It is up to specific code generators to decide how to locate the function"
" and the library. In this document, we will assume the default Chez "
"Scheme code generator (the examples also work with the Racket or Gambit "
"code generator) and that the foreign language is C."
msgstr ""
"由特定的代码生成器决定如何定位函数和库。在本文档中，我们将假设默认的 Chez "
"Scheme 代码生成器（示例也适用于 Racket 或 Gambit 代码生成器）并且外部语音是 "
"C。"

#: ../source/ffi/ffi.rst:32 0857798b2aeb41f9a25b5485ed53a97a
msgid ""
"FFI declarations for C functions can also, optionally, take a C header "
"file to be ``#include``'d in the C code generated by the Idris2 compiler."
" For instance:"
msgstr "C 函数的 FFI 声明也可以选择性地接受一个 C 头文件，该文件将被 ``#include`` 到由 Idris2 编译器生成的 C 代码中。例如："

#: ../source/ffi/ffi.rst:40 e8892949f00743489f0abbba36ab3c59
#, python-format
msgid ""
"FFI declarations can be extended in another file with the "
"``%foreign_impl`` pragma. This pragma can be used to fill in cases not "
"handled in the standard library when using third party backends. In the "
"case of multiple declarations for a given backend the one from the last "
"module loaded is used."
msgstr "FFI 声明可以在另一个文件中使用 ``%foreign_impl`` 编译指令进行扩展。当使用第三方后端时，此编译指令可用于填充标准库中未处理的情况。对于给定后端的多个声明，将使用最后加载的模块中的声明。"

#: ../source/ffi/ffi.rst:50 a77863ef63f64d8c9bb172af16f5854c
msgid "Scheme Details"
msgstr "Scheme 详情"

#: ../source/ffi/ffi.rst:52 056f42869c314c2988e61d16955d4c2a
msgid "Scheme foreign specifiers can be written to target particular flavors."
msgstr "可以编写 Scheme 外部说明符以针对特定目标的口味。"

#: ../source/ffi/ffi.rst:54 595bc5bd7a6544e8b38b503cde812174
msgid ""
"The following example shows a foreign declaration that allocates memory "
"in a way specific to the choice of code generator. In this example there "
"is no general scheme specifier present that matches every flavor, e.g. "
"``scheme:foo``, so it  will only match the specific flavors listed:"
msgstr ""
"以下示例显示了一个外部声明，它以特定于代码生成器选择的方式分配内存。在此示例"
"中，不存在匹配每种风味的通用方案说明符，例如 ``scheme:foo`` "
"，所以它只会匹配列出的特定口味："

#: ../source/ffi/ffi.rst:67 34b37cfe1638482e856a84a38dbe3246
msgid ""
"If your backend (code generator) is not specified but defines a C FFI it "
"will be able to make use of the ``C:malloc,libc`` specifier."
msgstr "如果您的后端（代码生成器）未指定但定义了 C FFI，它将能够使用 "
"``C:malloc,libc`` 说明符。"

#: ../source/ffi/ffi.rst:71 bb942fa22ac44058bb9dc6e51df37763
msgid "C Sidenote"
msgstr "C 旁注"

#: ../source/ffi/ffi.rst:73 66cfcacf341d44c9b053e752013bdbd9
msgid ""
"The ``C`` language specifier is used for common functions that may be "
"used by any backend which can, in turn, FFI out to C. For example, "
"Scheme."
msgstr "``C`` 语言说明符用于任何后端都可以使用的通用函数，而后端又可以将 FFI 输出到 "
"C。例如，Scheme。"

#: ../source/ffi/ffi.rst:76 b0b89ee6f72847c6be7d9e98bb2677a4
msgid ""
"The common C functions do no automatic memory management, deferring that "
"to the individual backends."
msgstr "常见的 C 函数不进行自动内存管理，将其推迟到各个后端。"

#: ../source/ffi/ffi.rst:79 157a7f4c64944559a76fc7a542efa38e
msgid ""
"The standard C backend is known as \"RefC\", and uses the ``RefC`` "
"language specifier."
msgstr "标准 C 后端称为“RefC”，并使用 ``RefC`` 语言说明符。"

#: ../source/ffi/ffi.rst:83 0b7438eb3c49422b8572349a0ac3ce9d
msgid "Javascript Details"
msgstr "Javascript 详情"

#: ../source/ffi/ffi.rst:85 940283108fd641d7955ef503dd26cad2
msgid ""
"Javascript foreign specifiers can be written to target ``browser``, "
"``node``, or ``javascript``. The former two are mutually exclusive while "
"``javascript`` FFI specifiers apply both when building for the browser "
"and when building for NodeJS."
msgstr "Javascript 外部说明符可以针对 ``browser``、``node`` 或 ``javascript`` 编写。前两者互斥，而 ``javascript`` FFI 说明符在构建浏览器版本和 NodeJS 版本时都适用。"

#: ../source/ffi/ffi.rst:90 e297e972654d41899f4f50b44db5c13d
msgid ""
"Javascript specifiers must be further specialized as ``lambda``, "
"``support``, or ``stringIterator``."
msgstr "Javascript 说明符必须进一步指定为 ``lambda``、``support`` 或 ``stringIterator``。"

#: ../source/ffi/ffi.rst:93 cb18621b3c3d4f41989545e1fa088545
msgid ""
"The syntax, therefore, is ``node:lambda:some_func`` (for the NodeJS-"
"specific FFI and a lambda that executes a function named ``some_func``)."
msgstr "因此，语法是 ``node:lambda:some_func``（用于 NodeJS 特定的 FFI 和执行名为 ``some_func`` 的函数的 lambda）。"

#: ../source/ffi/ffi.rst:96 927995a444cb45cea49db15fe83195ce
msgid ""
"When using the ``support`` option, you also specify the name of the "
"support file. Idris will look in all ``data`` directories under a ``js`` "
"subfolder for a file with this name. These file names should be distinct "
"for your project so they don't collide with support files from other "
"projects further on in the build process for an executable. Suppose your "
"package is named \"http-idris\" and you have FFI specifiers like "
"``node:support:http_request,http_idris`` in your Idris code. You should "
"make sure a data directory in scope has a ``js`` directory with an "
"``http_idris.js`` file in it. Another important note is that functions "
"within this file must be prefixed with ``http_idris_``; therefore, the "
"function referred to in the example we give here would need to be named "
"``http_idris_http_request`` in the ``http_idris.js`` support file."
msgstr "使用 ``support`` 选项时，还需要指定支持文件的名称。Idris 将在 ``js`` 子文件夹下的所有 ``data`` 目录中查找具有此名称的文件。这些文件名应该为您的项目所独有，这样它们就不会与可执行文件构建过程中其他项目的支持文件发生冲突。假设您的包名为 \"http-idris\"，并且在 Idris 代码中有类似 ``node:support:http_request,http_idris`` 的 FFI 说明符。您应该确保作用域内的 data 目录有一个包含 ``http_idris.js`` 文件的 ``js`` 目录。另一个重要说明是，此文件中的函数必须以 ``http_idris_`` 为前缀；因此，我们在示例中引用的函数在 ``http_idris.js`` 支持文件中需要命名为 ``http_idris_http_request``。"

#: ../source/ffi/ffi.rst:110 157cb9e6caee45bf853c31e4977e05d6
msgid "FFI Example"
msgstr "FFI 示例"

#: ../source/ffi/ffi.rst:112 51a63571a3e64f42b72c55998107fae1
msgid ""
"As a running example, we are going to work with a small C file. Save the "
"following content to a file ``smallc.c``"
msgstr "作为一个运行示例，我们将使用一个小的 C 文件。将以下内容保存到文件 ``smallc."
"c``"

#: ../source/ffi/ffi.rst:128 e8415e56c3a24d6ba84d02972ed7a185
msgid "Then, compile it to a shared library with::"
msgstr "然后，将其编译为共享库："

#: ../source/ffi/ffi.rst:132 434c538964fd4339966ca3814de0d91b
msgid ""
"We can now write an Idris program which calls each of these. First, we'll"
" write a small program which uses ``add`` to add two integers:"
msgstr "我们现在可以编写一个 Idris "
"程序来调用其中的每一个函数。首先，我们将编写一个小程序，它使用 ``add`` "
"将两个整数相加："

#: ../source/ffi/ffi.rst:143 a21a8385e7d044b3ab776416a93093ad
#, python-format
msgid ""
"The ``%foreign`` declaration states that ``add`` is written in C, with "
"the name ``add`` in the library ``libsmall``. As long as the run time is "
"able to locate ``libsmall.so`` (in practice it looks in the current "
"directory and the system library paths) we can run this at the REPL:"
msgstr ""
"``%foreign`` 说明符声明 ``add`` 是用 C 语言编写的，在 ``libsmall`` 库中名为 "
"``add`` 。只要运行时能够找到 ``libsmall.so`` "
"（实际上它会在当前目录和系统库路径中查找），我们就可以在 REPL 中运行它："

#: ../source/ffi/ffi.rst:153 15f06f94555845308461e371f3550bca
msgid ""
"Note that it is the programmer's responsibility to make sure that the "
"Idris function and C function have corresponding types. There is no way "
"for the machine to check this! If you get it wrong, you will get "
"unpredictable behaviour."
msgstr "请注意，确保 Idris 函数和 C 函数具有相应的类型是程序员的责任。机器没有办法检"
"查这个！如果你弄错了，你会得到不可预测的行为。"

#: ../source/ffi/ffi.rst:158 bef35666e4a24650acf8820b63264ad8
msgid ""
"Since ``add`` has no side effects, we've given it a return type of "
"``Int``. But what if the function has some effect on the outside world, "
"like ``addWithMessage``? In this case, we use ``PrimIO Int`` to say that "
"it returns a primitive IO action:"
msgstr ""
"由于 ``add`` 没有副作用，我们给它一个 ``Int`` "
"返回类型。但是如果这个函数对外界有一些影响，比如 ``addWithMessage`` "
"呢？在这种情况下，我们使用 ``PrimIO Int`` 来表示它返回一个原语 IO 操作："

#: ../source/ffi/ffi.rst:168 5035e98bc99e4dd8ba5e6832d8d98a58
msgid ""
"Internally, ``PrimIO Int`` is a function which takes the current (linear)"
" state of the world, and returns an ``Int`` with an updated state of the "
"world. In general, ``IO`` operations in an Idris program are defined as "
"instances of the ``HasIO`` interface. We can convert a primitive "
"operation to one usable in ``HasIO`` using ``primIO``:"
msgstr ""
"在内部， ``PrimIO Int`` 是一个函数，它获取世界的当前（线性）状态，"
"并返回一个带有更新的世界状态的 ``Int`` 。通常，Idris 程序中的 ``IO`` "
"操作被定义为 ``HasIO`` 接口的实例。我们可以使用 ``primIO`` 将原语操作转换为 "
"``HasIO`` 中可用的操作："

#: ../source/ffi/ffi.rst:178 e4a3060eb8d74436943d4e52fe0c6f7f
msgid "So, we can extend our program as follows:"
msgstr "因此，我们可以如下扩展我们的程序："

#: ../source/ffi/ffi.rst:191 ccade07822ae4f32af5d227f5183ee16
msgid ""
"It is up to the programmer to declare which functions are pure, and which"
" have side effects, via ``PrimIO``. Executing this gives:"
msgstr "程序员可以通过 ``PrimIO`` 声明哪些函数是纯函数，哪些有副作用。执行以下内容："

#: ../source/ffi/ffi.rst:200 a665a6ad8e2946bcb291ce2ea40dd92c
msgid "We have seen two specifiers for foreign functions:"
msgstr "我们已经看到了两个外部函数的说明符："

#: ../source/ffi/ffi.rst:207 dedde9c5b8284da7b7fe440bbb37a663
msgid ""
"These both have the same form: ``\"C:[name],libsmall\"`` so instead of "
"writing the concrete ``String``, we write a function to compute the "
"specifier, and use that instead:"
msgstr ""
"它们都具有相同的形式： ``\"C:[name],libsmall\"`` ， 所以我们可以不写具体的 "
"``String`` ，而是写一个函数来计算说明符，并使用它来代替现在的字符串："

#: ../source/ffi/ffi.rst:225 af73dd3975e942faaa0ddd43b47d5f05
msgid "Primitive FFI Types"
msgstr "原语 FFI 类型"

#: ../source/ffi/ffi.rst:227 787ecedaf36d4adeb278a867ee1dc74c
msgid ""
"The types which can be passed to and returned from foreign functions are "
"restricted to those which it is reasonable to assume any back end can "
"handle. In practice, this means most primitive types, and a limited "
"selection of others.  Argument types can be any of the following "
"primitives:"
msgstr ""
"可以传递给外部函数和从外部函数返回的类型仅限于可以合理假设任何后端都可以处理"
"的类型。在实践中，这意味着大多数原语类型，以及有限的其他类型。参数类型可以是"
"以下任何原语："

#: ../source/ffi/ffi.rst:232 ../source/ffi/ffi.rst:464
#: 3c637c1482d1428ba531b4537c11825a 6fff0d7b770747329418623ca45b3a24
msgid "``Int``"
msgstr "``Int``"

#: ../source/ffi/ffi.rst:233 ../source/ffi/ffi.rst:465
#: 3d3603d7287f483d84619ad48ad5d19f 8ee7ba94e0b14df7ad9126a4ba4a49cb
msgid "``Char``"
msgstr "``Char``"

#: ../source/ffi/ffi.rst:234 fade2e77fd1041508054c5abb01ad752
msgid "``Double`` (as ``double`` in C)"
msgstr "``Double`` （在 C 中为 ``double`` ）"

#: ../source/ffi/ffi.rst:235 ../source/ffi/ffi.rst:467
#: 56bf7000a8bb4c67bdaa5aded4cc2b18 5afcaafa9d1841d89afc048c712afeba
msgid "``Bits8``"
msgstr "``Bits8``"

#: ../source/ffi/ffi.rst:236 ../source/ffi/ffi.rst:468
#: 2636362c903f406a9d6ec3d3de186534 3ba435c3966d47f6a1f5d28109046e15
msgid "``Bits16``"
msgstr "``Bits16``"

#: ../source/ffi/ffi.rst:237 ../source/ffi/ffi.rst:469
#: 16c421884d5f48be8a5598a90054f4ab 326612bbe49c4e598488c698d529da56
msgid "``Bits32``"
msgstr "``Bits32``"

#: ../source/ffi/ffi.rst:238 ../source/ffi/ffi.rst:470
#: 0da066574e04466793883f29d292fd4b 1fbe7c268de24f0995c17196f3690b95
msgid "``Bits64``"
msgstr "``Bits64``"

#: ../source/ffi/ffi.rst:239 4bb8e18712dd45cbabfc9c4900c6b67f
msgid "``String`` (as ``char*`` in C)"
msgstr "``String`` (在 C 中作为 ``char*``)"

#: ../source/ffi/ffi.rst:240 2f2119e68c724e048668f038997240a0
msgid "``Ptr t`` and ``AnyPtr`` (both as ``void*`` in C)"
msgstr "``Ptr t`` 和 ``AnyPtr`` （在 C 中都是 ``void*`` ）"

#: ../source/ffi/ffi.rst:242 1aefb0e0504248ebbd470a47dd8b7cb3
msgid "Return types can be any of the above, plus:"
msgstr "返回类型可以是上述任何一种，加上："

#: ../source/ffi/ffi.rst:244 59fb023bd1594c0d9622dfccddeb9050
msgid "``()``"
msgstr "``()``"

#: ../source/ffi/ffi.rst:245 999eca9b86154687bee5275ea0196ba8
msgid "``PrimIO t``, where ``t`` is a valid return type other than a ``PrimIO``."
msgstr "``PrimIO t`` ，其中 ``t`` 是除了 ``PrimIO`` 之外的有效返回类型。"

#: ../source/ffi/ffi.rst:247 4c323f7cd96640c49986adeb1a473612
msgid "Handling ``String`` leads to some complications, for a number of reasons:"
msgstr "处理 ``String`` 会导致一些复杂性，原因有很多："

#: ../source/ffi/ffi.rst:249 1635c5b6ccad47b4a0c443f70f919656
msgid ""
"Strings can have multiple encodings. In the Idris run time, Strings are "
"encoded as UTF-8, but C makes no assumptions."
msgstr "字符串可以有多种编码。在 Idris 运行时，字符串被编码为 UTF-8，但 C "
"不做任何假设。"

#: ../source/ffi/ffi.rst:251 f95731b3e4674d649250d7a5fd2bb96a
msgid ""
"It is not always clear who is responsible for freeing a ``String`` "
"allocated by a C function."
msgstr "谁负责释放由 C 函数分配的字符串并不总是很清楚。"

#: ../source/ffi/ffi.rst:253 d6ae607918b448f3a9d5e75ab5d50540
msgid "In C, strings can be ``NULL``, but Idris strings always have a value."
msgstr "在 C 中，字符串可以是 ``NULL`` ，但 Idris 字符串总是有一个值。"

#: ../source/ffi/ffi.rst:255 6404b48fc5914408a84ca6eb6cb7e090
msgid "So, when passing ``String`` to and from C, remember the following:"
msgstr "因此，当将 ``String`` 传入和传出 C 时，请记住以下几点："

#: ../source/ffi/ffi.rst:257 f63a06a7f4d340128b104cf595f7d33d
msgid ""
"A ``char*`` returned by a C function will be copied to the Idris heap, "
"and the Idris run time immediately calls ``free`` with the returned "
"``char*``."
msgstr ""
"C 函数返回的 ``char*`` 将被复制到 Idris 堆，并且 Idris 运行时立即对返回的 "
"``char*`` 调用 ``free`` 函数。"

#: ../source/ffi/ffi.rst:259 584d1a7aa1704e78be97cf17f1330a6f
msgid ""
"If a ``char*`` might be ``NULL`` in ``C``, use ``Ptr String`` rather than"
" ``String``."
msgstr "如果 ``char*`` 在 ``C`` 中可能是 ``NULL`` ，请使用 ``Ptr String`` 而不是 "
"``String`` 。"

#: ../source/ffi/ffi.rst:262 5e006f82be934d1da8cce5d6318eb006
msgid ""
"When using ``Ptr String``, the value will be passed as a ``void*``, and "
"therefore not accessible directly by Idris code. This is to protect "
"against accidentally trying to use ``NULL`` as a ``String``. You can "
"nevertheless work with them and convert to ``String`` via foreign "
"functions of the following form:"
msgstr ""
"当使用 ``Ptr String`` 时，该值将作为 ``void*`` 传递，因此 Idris "
"代码不能直接访问。这是为了防止意外尝试将 ``NULL`` 用作 ``String`` "
"。尽管如此，您仍然可以使用它们并通过以下形式的外部函数转换为 ``String`` ："

#: ../source/ffi/ffi.rst:282 7fcbff0f158d48dc8d08cf596995d9e3
msgid "For an example, see the sample :ref:`sect-readline` bindings."
msgstr "例如，请参阅示例 :ref:`sect-readline` 绑定。"

#: ../source/ffi/ffi.rst:284 0fc38d9110f248a0bc3d052e0f8aa365
msgid ""
"Additionally, foreign functions can take *callbacks*, and take and return"
" C ``struct`` pointers."
msgstr "此外，外部函数可以接受*回调*，并接受和返回 C ``struct`` 指针。"

#: ../source/ffi/ffi.rst:290 0a3ad4da202e430d90d5035a4672a394
msgid "Callbacks"
msgstr "回调"

#: ../source/ffi/ffi.rst:292 319be42e1e464e7f9aa55ff3d9280ec8
msgid ""
"It is often useful in C for a function to take a *callback*, that is a "
"function which is called after doing some work. For example, we can write"
" a function which takes a callback that takes a ``char*`` and an ``int`` "
"and returns a ``char*``, in C, as follows (added to ``smallc.c`` above):"
msgstr ""
"在 C 语言中，函数接受 *callback* 是很有用的，它是在完成一些工作后调用的函数。"
"例如，我们可以编写一个函数，该函数接受一个回调，该回调接受一个 ``char*`` "
"和一个 ``int`` 并返回一个 ``char*`` ，在 C 语言中，如下所示（添加到 ``"
"smallc. c`` 上面）："

#: ../source/ffi/ffi.rst:306 e1c096c2e26e4aa5a0637a0ff257c651
#, python-format
msgid ""
"Then, we can access this from Idris by declaring it as a ``%foreign`` "
"function and wrapping it in the ``HasIO`` interface, with the C function "
"calling the Idris function as the callback:"
msgstr ""
"然后，我们可以通过将其声明为 ``%foreign`` 函数并将其包装在 ``HasIO`` "
"接口中来从 Idris 访问它，其中 C 函数调用 Idris 函数作为回调："

#: ../source/ffi/ffi.rst:319 8bf557dab5ce44cb9a4401b98ad12a97
msgid "For example, we can try this as follows:"
msgstr "例如，我们可以尝试如下："

#: ../source/ffi/ffi.rst:337 8facb30165bc4d19aac5798de13597aa
msgid "As a variant, the callback could have a side effect:"
msgstr "作为一种变体，回调可能会产生副作用："

#: ../source/ffi/ffi.rst:345 f1874f6b378f4cbea0d037645288ba2d
msgid ""
"This is a little more fiddly to lift to a ``HasIO`` function, due to the "
"callback, but we can do so using ``toPrim : IO a -> PrimIO a``:"
msgstr ""
"由于有回调，这对于提升到 ``HasIO`` 函数有点复杂，但是我们可以使用 ``toPrim : "
"IO a -> PrimIO a`` 来做到这一点："

#: ../source/ffi/ffi.rst:354 d0d55a9c7cb0403a905659685ed381c9
msgid ""
"Note that the callback is explicitly in ``IO`` here, since ``HasIO`` "
"doesn't have a general method for extracting the primitive ``IO`` "
"operation."
msgstr "请注意，回调显式的被包裹在 ``IO`` 中，因为 ``HasIO`` 没有提取原语 ``IO`` "
"操作的通用方法。"

#: ../source/ffi/ffi.rst:357 e33e125c2ca7445192959eca18e6dc18
msgid ""
"For example, we can extend the above ``pluralise`` example to print a "
"message in the callback:"
msgstr "例如，我们可以扩展上面的 ``pluralise`` 示例以在回调中打印一条消息："

#: ../source/ffi/ffi.rst:378 f91d49a06f6d4b26a7fd7e5fec2e1aa4
msgid "Structs"
msgstr "结构体"

#: ../source/ffi/ffi.rst:380 627cb80d1ee94015b7262d3424c9412e
msgid ""
"Many C APIs pass around more complex data structures, as a ``struct``. We"
" do not aim to be completely general in the C types we support, because "
"this will make it harder to write code which is portable across multiple "
"back ends. However, it is still often useful to be able to access a "
"``struct`` directly. For example, add the following to the top of "
"``smallc.c``, and rebuild ``libsmall.so``:"
msgstr ""
"许多 C API 传递更复杂的数据结构，如 ``struct`` 。我们并不打算在我们支持的 C "
"类型中完全通用，因为这会使编写跨多个后端可移植的代码变得更加困难。但是，"
"能够直接访问 ``struct`` 通常会很有用。例如，将以下内容添加到 ``smallc.c`` "
"的顶部，并重新构建 ``libsmall.so`` ："

#: ../source/ffi/ffi.rst:407 c0d2c8f788984ea6a5ace3fb74aacb07
msgid ""
"We can define a type for accessing ``point`` in Idris by importing "
"``System.FFI`` and using the ``Struct`` type, as follows:"
msgstr ""
"我们可以通过导入 ``System.FFI`` 并使用 ``Struct`` 类型在 Idris "
"中定义一个访问 ``point`` 的类型，如下所示："

#: ../source/ffi/ffi.rst:424 47a57b10a5f14334ae056a62350530f4
msgid "The ``Point`` type in Idris now corresponds to ``point*`` in C."
msgstr "现在 Idris 中的 ``Point`` 类型对应 C 中的 ``point*``。"

#: ../source/ffi/ffi.rst:426 3bac482076744d7ab53f306c9a3af8b0
msgid ""
"**Important**: ``Struct`` types must define all fields of the C "
"``struct``. Partial definitions will fail with memory access errors."
msgstr "**重要**：``Struct`` 类型必须定义 C ``struct`` 的所有字段。部分定义将导致内存访问错误。"

#: ../source/ffi/ffi.rst:429 fe3eff206ee34dc188108c29711e205c
msgid ""
"Fields can be read and written using the following, also from "
"``System.FFI``:"
msgstr "可以使用以下方法读取和写入字段，这些方法也来自 ``System.FFI`` ："

#: ../source/ffi/ffi.rst:438 a091d3c08cea452e8d882d1fa5e04e6a
msgid ""
"Notice that fields are accessed by name, and must be available in the "
"struct, given the constraint ``FieldType n ty fs``, which states that the"
" field named ``n`` has type ``ty`` in the structure fields ``fs``. So, we"
" can display a ``Point`` as follows by accessing the fields directly:"
msgstr ""
"请注意，字段是按名称访问的，并且必须在结构中可用，给定约束 ``FieldType n ty "
"fs`` ，它指出结构字段 ``fs`` 中名为 ``n`` 的字段具有类型 ``ty`` 。因此，"
"我们可以通过如下所示直接访问字段来显示 ``Point`` ："

#: ../source/ffi/ffi.rst:451 0112d7d374024aa9bc6f7fe21e486ef1
msgid ""
"And, as a complete example, we can initialise, update, display and delete"
" a ``Point`` as follows:"
msgstr "而且，作为一个完整的例子，我们可以初始化、更新、显示和删除一个 ``Point`` "
"，如下所示："

#: ../source/ffi/ffi.rst:462 3cb1297d85a141a6be68869cfe4e1bb6
msgid "The field types of a ``Struct`` can be any of the following:"
msgstr "``Struct`` 的字段类型可以是以下任何一种："

#: ../source/ffi/ffi.rst:466 78b04fb92dcc489498db8e63f281bac3
msgid "``Double`` (``double`` in C)"
msgstr "``Double`` (C 中为 ``double``)"

#: ../source/ffi/ffi.rst:471 f9527d196b024e9eb9bfc420c4cbfeab
msgid "``Ptr a`` or ``AnyPtr`` (``void*`` in C)"
msgstr "``Ptr a`` 或 ``AnyPtr`` （C 中的 ``void*`` ）"

#: ../source/ffi/ffi.rst:472 479cd94b074d4c5fb7e9291d716abed4
msgid "Another ``Struct``, which is a pointer to a ``struct`` in C"
msgstr "另一个 ``Struct`` ，在C中它是指向 ``struct`` 的指针"

#: ../source/ffi/ffi.rst:474 823b891aa44249f780402d14fc796468
msgid ""
"Note that this doesn't include ``String`` or function types! This is "
"primarily because these aren't directly supported by the Chez back end. "
"However, you can use another pointer type and convert. For example, "
"assuming you have, in C:"
msgstr ""
"请注意，这不包括 ``String`` 或函数类型！这主要是因为 Chez "
"后端不直接支持这些。但是，您可以使用另一种指针类型并进行转换。例如，假设你在 "
"C 中有："

#: ../source/ffi/ffi.rst:485 a76515d8352f4b42a99f71db073b0b98
msgid "You can represent this in Idris as:"
msgstr "您可以在 Idris 中将其表示为："

#: ../source/ffi/ffi.rst:495 8fc934eb387b4768ab578899f57769f4
msgid ""
"That is, using a ``Ptr String`` instead of a ``String`` directly. Then "
"you can convert between a ``void*`` and a ``char*`` in C:"
msgstr ""
"也就是说，直接使用 ``Ptr String`` 而不是 ``String`` 。然后你可以在 C 中的 "
"``void*`` 和 ``char*`` 之间进行转换："

#: ../source/ffi/ffi.rst:504 ee4941d8e0db4ecb9deafece6f50b298
msgid "...and use this to convert to a ``String`` in Idris:"
msgstr "...并在 Idris 中使用它转换为 ``String`` ："

#: ../source/ffi/ffi.rst:513 bb40a4c556e84ccbb59ca3fbd9653a30
msgid "Finalisers"
msgstr "决赛选手"

#: ../source/ffi/ffi.rst:515 9721b30a4820490697c976fa6a03677e
msgid ""
"In some libraries, a foreign function creates a pointer and the caller is"
" responsible for freeing it. In this case, you can make an explicit "
"foreign call to ``free``. However, this is not always convenient, or even"
" possible. Instead, you can ask the Idris run-time to be responsible for "
"freeing the pointer when it is no longer accessible, using ``onCollect`` "
"(or its typeless variant ``onCollectAny``) defined in the Prelude:"
msgstr ""
"在某些库中，外部函数创建一个指针，调用者负责释放它。在这种情况下，您可以对 "
"``free`` 进行显式的外部调用。然而，这并不总是方便的，甚至是不可能的。相反，"
"您可以使用 Prelude 中定义的 ``onCollect`` （或其无类型变体 ``onCollectAny`` "
"）要求 Idris 运行时负责在指针不再可访问时释放它："

#: ../source/ffi/ffi.rst:527 a17abcee40ea483e938082daf9bc78e1
msgid ""
"A ``GCPtr t`` behaves exactly like ``Ptr t`` when passed to a foreign "
"function (and, similarly, ``GCAnyPtr`` behaves like ``AnyPtr``). A "
"foreign function cannot return a ``GCPtr`` however, because then we can "
"no longer assume the pointer is completely managed by the Idris run-time."
msgstr ""
"当传递给外部函数时， ``GCPtr t`` 的行为与 ``Ptr t`` 完全相同（类似地， "
"``GCAnyPtr`` 的行为类似于 ``AnyPtr`` ）。然而，外部函数不能返回 ``GCPtr`` ，"
"因为我们不能再假设指针完全由 Idris 运行时管理。"

#: ../source/ffi/ffi.rst:532 5ac0365deae145a79b6e69bb3b256d3f
msgid ""
"The finaliser is called either when the garbage collector determines that"
" the pointer is no longer accessible, or at the end of execution."
msgstr "当垃圾收集器确定指针不再可访问时，或者在执行结束时调用终结器。"

#: ../source/ffi/ffi.rst:535 69ddd9f9c6c64d1faffe21de29a24fd9
msgid ""
"Note that finalisers might not be supported by all back ends, since they "
"depend on the facilities offered by a specific back end's run time "
"system. They are certainly supported in the Chez Scheme and Racket back "
"ends."
msgstr "请注意，并非所有后端都支持终结器，因为它们依赖于特定后端运行时系统提供的设施"
"。 Chez Scheme 和 Racket 后端肯定支持它们。"
