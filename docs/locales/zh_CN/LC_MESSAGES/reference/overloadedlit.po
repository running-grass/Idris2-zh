# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: 2022-09-03 13:48+0000\n"
"Last-Translator: grass <hi@grass.show>\n"
"Language-Team: Chinese (Simplified) <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/reference/overloadedlit.rst:2 1dbaba534d9d4be282b2331836154021
msgid "Overloaded literals"
msgstr "重载字面量"

#: ../source/reference/overloadedlit.rst:7 fdecfb7cda754f1dba39c3fb5bcd02fe
#, python-format
msgid ""
"The compiler provides directives for literals overloading, respectively "
"``%stringLit <fun>`` and ``%integerLit <fun>`` for string and integer "
"literals. During elaboration, the given function is applied to the "
"corresponding literal. In the Prelude these functions are set to "
"``fromString`` and ``fromInteger``."
msgstr ""
"编译器提供了字面量重载的指令，分别是字符串字面量的 ``%stringLit <fun>`` 和整数字面量的 ``%integerLit "
"<fun>``。在细化阶段，给定的函数会被应用到相应的字面量上。在 Prelude 中，这些函数被设置为 ``fromString`` 和 "
"``fromInteger``。"

#: ../source/reference/overloadedlit.rst:12 00eab91bc507498eb06b80c0a0e1deac
msgid ""
"The interface ``FromString ty`` provides the ``fromString : String -> "
"ty`` function, while the ``Num ty`` interface provides the ``fromInteger "
": Integer -> ty`` function for all numerical types."
msgstr ""
"接口 ``FromString ty`` 提供了 ``fromString : String -> ty`` 函数，而 ``Num ty`` "
"接口为所有数值类型提供了 ``fromInteger : Integer -> ty`` 函数。"

#: ../source/reference/overloadedlit.rst:17 21fe54bd17e24688b6c524790a0d10d7
msgid "Restricted overloads"
msgstr "受限重载"

#: ../source/reference/overloadedlit.rst:18 5bc1fb2c3e5d4e30a94dbc3a5399a238
msgid ""
"Although the overloading of literals can be achieved by implementing the "
"interfaces described above, in principle only a function with the correct"
" signature and name is enough to achieve the desired behaviour. This can "
"be exploited to obtain more restrictive overloading such as converting "
"literals to ``Fin n`` values, where integer literals greater or equal to "
"n are not constructible values for the type. Additional implicit "
"arguments can be added to the function signature, in particular auto "
"implicit arguments for searching proofs. As an example, this is the "
"implementation of ``fromInteger`` for ``Fin n``."
msgstr ""
"虽然字面量重载可以通过实现上述接口来实现，但原则上只需要一个具有正确签名和名称的函数就足以实现所需的行为。这可以用来获得更严格的重载，例如将字面量转换为 "
"``Fin n`` 值，其中大于或等于 n 的整数字面量不是该类型的可构造值。可以在函数签名中添加额外的隐式参数，特别是用于搜索证明的自动隐式参数。例如，这是 "
"``Fin n`` 的 ``fromInteger`` 实现。"

#: ../source/reference/overloadedlit.rst:36 d87ff75f318541bda936e40a10e49a4e
msgid ""
"The ``prf`` auto implicit is an automatically constructed proof (if "
"possible) that the literal is suitable for the ``Fin n`` type. The "
"restricted behaviour can be observed in the REPL, where the failure to "
"construct a valid proof is caught during the type-checking phase and not "
"at runtime:"
msgstr ""
"``prf`` 自动隐式参数是一个自动构造的证明（如果可能的话），证明该字面量适合 ``Fin n`` 类型。这种受限行为可以在 REPL "
"中观察到，其中构造有效证明的失败会在类型检查阶段而不是运行时被捕获："

