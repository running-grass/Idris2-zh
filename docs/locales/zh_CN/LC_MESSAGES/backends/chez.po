# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: 2022-09-03 13:48+0000\n"
"Last-Translator: grass <hi@grass.show>\n"
"Language-Team: Chinese (Simplified) <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../source/backends/chez.rst:3 9050b450aad54da69c6054ec038a76c5
msgid "Chez Scheme Code Generator"
msgstr "Chez Scheme 代码生成器"

#: ../source/backends/chez.rst:5 b8410cd405a34dc8a3129946ff906313
msgid ""
"The Chez Scheme code generator is the default, or it can be accessed via "
"a REPL command:"
msgstr "Chez Scheme 代码生成器是默认的，或者可以通过 REPL 命令访问："

#: ../source/backends/chez.rst:12 1f15288f7ab5447aa7e0943c22919221
msgid ""
"By default, therefore, to run Idris programs you will need to install "
"`Chez Scheme <https://www.scheme.com/>`_. Chez Scheme is open source, and"
" available via most OS package managers."
msgstr ""
"因此，默认情况下，要运行 Idris 程序，您需要安装 `Chez Scheme <https://www."
"scheme.com/>`_ 。 Chez Scheme 是开源的，可通过大多数操作系统包管理器获得。"

#: ../source/backends/chez.rst:16 177493ff1e3a48509775307c9dd023de
msgid ""
"You can compile an expression ``expr`` of type ``IO ()`` to an executable"
" as follows, at the REPL:"
msgstr "您可以在 REPL 中将类型为 ``IO ()`` 的表达式 ``expr`` "
"编译为可执行文件，如下所示："

#: ../source/backends/chez.rst:23 61a8248e9f4046aaa6d55502c4d2af4b
msgid ""
"...where ``execname`` is the name of the executable file. This will "
"generate the following:"
msgstr "...其中 ``execname`` 是可执行文件的名称。这将生成以下内容："

#: ../source/backends/chez.rst:26 8f16252ffb244c5aa61decb698723f9b
msgid "A shell script ``build/exec/execname`` which invokes the program"
msgstr "调用程序的 shell 脚本 ``build/exec/execname``"

#: ../source/backends/chez.rst:27 6cf0836e532f468fba628910d59c0ad8
msgid ""
"A subdirectory ``build/exec/execname_app`` which contains all the data "
"necessary to run the program. This includes the Chez Scheme source "
"(``execname.ss``), the compiled Chez Scheme code (``execname.so``) and "
"any shared libraries needed for foreign function definitions."
msgstr ""
"子目录 ``build/exec/execname_app`` 中包含运行程序所需的所有数据。这包括 Chez "
"Scheme 源代码（ ``execname.ss`` ），已编译的 Chez Scheme 代码（ ``execname."
"so`` ）和外部函数定义所需的任何共享库。"

#: ../source/backends/chez.rst:32 524da3cf7bea4a74bae81ecfbf249c58
msgid ""
"The executable ``execname`` is relocatable to any subdirectory, provided "
"that ``execname_app`` is also in the same subdirectory."
msgstr "可执行的 ``execname`` 可以重新定位到任何子目录，前提是 ``execname_app`` "
"也在同一个子目录中。"

#: ../source/backends/chez.rst:35 881fef26e7fd4b10b37c46ad38184b84
msgid "You can also execute an expression directly:"
msgstr "你也可以直接执行表达式："

#: ../source/backends/chez.rst:41 ade458a1ee9b49fe8de1e1b136ac1114
msgid ""
"Again, ``expr`` must have type ``IO ()``. This will generate a temporary "
"executable script ``_tmpchez`` in the ``build/exec`` directory, and "
"execute that."
msgstr ""
"同样， ``expr`` 必须具有 ``IO ()`` 类型。这将在 ``build/exec`` "
"目录中生成一个临时可执行脚本 ``_tmpchez`` ，并执行它。"

#: ../source/backends/chez.rst:45 5dc08594351d48ae9018794cc99bdad4
msgid ""
"Chez Scheme is the default code generator, so if you invoke ``idris2`` "
"with the ``-o execname`` flag, it will generate an executable script "
"``build/exec/execname``, again with support files in "
"``build/exec/execname_app``."
msgstr ""
"Chez Scheme 是默认的代码生成器，因此如果您使用 ``-o execname`` 标志调用 "
"``idris2`` ，它将生成一个可执行脚本 ``build/exec/execname`` ，和支持文件 ``"
"build/exec/execname_app`` 。"

#: ../source/backends/chez.rst:51 6eb7d69120ce4178966c0f81d5fe2852
msgid "Chez Directives"
msgstr "Chez 指令"

#: ../source/backends/chez.rst:53 e83ce0ec8532495b9e979cd965b5f512
msgid "``--directive extraRuntime=<path>``"
msgstr "``--directive extraRuntime=<path>``"

#: ../source/backends/chez.rst:55 dc467ecb6e974cf3a8b9f821af95d8ae
msgid ""
"Embed Scheme source from ``<path>`` directly into generated output. Can "
"be specified more than once, in which case all given files will be "
"included in the order specified."
msgstr "将来自 ``<path>`` 的 Scheme 源代码直接嵌入到生成的输出中。可以多次指定，在这"
"种情况下，所有给定的文件都将按指定的顺序包含。"

#: ../source/backends/chez.rst:75 d99b769d86574eefb5b9520f89928eb0
msgid "``--directive lazy=weakMemo``"
msgstr "``--directive lazy=weakMemo``"

#: ../source/backends/chez.rst:77 e2e96b2cc884496990a54c2071c88b29
msgid ""
"Makes all non-toplevel ``Lazy`` and ``Inf`` values to be *weakly* "
"memoised. That is, once this expression is evaluated at runtime, it is "
"allowed to not to be recalculated on later accesses until memoised value "
"is wiped by a garbage collector. Garbage collector is allowed to collect "
"weakly memoised values at its own discretion, so when no free memory is "
"available, weakly memoised values are free to be wiped. That's why it is "
"safer comparing to full memoisation."
msgstr "使所有非顶层 ``Lazy`` 和 ``Inf`` 值被*弱*记忆化。也就是说，一旦这个表达式在运行时被求值，它允许在后续访问时不再重新计算，直到记忆化的值被垃圾收集器清除。垃圾收集器可以自行决定收集弱记忆化的值，因此当没有可用内存时，弱记忆化的值可以被清除。这就是为什么它比完全记忆化更安全。"

#: ../source/backends/chez.rst:85 fdcfb268fda04f73827592c2cbe995df
msgid "Making a freestanding executable"
msgstr "构建独立的可执行文件"

#: ../source/backends/chez.rst:87 7fa8952daee84922853b9f00e3f2926e
msgid ""
"It's possible to embed the Chez Scheme system and the built Idris2 "
"program into a freestanding executable with `chez-exe "
"<https://github.com/gwatt/chez-exe>`_."
msgstr ""
"可以使用 `chez-exe <https://github.com/gwatt/chez-exe>`_ 将 Chez Scheme "
"系统和内置的 Idris2 程序嵌入到独立的可执行文件中。"

#: ../source/backends/chez.rst:89 bd37eb3261364244921c6600b10a364b
msgid ""
"Build and install the ``compile-chez-program-tool`` by running the "
"configuration script and then make:"
msgstr "通过运行配置脚本构建并安装 ``compile-chez-program-tool`` ，然后执行："

#: ../source/backends/chez.rst:96 150c08f2482142c08cc0489c0e13fc5b
msgid ""
"where ``<bootpath`` is the path to where the Chez Scheme bootfiles "
"(``petite.boot`` and ``scheme.boot``) and ``scheme.h`` are. More "
"configuration is described in the chez-exe installation instructions."
msgstr ""
"其中 ``<bootpath`` 是 Chez Scheme 引导文件（ ``petite.boot`` 和 ``scheme."
"boot`` ）和 ``scheme.h`` 所在的路径。更多配置在 chez-exe 安装说明中描述。"

#: ../source/backends/chez.rst:99 615985362dde4a09badef9a8a626f1f1
msgid "Invoke ``compile-chez-program``:"
msgstr "调用 ``compile-chez-program`` ："

#: ../source/backends/chez.rst:105 eda69b67555242e7ab691a3eb0dcdd5f
msgid ""
"Note that it can only use the ``.ss``-file and not the ``.so``-file. To "
"embed the full Chez Scheme system including the compiler add the "
"``--full-chez`` option."
msgstr ""
"请注意，它只能使用 ``.ss`` 文件而不是 ``.so`` 文件。"
"要嵌入包括编译器在内的完整 Chez Scheme 系统，请添加 ``--full-chez`` 选项。"

#: ../source/backends/chez.rst:108 b887b6a238814b2881d770fa4a19bd91
msgid ""
"The finished executable still requires the libidris_support shared "
"library. It's possible to also eliminate that dependency by linking with "
"it statically."
msgstr "完成的可执行文件仍然需要 libidris_support "
"共享库。也可以通过静态链接来消除这种依赖关系。"
