# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: 2022-09-03 13:48+0000\n"
"Last-Translator: grass <hi@grass.show>\n"
"Language-Team: Chinese (Simplified) <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../source/implementation/overview.rst:3 e93f7e9a66424512a75333c6c73991f2
msgid "Implementation Overview"
msgstr "实现概述"

#: ../source/implementation/overview.rst:5 a0e6ed2fb41b4f2eb212c79d1c455db7
msgid ""
"These are some unsorted notes on aspects of the implementation. Sketchy, "
"and not always completely up to date, but hopefully give some hints as to"
" what's going on and some ideas where to look in the code to see how "
"certain features work."
msgstr ""
"这些是关于实现方面的一些未分类的注释。粗略的，并不总是完全最新的，但希望能提"
"供一些关于正在发生的事情的提示以及在代码中查看某些功能如何工作的一些想法。"

#: ../source/implementation/overview.rst:11 83ce0253e0724c8abe4123202692157b
msgid "Introduction"
msgstr "介绍"

#: ../source/implementation/overview.rst:13 0f3ec60acc7243d5abf47aadccbb5c45
msgid ""
"Core language TT (defined in ``Core.TT``), based on quantitative type "
"theory (see https://bentnib.org/quantitative-type-theory.html). Binders "
"have \"multiplicities\" which are either *0*, *1* or *unlimited*."
msgstr ""
"核心语言 TT（在 ``Core.TT`` 中定义），基于定量类型理论（参见 https://bentnib."
"org/quantitative-type-theory.html）。具有 *0* 、 *1* 或 *unlimited* 的 "
"“多重性”。"

#: ../source/implementation/overview.rst:17 e1a58062f42e459a93aed9b480ebf1ac
msgid ""
"Terms are indexed over the names in scope so that we know terms are "
"always well scoped. Values (i.e. normal forms) are defined in "
"``Core.Value`` as ``NF``; constructors do not evaluate their arguments "
"until explicitly requested."
msgstr ""
"术语在范围内的名称上编入索引，因此我们知道术语始终具有良好的范围。值（即标准"
"形式）在 ``Core.Value`` 中定义为 ``NF`` "
"；在明确请求之前，构造函数不会对参数进行求值。"

#: ../source/implementation/overview.rst:21 77a0162eec8e44b88424cb633f47520d
msgid ""
"Elaborate to *TT* from a higher level language *TTImp* (defined in "
"``TTImp.TTImp``), which is TT with implicit arguments, local function "
"definitions, case blocks, as patterns, qualified names with automatic "
"type-directed disambiguation, and proof search."
msgstr ""
"从更高级别的语言 *TTImp*（定义在 ``TTImp.TTImp`` ）中细化到 "
"*TT*，这是带有隐式参数、局部函数定义、案例块、作为模式、"
"具有自动类型导向消歧的限定名称的 TT , 还有证明搜索。"

#: ../source/implementation/overview.rst:26 f14904e9b53f4f508b7c0f3ffd066f45
msgid ""
"Elaboration relies on unification (in ``Core.Unify``), which allows "
"postponing of unification problems. Essentially works the same way as "
"Agda as described in Ulf Norell's thesis."
msgstr ""
"细化依赖于 unification（在 ``Core.Unify`` 中），它允许推迟 unification 问题。"
"基本上与 Ulf Norell 论文中描述的 Agda 的工作方式相同。"

#: ../source/implementation/overview.rst:30 3ddb5388e1f246d4ac6b5a4f376a931a
msgid ""
"General idea is that high level languages will provide a translation to "
"TT. In the ``Idris/`` namespace we define the high level syntax for "
"Idris, which translates to TTImp by desugaring operators, do notation, "
"etc."
msgstr ""
"一般的想法是高级语言将提供对 TT 的翻译。在 ``Idris/`` 命名空间中，我们定义了 "
"Idris 的高级语法，它通过脱糖操作符、do 符号等转换为 TTImp。"

#: ../source/implementation/overview.rst:34 8efd69c0108045748a1748497af6d51f
msgid ""
"There is a separate linearity check after elaboration, which updates "
"types of holes (and is aware of case blocks). This is implemented in "
"``Core.LinearCheck``. During this check, we also recalculate the "
"multiplicities in hole applications so that they are displayed "
"appropriately (e.g. if a linear variable is unused elsewhere, it will "
"always appear with multiplicity 1 in holes)."
msgstr ""
"在细化之后有一个单独的线性检查，它会更新孔的类型（并且知道 case 块）。这是在 "
"``Core.LinearCheck`` 中实现的。在此检查期间，我们还重新计算孔应用程序中的多重"
"性，以便它们正确显示（例如，如果线性变量在其他地方未使用，它将始终以多重性 1 "
"出现在孔中）。"

#: ../source/implementation/overview.rst:42 e90ccf3d54b344be8aa0a69d4ddf755a
msgid "Where to find things:"
msgstr "目录结构："

#: ../source/implementation/overview.rst:44 7a38848b0e774ce682ab517e0dd230f5
msgid "``Core/`` -- anything related to the core TT, typechecking and unification"
msgstr "``Core/`` -- 与核心 TT、类型检查和 unification 相关的任何内容"

#: ../source/implementation/overview.rst:45 0612fc0dedf244d0ac420b5d558d558b
msgid "``TTImp/`` -- anything related to the implicit TT and its elaboration"
msgstr "``TTImp/`` -- 与隐式 TT 及其详细说明相关的任何内容"

#: ../source/implementation/overview.rst:47 9d8c8cb6db304500922fadc3cf66268f
msgid "``TTImp/Elab/`` -- Elaboration state and elaboration of terms"
msgstr "``TTImp/Elab/`` -- 细化状态和细化术语"

#: ../source/implementation/overview.rst:48 0c6b52ac182c4233920107bd82feb856
msgid "``TTImp/Interactive/`` -- Interactive editing infrastructure"
msgstr "``TTImp/Interactive/`` -- 交互式编辑基础设施"

#: ../source/implementation/overview.rst:50 672ef2e4d1474266b496c7ca9b9bba2e
msgid ""
"``Parser/`` -- various utilities for parsing and lexing TT and TTImp (and"
" other things)"
msgstr "``Parser/`` -- 用于解析和词法分析 TT 和 TTImp（以及其他东西）的各种实用程序"

#: ../source/implementation/overview.rst:51 c46ea8d14ba84796a2bae929f4907537
msgid "``Utils/`` -- some generally useful utilities"
msgstr "``Utils/`` -- 一些通常有用的实用程序"

#: ../source/implementation/overview.rst:52 8f3f84526d5a406dab987e88657cc64c
msgid ""
"``Idris/`` -- anything relating to the high level language, translating "
"to TTImp"
msgstr "``Idris/`` -- 任何与高级语言相关的东西，翻译成 TTImp"

#: ../source/implementation/overview.rst:54 c32ae7b5396a46c681e1edefea5fb2a6
msgid ""
"``Idris/Elab/`` -- High level construct elaboration machinery (e.g. "
"interfaces)"
msgstr "``Idris/Elab/`` -- 高级构造细化机制（例如接口）"

#: ../source/implementation/overview.rst:56 e4797d0721dc4a18a995977d403df4d6
msgid "``Compiler/`` -- back ends"
msgstr "``Compiler/`` -- 编译器后端"

#: ../source/implementation/overview.rst:59 6c74bd2238a34b8dae621ccd1db930ea
msgid "The Core Type, and Ref"
msgstr "核心类型和参考"

#: ../source/implementation/overview.rst:61 884448107da74ba1886e9fb15338a54d
msgid ""
"``Core`` is a \"monad\" (not really, for efficiency reasons, at the "
"moment...) supporting ``Error``'s and ``IO`` (I did originally plan to "
"allow restricting this to some specific IO operations, but haven't yet)."
"  The raw syntax is defined by a type ``RawImp`` which has a source "
"location at each node, and any errors in elaboration note the location at"
" the point where the error occurred, as a file context ``FC``."
msgstr ""
"``Core`` 是一个 “monad”（不是真的，出于效率的原因，目前...）支持 ``Error`` "
"和 ``IO`` (我最初确实计划允许将此限制到一些特定的 IO 操作，但尚未完成）。"
"原始语法由 ``RawImp`` 类型定义，该类型在每个节点都有一个源位置，详细说明中的"
"任何错误都会记录错误发生点的位置，作为文件上下文 ``FC`` 。"

#: ../source/implementation/overview.rst:68 c0065384392d44799be9b76df399b22a
msgid ""
"``Ref`` is essentially an ``IORef``. Typically we pass them implicitly "
"and use labels to disambiguate which one we mean. See ``Core.Core`` for "
"their definition. Again, ``IORef`` is for efficiency - even if it would "
"be neater to use a state monad this turned out to be about 2-3 times "
"faster, so I'm going with the \"ugly\" choice..."
msgstr ""
"``Ref`` 本质上是一个 ``IORef`` "
"。通常我们会隐式传递它们并使用标签来区分我们的意图。有关它们的定义，请参见 "
"``Core.Core`` 。再一次， ``IORef`` 是为了提高效率——即使使用 state monad "
"会更整洁，但结果却快了大约 2-3 倍，所以我选择了 “丑陋” 的选择......"

#: ../source/implementation/overview.rst:75 0acd8c03a267472a941ababbcefe573a
msgid "Term representation"
msgstr "术语表示"

#: ../source/implementation/overview.rst:77 b2ab4658557e43dca949164b42b977ca
msgid ""
"Terms in the core language are indexed by a list of the names in scope, "
"most recently defined first:"
msgstr "核心语言中的术语由作用域内的名称列表索引，最近定义的优先："

#: ../source/implementation/overview.rst:84 254cbc5122b04f4d9d1340215ad70f15
msgid ""
"This means that terms are always well scoped, and we can use the type "
"system to keep us right when manipulating names. For example, we have:"
msgstr "这意味着术语总是有恰当的作用域，我们可以使用类型系统来保持我们在操作名称时的"
"正确性。例如，我们有："

#: ../source/implementation/overview.rst:92 8947ad9b1e3141308a809da08e86cccd
msgid ""
"So local variables are represented by an index into the local context (a "
"de Bruijn index, ``idx``), and a proof, erased at run time, that the "
"index is valid. So everything is de Bruijn indexed, but the type checker "
"still keeps track of the indices so that we don't have to think too hard!"
msgstr ""
"因此，局部变量由局部上下文中的索引（de Bruijn 索引 ``idx`` "
"）表示，并在运行时擦除该索引有效的证明。所以一切都被 de Bruijn "
"索引了，但是类型检查器仍然跟踪索引，这样我们就不必想太多了！"

#: ../source/implementation/overview.rst:97 e4f0b9ae7b324ae6ac2ee98c3e740a9e
msgid ""
"``Core.TT`` contains various handy tools for manipulating terms with "
"their indices, such as:"
msgstr "``Core.TT`` 包含各种方便的工具，用于使用它们的索引来操作术语，例如："

#: ../source/implementation/overview.rst:108 c3eb402156bd4124987ca59a4497ad26
msgid ""
"Note that the types are explicit about when the ``vars`` needs to be "
"passed at run time, and when it isn't. Mostly where it's needed it's to "
"help with displaying names, or name generation, rather than any "
"fundamental reason in the core. In general, this isn't expensive at run "
"time."
msgstr ""
"请注意，类型明确说明何时需要在运行时传递 ``vars`` ，何时不需要。大多数需要它"
"的地方是帮助显示名称或名称生成，而不是核心中的任何基本原因。一般来说，这在运"
"行时并不昂贵。"

#: ../source/implementation/overview.rst:113 f2a550692b94412cbec8771f805e532b
msgid "Environments, defined in ``Core.Env``, map local variables to binders:"
msgstr "在 ``Core.Env`` 中定义的环境变量将局部变量映射到绑定器："

#: ../source/implementation/overview.rst:119 6272090c38fc4bbd9b821fc181c9da56
msgid ""
"A binders is typically a *lambda*, a *pi*, or a *let* (with a value), but"
" can also be a *pattern variable*. See the definition of ``TT`` for more "
"details. Where we have a term, we usually also need an ``Env``."
msgstr "绑定器通常是 *lambda*、*pi* 或 *let*（带值），也可以是 *模式变量*。更多细节见 ``TT`` 的定义。通常有 term 的地方也需要 ``Env``。"

#: ../source/implementation/overview.rst:123 4ce489e4ec484bf6a1a6ecffa8936d3b
msgid ""
"We also have values, which are in head normal form, and defined in "
"``Core.Value``:"
msgstr "我们还有值（value），它们处于头部标准形（head normal form），在 ``Core.Value`` 中定义："

#: ../source/implementation/overview.rst:130 8e00a74e516048f086f468e1f87ea825
msgid "We can convert a term to a value by normalising..."
msgstr "我们可以通过归约（normalising）将 term 转换为 value..."

#: ../source/implementation/overview.rst:137 ae3dc146a36f40318845235da2f19e98
msgid "...and back again, by quoting:"
msgstr "...也可以通过 quoting 反向转换："

#: ../source/implementation/overview.rst:144 5f96599ca89743809417b1414b1adfbd
msgid ""
"Both ``nf`` and ``quote`` are defined in ``Core.Normalise``. We don't "
"always know whether we'll need to work with ``NF`` or ``Term``, so we "
"also have a \"glued\" representation, ``Glued vars``, again defined in "
"``Core.Normalise``, which lazily computes either a ``NF`` or ``Term`` as "
"required. Elaborating a term returns the type as a ``Glued vars``."
msgstr "``nf`` 和 ``quote`` 都定义在 ``Core.Normalise`` 中。我们并不总是知道需要处理 ``NF`` 还是 ``Term``，因此还引入了一种“粘合”（glued）表示 ``Glued vars``，同样定义在 ``Core.Normalise``，可按需惰性计算为 ``NF`` 或 ``Term``。对 term 进行 elaboration 时，返回的类型就是 ``Glued vars``。"

#: ../source/implementation/overview.rst:150 758da057c3c84f76a9373a0b27cd08b9
msgid ""
"``Term`` separates ``Ref`` (global user defined names) from ``Meta``, "
"which are globally defined metavariables. For efficiency, metavariables "
"are only substituted into terms if they have non-0 multiplicity, to "
"preserve sharing as much as possible."
msgstr "``Term`` 区分了 ``Ref``（全局用户自定义名称）和 ``Meta``（全局定义的元变量）。为提高效率，只有当元变量的多重性不为 0 时，才会将其替换进 term，以尽可能保留共享。"

#: ../source/implementation/overview.rst:156 da5ead02cf714d9d8dc28c97dd9dca34
msgid "Unification"
msgstr "统一（Unification）"

#: ../source/implementation/overview.rst:157 83dee7809d00422f843ee44b1099416a
msgid ""
"Unification is probably the most important part of the elaboration "
"process, and infers values for implicit arguments. That is, it finds "
"values for the things which are referred to by ``Meta`` in ``Term``. It "
"is defined in ``Core.Unify``, as the top level unification function has "
"the following type:"
msgstr "统一（unification）可能是 elaboration 过程中最重要的部分，用于推断隐式参数的值。即为 ``Term`` 中 ``Meta`` 所引用的内容寻找具体值。其定义在 ``Core.Unify``，顶层统一函数类型如下："

#: ../source/implementation/overview.rst:174 3ba67309f13a41ddbc864ea9b2412974
msgid ""
"The ``Unify`` interface is there because it is convenient to be able to "
"define unification on ``Term`` and ``NF``, as well as ``Closure`` (which "
"is part of ``NF`` to represent unevaluated arguments to constructors)."
msgstr "之所以有 ``Unify`` 接口，是为了方便对 ``Term``、``NF`` 以及 ``Closure``（``NF`` 的一部分，用于表示构造器的未求值参数）定义统一操作。"

#: ../source/implementation/overview.rst:178 e151330a19ae4c3a8ee84f6ad58a997b
msgid ""
"This is one place where indexing over ``vars`` is extremely valuable: we "
"have to keep the environment consistent, so unification won't "
"accidentally introduce any scoping bugs!"
msgstr "这正是对 ``vars`` 进行索引极为重要的地方：我们必须保持环境一致，这样统一过程就不会意外引入作用域错误！"

#: ../source/implementation/overview.rst:182 78a9f6e50afe48b6aefc8cf242c1542a
msgid ""
"Idris 2 implements pattern unification - see Adam Gundry's thesis for an "
"accessible introduction."
msgstr "Idris 2 实现了模式统一（pattern unification）——可参考 Adam Gundry 的论文获得易懂的介绍。"

#: ../source/implementation/overview.rst:186 758b6677419b420da33a36f81f085e36
msgid "Context"
msgstr "上下文（Context）"

#: ../source/implementation/overview.rst:188 3305288e250f4f528c8031764841cfca
msgid ""
"``Core.Context`` defines all the things needed for TT. Most importantly: "
"``Def`` gives definitions of names (case trees, builtins, constructors "
"and holes, mostly); ``GlobalDef`` is a definition with all the other "
"information about it (type, visibility, totality, etc); ``Context`` is a "
"context mapping names to ``GlobalDef``, and ``Defs`` is the core data "
"structure with everything needed to typecheck more definitions."
msgstr "``Core.Context`` 定义了 TT 所需的所有内容。最重要的是：``Def`` 提供名称的定义（主要是 case 树、内建、构造器和 hole）；``GlobalDef`` 是包含所有其他信息（类型、可见性、完备性等）的定义；``Context`` 是将名称映射到 ``GlobalDef`` 的上下文，``Defs`` 是包含类型检查更多定义所需一切的核心数据结构。"

#: ../source/implementation/overview.rst:195 8686b491f2bc44cf888ccb58a39e3101
msgid ""
"The main Context type stores definitions in an array, indexed by a "
"\"resolved name id\", an integer, for fast look up. This means that it "
"also needs to be able to convert between resolved names and full names. "
"The ``HasNames`` interface defines methods for going back and forth "
"between structures with human readable names, and structures with "
"resolved integer names."
msgstr "主 Context 类型将定义存储在数组中，通过\"已解析名称 id\"（整数）索引，以便快速查找。这也意味着需要能够在已解析名称和完整名称之间转换。``HasNames`` 接口定义了在可读名称结构和已解析整数名称结构之间相互转换的方法。"

#: ../source/implementation/overview.rst:201 c7615ad3312f4ecfb61e794b04419d5b
msgid ""
"Since we store names in an array, all the lookup functions need to be in "
"the ``Core`` monad. This also turns out to help with loading checked "
"files (see below)."
msgstr "由于名称存储在数组中，所有查找函数都需要在 ``Core`` monad 中实现。这也有助于加载已检查文件（见下文）。"

#: ../source/implementation/overview.rst:206 87fce56d53894aacb97d742a39333bf6
msgid "Elaboration Overview"
msgstr "细化（Elaboration）概述"

#: ../source/implementation/overview.rst:208 8461e1fe2aee4d8faa3ee268cd20b029
msgid ""
"Elaboration of ``RawImp`` to ``TT`` is driven by ``TTImp.Elab``, with the"
" top level function for elaborating terms defined in ``TTImp.Elab.Term``,"
" support functions defined in ``TTImp.Elab.Check``, and elaborators for "
"the various TTImp constructs defined in separate files under "
"``TTImp.Elab.*``."
msgstr "将 ``RawImp`` 细化为 ``TT`` 由 ``TTImp.Elab`` 驱动，细化 term 的顶层函数定义在 ``TTImp.Elab.Term``，支持函数定义在 ``TTImp.Elab.Check``，各种 TTImp 结构的细化器定义在 ``TTImp.Elab.*`` 下的独立文件中。"

#: ../source/implementation/overview.rst:214 6f400d799b384b6b94afcab94e554ba8
msgid "Laziness"
msgstr "惰性（Laziness）"

#: ../source/implementation/overview.rst:216 ca99679d66014169935e718ae7684504
msgid ""
"Like Idris 1, laziness is marked in types using ``Lazy``, ``Delay`` and "
"``Force``, or ``Inf`` (instead of ``Lazy``) for codata. Unlike Idris 1, "
"these are language primitives rather than special purpose names."
msgstr "与 Idris 1 类似，惰性在类型中用 ``Lazy``、``Delay`` 和 ``Force`` 标记，对于 codata 用 ``Inf``（代替 ``Lazy``）。与 Idris 1 不同，这些是语言原语而非特殊名称。"

#: ../source/implementation/overview.rst:220 6a7717a761fd4a31bee36c7218e14b0c
msgid ""
"Implicit laziness resolution is handled during unification (in "
"``Core.Unify``). When unification is invoked (by ``convert`` in "
"``TTImp.Elab.Check``) with the ``withLazy`` flag set, it checks whether "
"it is converting a lazy type with a non-lazy type. If so, it continues "
"with unification, but returning that either a ``Force`` or ``Delay`` "
"needs inserting as appropriate."
msgstr "隐式惰性解析在统一（``Core.Unify``）过程中处理。当以 ``withLazy`` 标志调用统一（由 ``TTImp.Elab.Check`` 中的 ``convert`` 调用）时，会检查是否在将惰性类型转换为非惰性类型。如果是，则继续统一，但会返回需要插入 ``Force`` 或 ``Delay``。"

#: ../source/implementation/overview.rst:227 1870721fa6224d7eb4ed6e618d8e0048
msgid "TTC format"
msgstr "TTC 格式"

#: ../source/implementation/overview.rst:229 04da60e4f1444a9ca5ff0dd5f6acc321
msgid ""
"We can save things to binary if we have an implementation of the TTC "
"interface for it. See ``Utils.Binary`` to see how this is done. It uses a"
" global reference ``Ref Bin Binary`` which uses ``Data.Buffer`` "
"underneath."
msgstr "如果为其实现了 TTC 接口，就可以将内容保存为二进制。具体做法见 ``Utils.Binary``。其底层使用 ``Data.Buffer`` 的全局引用 ``Ref Bin Binary``。"

#: ../source/implementation/overview.rst:233 729eef2bec6a4d3da166337ae5384c51
msgid ""
"When we load checked TTC files, we don't process the definitions "
"immediately, but rather store them as a ``ContextEntry``, which is either"
" a ``Binary`` blob, or a processed definition. We only process the "
"definitions the first time they are looked up, since converting Binary to"
" the definition is fairly costly (due to having to construct a lot of AST"
" nodes), and often definitions in an imported file are never used."
msgstr "加载已检查的 TTC 文件时，不会立即处理定义，而是将其存储为 ``ContextEntry``，要么是 ``Binary`` 二进制块，要么是已处理的定义。只有首次查找时才处理定义，因为将二进制转换为定义的开销较大（需构造大量 AST 节点），而且导入文件中的定义往往不会被用到。"

#: ../source/implementation/overview.rst:241 0b86f4c0d3d8481c849c4e8a99de4eb4
msgid "Bound Implicits"
msgstr "绑定隐式参数（Bound Implicits）"

#: ../source/implementation/overview.rst:243 c06e5abb13c2433ebc5573baafe36592
msgid ""
"The ``RawImp`` type has a constructor ``IBindVar``. The first time we "
"encounter an ``IBindVar``, we record the name as one which will be "
"implicitly bound. At the end of elaboration, we decide which holes should"
" turn into bound variables (Pi bound in types, Pattern bound on a LHS, "
"still holes on the RHS) by looking at the list of names bound as "
"``IBindVar``, the things they depend on, and sorting them so that they "
"are bound in dependency order. This happens in "
"``TTImp.Implicit.getToBind``."
msgstr "``RawImp`` 类型有一个构造器 ``IBindVar``。首次遇到 ``IBindVar`` 时，会将其名称记录为将被隐式绑定的名称。细化结束时，通过查看作为 ``IBindVar`` 绑定的名称列表及其依赖关系，并按依赖顺序排序，决定哪些 hole 应转为绑定变量（类型中的 Pi 绑定、左侧的 Pattern 绑定、右侧仍为 hole）。此过程在 ``TTImp.Implicit.getToBind`` 中实现。"

#: ../source/implementation/overview.rst:251 d3d40078774c4ff196bdb02e6f694548
msgid ""
"Once we know what the bound implicits need to be, we bind them in "
"``bindImplicits``. Any application of a hole which stands for a bound "
"implicit gets turned into a local binding (either Pi or Pat as "
"appropriate, or PLet for @-patterns)."
msgstr "确定需要绑定哪些隐式参数后，在 ``bindImplicits`` 中进行绑定。任何代表绑定隐式参数的 hole 的应用都会转为局部绑定（类型为 Pi 或 Pat，@-pattern 用 PLet）。"

#: ../source/implementation/overview.rst:259 f63fcba6b6794aa384366a31532376ae
msgid "Unbound Implicits"
msgstr "未绑定隐式参数（Unbound Implicits）"

#: ../source/implementation/overview.rst:261 82b077e50dc44619930907cc8001cef7
msgid ""
"Any name beginning with a lower case letter is considered an unbound "
"implicit. They are elaborated as holes, which may depend on the initial "
"environment of the elaboration, and after elaboration they are converted "
"to an implicit pi binding, with multiplicity 0. So, for example:"
msgstr "任何以小写字母开头的名称都视为未绑定隐式参数。它们在细化时被 elaboration 为 hole，可能依赖于初始环境，细化后会被转换为多重性为 0 的隐式 pi 绑定。例如："

#: ../source/implementation/overview.rst:270 269afd20748d467dbf4ad60d2cb73a64
msgid "becomes:"
msgstr "变为："

#: ../source/implementation/overview.rst:276 cf87e454faee496f8551134d5101fdba
msgid ""
"Bindings are ordered according to dependency. It'll infer any additional "
"names, e.g. in:"
msgstr "绑定顺序按依赖关系排列。它会自动推断额外名称，例如："

#: ../source/implementation/overview.rst:283 ebcd7f92f14446aaa26f390a6df51d7b
msgid ""
"... where ``xs`` is a ``Vect n a``, it infers bindings for ``n`` and "
"``a``."
msgstr "...其中 ``xs`` 是 ``Vect n a``，会自动推断 ``n`` 和 ``a`` 的绑定。"

#: ../source/implementation/overview.rst:285 c33d759be46146c9b3936c3d544c91b7
#, python-format
msgid ""
"The ``%unbound_implicits`` directive means that it will no longer "
"automatically bind names (that is, ``a`` and ``b`` in ``map`` above) but "
"it will still infer the types for any additional names, e.g. if you "
"write:"
msgstr "``%unbound_implicits`` 指令表示不再自动绑定名称（如上例 ``map`` 中的 ``a`` 和 ``b``），但仍会为额外名称推断类型，例如："

#: ../source/implementation/overview.rst:293 6bd24327a7eb436c882a64cdca807d50
msgid ""
"... it will still infer a type for ``xs`` and infer bindings for ``n`` "
"and ``a``."
msgstr "...它仍会为 ``xs`` 推断类型，并推断 ``n`` 和 ``a`` 的绑定。"

#: ../source/implementation/overview.rst:297 dc7d65bfea054207a309b64fd4b3c90e
msgid "Implicit arguments"
msgstr "隐式参数（Implicit arguments）"

#: ../source/implementation/overview.rst:299 782062d101114a0399495c826cc42222
msgid ""
"When we encounter an implicit argument (``_`` in the raw syntax, or added"
" when we elaborate an application and see that there is an implicit "
"needed) we make a new hole which is a fresh name applied to the current "
"environment, and return that as the elaborated term. This happens in "
"``TTImp.Elab.Check``, with the function ``metaVar``.  If there's enough "
"information elsewhere we'll find the definition of the hole by "
"unification."
msgstr "遇到隐式参数（原始语法中的 ``_``，或在细化应用时发现需要隐式参数而添加）时，会创建一个新 hole，即在当前环境下应用的新名称，并将其作为细化后的 term 返回。此过程在 ``TTImp.Elab.Check`` 的 ``metaVar`` 函数中实现。如果其他地方信息足够，会通过统一找到 hole 的定义。"

#: ../source/implementation/overview.rst:306 6608240d1cc84433a56da7424fa193ea
msgid ""
"We never substitute holes in a term during elaboration and rely on "
"normalisation if we need to look inside it. If there are holes remaining "
"after elaboration of a definition, report an error (it's okay for a hole "
"in a type as long as it's resolved by the time the definition is done)."
msgstr "在细化过程中不会替换 term 中的 hole，若需查看其内部则依赖归约（normalisation）。若定义细化后仍有 hole，需报错（类型中的 hole 只要在定义完成前被解决即可）。"

#: ../source/implementation/overview.rst:311 f4e4304b1689414fb5a4a54d4803222f
msgid ""
"See ``Elab.App.makeImplicit``, ``Elab.App.makeAutoImplicit`` to see where"
" we add holes for the implicit arguments in applications."
msgstr "可查看 ``Elab.App.makeImplicit``、``Elab.App.makeAutoImplicit``，了解在应用中为隐式参数添加 hole 的位置。"

#: ../source/implementation/overview.rst:314 fbc5e5d676194bf18ca038d1d9a2f6d4
msgid ""
"``Elab.App`` does quite a lot of tricky stuff! In an attempt to help with"
" resolving ambiguous names and record updates, it will sometimes delay "
"elaboration of an argument (see ``App.checkRestApp``) so that it can get "
"more information about its type first."
msgstr "``Elab.App`` 做了很多复杂的工作！为帮助解析歧义名称和记录更新，有时会延迟参数的细化（见 ``App.checkRestApp``），以便先获取更多类型信息。"

#: ../source/implementation/overview.rst:319 265bc2052f004dfa98fb88f827dbfc0a
msgid ""
"``Core.Unify.solveConstraints`` revisits all of the currently unsolved "
"holes and constrained definitions, and tries again to unify any "
"constraints which they require. It also tries to resolve anything defined"
" by proof search. The current state of unification is defined in "
"``Core.UnifyState``, and unification constraints record which "
"metavariables are blocking them. This improves performance, since we'll "
"only retry a constraint if one of the blocking metavariables has been "
"resolved."
msgstr "``Core.Unify.solveConstraints`` 会重新检查所有当前未解决的 hole 和受约束的定义，并再次尝试统一它们所需的约束。同时也会尝试解决由 proof search 定义的内容。统一的当前状态定义在 ``Core.UnifyState``，统一约束会记录哪些元变量阻塞了它们。这提升了性能，因为只有当阻塞元变量之一被解决时才会重试约束。"

#: ../source/implementation/overview.rst:328 652ef9e9100a403fbf5368c393abbcc6
msgid "Additional type inference"
msgstr "额外类型推断（Additional type inference）"

#: ../source/implementation/overview.rst:330 fd2ecc22ca7d4af2baa579699768ad9e
msgid ""
"A ``?`` in a type means \"infer this part of the type\".  This is "
"distinct from ``_`` in types, which means \"I don't care what this is\". "
"The distinction is in what happens when inference fails.  If inference "
"fails for ``_``, we implicitly bind a new name (just like pattern "
"matching on the lhs - i.e. it means match anything). If inference fails "
"for ``?``, we leave it as a hole and try to fill it in later. As a "
"result, we can say:"
msgstr "类型中的 ``?`` 表示\"推断此部分类型\"。这与类型中的 ``_`` 不同，后者表示\"我不关心这是什么\"。两者的区别在于推断失败时的处理。若 ``_`` 推断失败，会隐式绑定新名称（类似左侧的模式匹配，即匹配任意内容）；若 ``?`` 推断失败，则保留为 hole，稍后再尝试填充。因此，可以这样写："

#: ../source/implementation/overview.rst:342 17a66152d2434dcfafb736efbf6450d1
msgid "... and the ``?`` will be inferred to be 4. But if we say:"
msgstr "...此时 ``?`` 会被推断为 4。但如果这样写："

#: ../source/implementation/overview.rst:349 f20c39e4a1de48f6aed8ea791ee2fac3
msgid ""
"... we'll get an error, because the ``_`` has been bound as a new name. "
"Both ``?`` and ``_`` are represented in ``RawImp`` by the ``Implicit`` "
"constructor, which has a boolean flag meaning \"bind if unresolved\"."
msgstr "...则会报错，因为 ``_`` 被绑定为新名称。``?`` 和 ``_`` 在 ``RawImp`` 中都由 ``Implicit`` 构造器表示，带有一个布尔标志，表示"未解决时绑定"。"

#: ../source/implementation/overview.rst:353 794fb17b74ca432c9d730f5fc191ad2a
msgid ""
"So the meaning of ``_`` is now consistent on the lhs and in types (i.e. "
"it means infer a value and bind a variable on failure to infer anything)."
" In practice, using ``_`` will get you the old Idris behaviour, but ``?``"
" might get you a bit more type inference."
msgstr "因此，``_`` 在左侧和类型中的含义现在是一致的（即推断值，推断失败时绑定变量）。实际使用中，``_`` 会得到 Idris 旧有行为，而 ``?`` 能获得更多类型推断。"

#: ../source/implementation/overview.rst:359 47c216df377648ba9111670a55ca032b
msgid "Auto Implicits"
msgstr "自动隐式参数（Auto Implicits）"

#: ../source/implementation/overview.rst:361 62089c9772bd401ba13d2a34aefc04b4
msgid ""
"Auto implicits are resolved by proof search, and can be given explicit "
"arguments in the same way as ordinary implicits: i.e. ``{x = exp}`` to "
"give ``exp`` as the value for auto implicit ``x``. Interfaces are "
"syntactic sugar for auto implicits (it is the same resolution mechanism -"
" interfaces translate into records, and implementations translate into "
"hints for the search)."
msgstr "自动隐式参数通过 proof search 解析，也可以像普通隐式参数一样显式传参：即用 ``{x = exp}`` 指定 auto implicit ``x`` 的值。接口（interface）是自动隐式参数的语法糖（解析机制相同——接口会转为 record，实现会转为搜索提示）。"

#: ../source/implementation/overview.rst:367 bf7a5756a38a4421b5c4ae4910dbc70d
msgid ""
"The argument syntax ``@{exp}`` means that the value of the next auto "
"implicit in the application should be ``exp`` - this is the same as the "
"syntax for invoking named implementations in Idris 1, but interfaces and "
"auto implicits have been combined now."
msgstr "参数语法 ``@{exp}`` 表示应用中的下一个自动隐式参数取值为 ``exp``——这与 Idris 1 中调用具名实现的语法相同，但现在接口和自动隐式参数已合并。"

#: ../source/implementation/overview.rst:372 1f7166701b5b4d32b249ec98f8c71bde
msgid ""
"Implicit search is defined in ``Core.AutoSearch``. It will only begin a "
"search if all the *determining arguments* of the goal are defined, "
"meaning that they don't contain *any* holes. This avoids committing too "
"early to the solution of a hole by resolving it by search, rather than "
"unification, unless a programmer has explicitly said (via a ``search`` "
"option on a data type) that that's what they want."
msgstr "隐式参数搜索定义在 ``Core.AutoSearch``。只有当目标的所有*决定性参数*都已确定（即不包含任何 hole）时才会开始搜索。这避免了过早通过搜索（而非统一）解决 hole，除非程序员通过数据类型上的 ``search`` 选项明确要求。"

#: ../source/implementation/overview.rst:380 6c5acc49b927401fa4d6c4781c27cfb3
msgid "Dot Patterns"
msgstr "点模式（Dot Patterns）"

#: ../source/implementation/overview.rst:382 437973649fb94a05b9f37603b0d3459e
msgid ""
"``IMustUnify`` is a constructor of ``RawImp``. When we elaborate this, we"
" generate a hole, then elaborate the term, and add a constraint that the "
"generated hole must unify with the term which was explicitly given (in "
"``UnifyState.addDot``), without resolving any holes. This is finally "
"checked in ``UnifyState.checkDots``."
msgstr "``IMustUnify`` 是 ``RawImp`` 的一个构造器。细化时会生成一个 hole，然后细化 term，并添加约束，要求生成的 hole 必须与显式给定的 term 统一（在 ``UnifyState.addDot`` 中），但不解决任何 hole。最终在 ``UnifyState.checkDots`` 中检查。"

#: ../source/implementation/overview.rst:388 1362de54978643908237130d46e38391
msgid "Proof Search"
msgstr "证明搜索（Proof Search）"

#: ../source/implementation/overview.rst:390 11d37b7969fd41aeb46f97cba1b96ed7
msgid ""
"A definition constructed with ``Core.Context.BySearch`` is a hole which "
"will be resolved by searching for something which fits the type. This "
"happens in ``Core.AutoSearch``. It checks all possible hints for a term, "
"to ensure that only one is possible."
msgstr "用 ``Core.Context.BySearch`` 构造的定义是一个 hole，将通过搜索符合类型的内容来解决。这在 ``Core.AutoSearch`` 中实现。它会检查 term 的所有可能提示，确保只有一个可行。"

#: ../source/implementation/overview.rst:396 af36ee137aef41fba85439c9c64e0db8
msgid "@-Patterns"
msgstr "@-模式（@-Patterns）"

#: ../source/implementation/overview.rst:398 2e6a4e425b184697900638419562cb0a
msgid ""
"Names which are bound in types are also bound as @-patterns, meaning that"
" functions have access to them. For example, we can say:"
msgstr "类型中绑定的名称也会作为 @-模式绑定，意味着函数可以访问它们。例如，可以这样写："

#: ../source/implementation/overview.rst:407 006b73bb48c84588ac2ff9d36b555711
msgid ""
"As patterns are implemented as a constructor of ``TT``, which makes a lot"
" of things more convenient (especially case tree compilation)."
msgstr "as 模式实现为 ``TT`` 的一个构造器，这让许多事情更方便（尤其是 case 树编译）。"

#: ../source/implementation/overview.rst:411 927aaab9048647acb7c52e5bcc69683e
msgid "Linear Types"
msgstr "线性类型（Linear Types）"

#: ../source/implementation/overview.rst:413 ce5bc4ac8094498f80c87c42da431987
msgid ""
"Following Conor McBride and Bob Atkey's work, all binders have a "
"multiplicity annotation (``RigCount``). After elaboration in "
"``TTImp.Elab``, we do a separate linearity check which: a) makes sure "
"that linear variables are used exactly once; b) updates hole types to "
"properly reflect usage information."
msgstr "根据 Conor McBride 和 Bob Atkey 的工作，所有绑定器都有多重性（``RigCount``）注解。在 ``TTImp.Elab`` 细化后，会单独进行线性检查：a）确保线性变量正好被使用一次；b）更新 hole 类型以正确反映使用信息。"

#: ../source/implementation/overview.rst:419 e337a6355e714484a78d9aaf7513a28f
msgid "Local definitions"
msgstr "局部定义（Local definitions）"

#: ../source/implementation/overview.rst:421 9f0c8e774fdb4a139db2b63662b2aa88
msgid ""
"We elaborate relative to an environment, meaning that we can elaborate "
"local function definitions. We keep track of the names being defined in a"
" nested block of declarations, and ensure that they are lifted to top "
"level definitions in TT by applying them to every name in scope."
msgstr "细化时是相对于某个环境进行的，这意味着可以细化局部函数定义。会跟踪嵌套声明块中正在定义的名称，并确保通过应用到作用域内的每个名称，将它们提升为 TT 的顶层定义。"

#: ../source/implementation/overview.rst:426 5b7347f8d5864aa48c241c0b41d4912b
msgid ""
"Since we don't know how many times a local definition will be applied, in"
" general, anything bound with multiplicity 1 is passed to the local "
"definition with multiplicity 0, so if you want to use it in a local "
"definition, you need to pass it explicitly."
msgstr "由于无法预知局部定义会被应用多少次，通常所有多重性为 1 的绑定都会以多重性 0 传递给局部定义，因此若要在局部定义中使用它，需要显式传递。"

#: ../source/implementation/overview.rst:432 350b7789d111482db528d4c5a9023728
msgid "Case blocks"
msgstr "case 块（Case blocks）"

#: ../source/implementation/overview.rst:434 a609301d5c1f493db6d1c15b57a55e0d
msgid ""
"Similar to local definitions, these are lifted to top level definitions "
"which represent the case block, which is immediately applied to the "
"scrutinee of the case. We don't attempt to calculate the multiplicities "
"of arguments when elaborating the case block, since we'll probably get it"
" wrong - instead, these are checked during linearity checking, which "
"knows about case functions."
msgstr "与局部定义类似，case 块也会被提升为顶层定义，代表 case 块，并立即应用于 case 的被检对象。细化 case 块时不会尝试计算参数的多重性，因为很可能会出错——而是在后续的线性检查阶段处理，线性检查器了解 case 函数。"

#: ../source/implementation/overview.rst:440 e3a0d65d52374073ab15cb8a4dcb2fe7
msgid ""
"Case blocks in the scope of local definitions are tricky, because the "
"names need to match up, and the types might be refined, but we also still"
" need to apply the local names to the scope in which they were defined. "
"This is a bit fiddly, and dealt with by the ``ICaseLocal`` constructor of"
" ``RawImp``."
msgstr "局部定义作用域内的 case 块较为棘手，因为名称需要对应，类型可能被细化，但仍需将局部名称应用到其定义时的作用域。这比较繁琐，通过 ``RawImp`` 的 ``ICaseLocal`` 构造器处理。"

#: ../source/implementation/overview.rst:445 8a66d5a1ee9a417bb8c18babc4e9d1d3
msgid ""
"Various parts of the system treat case blocks specially, even though they"
" aren't strictly part of the core. In particular, these are linearity "
"checking and totality checking."
msgstr "系统的多个部分会对 case 块做特殊处理，尽管它们并非严格属于核心内容。尤其是线性检查和完备性检查。"

#: ../source/implementation/overview.rst:450 9e9d27ea7a77471bb8456df7bf51aadd
msgid "Parameters"
msgstr "参数（Parameters）"

#: ../source/implementation/overview.rst:452 be745949a74a456e88d1f3769b07c3ad
msgid ""
"The parameters to a data type are taken to be the arguments which appear,"
" unchanged, in the same position, everywhere across a data definition."
msgstr "数据类型的参数被视为在数据定义中各处以相同位置、不变出现的参数。"

#: ../source/implementation/overview.rst:456 938fddd8ef6f4a2cbe983f381f80788c
msgid "Erasure"
msgstr "擦除（Erasure）"

#: ../source/implementation/overview.rst:458 b25f01b33d9646a68f79067f819ed80f
msgid ""
"Unbound implicits are given ``0`` multiplicity, so the rule is now that "
"if you don't explicitly write it in the type of a function or "
"constructor, the argument is erased at run time."
msgstr "未绑定隐式参数的多重性为 0，因此现在的规则是：如果你没有在函数或构造器类型中显式写出参数，该参数将在运行时被擦除。"

#: ../source/implementation/overview.rst:462 cc2883f7f32643d3828322446d1e3d55
msgid ""
"Elaboration and the case tree compiler check ensure that 0-multiplicity "
"arguments are not inspected in case trees. In the compiler, "
"0-multiplicity arguments to constructors are erased completely, whereas "
"0-multiplicity arguments to functions are replaced with a placeholder "
"erased value."
msgstr "细化和 case 树编译器检查确保 case 树中不会检查多重性为 0 的参数。编译器会完全擦除构造器的 0-多重性参数，而函数的 0-多重性参数会被替换为占位的擦除值。"

#: ../source/implementation/overview.rst:468 13a8735fcd224a879d77af366c7a76fb
msgid "Namespaces and name visibility"
msgstr "命名空间与名称可见性（Namespaces and name visibility）"

#: ../source/implementation/overview.rst:470 94f8994bd28948f3b1785bf9e425c59d
msgid ""
"Same rules mostly apply as in Idris 1. The difference is that visibility "
"is *per namespace* not *per file* (that is, files have no relevance other"
" except in that they introduce their own namespace, and in that they "
"allow separate typechecking)."
msgstr "规则基本与 Idris 1 相同。不同之处在于可见性是*按命名空间*而非*按文件*（即文件本身无关紧要，除了引入自己的命名空间和允许单独类型检查）。"

#: ../source/implementation/overview.rst:475 8ca732956a854f10bd378dbce204a09c
msgid ""
"One effect of this is that when a file defines nested namespaces, the "
"inner namespace can see what's in the outer namespace, but not vice versa"
" unless names defined in the inner namespace are explicitly exported. The"
" visibility modifiers ``export``, ``public export``, and ``private`` "
"control whether the name can be seen in any other namespace, and it's "
"nothing to do with the file they're defined in at all."
msgstr "这样做的一个结果是：当文件定义嵌套命名空间时，内层命名空间可以访问外层命名空间的内容，反之则不行，除非内层命名空间中定义的名称被显式导出。可见性修饰符 ``export``、``public export`` 和 ``private`` 控制名称是否能被其他命名空间访问，与其定义所在文件无关。"

#: ../source/implementation/overview.rst:482 202cc3ef6429449283bc9f4b8148ec45
msgid ""
"Unlike Idris 1, there is no restriction on whether public definitions can"
" refer to private names. The only restriction on ``private`` names is "
"that they can't be referred to directly (i.e. in code) outside the "
"namespace."
msgstr "与 Idris 1 不同，公共定义是否引用私有名称没有限制。唯一的限制是 ``private`` 名称不能在命名空间外被直接引用（即不能在代码中引用）。"

#: ../source/implementation/overview.rst:487 3cfa7cfd0da74b2bb2f218c42572fb0e
msgid "Records"
msgstr "记录（Records）"

#: ../source/implementation/overview.rst:489 2c5fe0a632f244bba993a3b957457654
msgid ""
"Records are part of TTImp (rather than the surface language). Elaborating"
" a record declaration creates a data type and associated projection "
"functions. Record setters are generated on demand while elaborating TTImp"
" (in ``TTImp.Elab.Record``). Setters are translated directly to ``case`` "
"blocks, which means that update of dependent fields works as one might "
"expect (i.e. it's safe as long as all of the fields are updated at the "
"same time consistently)."
msgstr "记录属于 TTImp（而非表层语言）。细化 record 声明会创建一个数据类型及其相关投影函数。record 的 setter 在细化 TTImp 时按需生成（在 ``TTImp.Elab.Record`` 中）。setter 会直接转为 ``case`` 块，这意味着依赖字段的更新会如预期那样工作（即只要所有字段同时一致地更新就是安全的）。"
