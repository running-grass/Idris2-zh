# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/theorems.rst:5
#: c27f50d3fefa493597726a862f91596b
msgid "Theorem Proving"
msgstr ""

#: ../source/tutorial/theorems.rst:8
#: 8d2fdbbbd5dc41ee89700583cf899cd9
msgid "Equality"
msgstr ""

#: ../source/tutorial/theorems.rst:10
#: db4abb45af244e50b03b6b126a8d7fd6
msgid "Idris allows propositional equalities to be declared, allowing theorems about programs to be stated and proved. An equality type is defined as follows in the Prelude:"
msgstr ""

#: ../source/tutorial/theorems.rst:19
#: 674dfdf6d564434ea4d24f3f0011f564
msgid "As a notational convenience, ``Equal x y`` can be written as ``x = y``. Equalities can be proposed between any values of any types, but the only way to construct a proof of equality is if values actually are equal. For example:"
msgstr ""

#: ../source/tutorial/theorems.rst:32
#: 7fee000dd7f6454e8ae4d20fbd4d1e2d
msgid "If we try..."
msgstr ""

#: ../source/tutorial/theorems.rst:39
#: da409befeaf84c89b84cea4d67a88974
msgid "...then we'll get an error:"
msgstr ""

#: ../source/tutorial/theorems.rst:53
#: 9a89ede7aaae469b9cece07581dcc9d9
msgid "The Empty Type"
msgstr ""

#: ../source/tutorial/theorems.rst:55
#: 825131a086e24340b4b604e23df45552
msgid "There is an empty type, ``Void``, which has no constructors. It is therefore impossible to construct a canonical element of the empty type. We can therefore use the empty type to prove that something is impossible, for example zero is never equal to a successor:"
msgstr ""

#: ../source/tutorial/theorems.rst:69
#: 31a2cdabbcd746f3b4225c2b45cc0724
msgid "Don't worry if you don't get all the details of how this works just yet - essentially, it applies the library function ``replace``, which uses an equality proof to transform a predicate. Here we use it to transform a value of a type which can exist, the empty tuple, to a value of a type which can’t, by using a proof of something which can’t exist."
msgstr ""

#: ../source/tutorial/theorems.rst:75
#: 34c45383e4fa43e0aff6f14a98e64f1c
msgid "Once we have an element of the empty type, we can prove anything. ``void`` is defined in the library, to assist with proofs by contradiction."
msgstr ""

#: ../source/tutorial/theorems.rst:84
#: 4a12ee58fbc64167b4e4775a2d5b69b9
msgid "Proving Theorems"
msgstr ""

#: ../source/tutorial/theorems.rst:86
#: 778372e46a304da5a0763d1cd5dbd73d
msgid "When type checking dependent types, the type itself gets *normalised*. So imagine we want to prove the following theorem about the reduction behaviour of ``plus``:"
msgstr ""

#: ../source/tutorial/theorems.rst:94
#: 74e552be79294836bca6e6eeb7b94386
msgid "We’ve written down the statement of the theorem as a type, in just the same way as we would write the type of a program. In fact there is no real distinction between proofs and programs. A proof, as far as we are concerned here, is merely a program with a precise enough type to guarantee a particular property of interest."
msgstr ""

#: ../source/tutorial/theorems.rst:100
#: 54df0269e05940a3ad7f46688098ee8c
msgid "We won’t go into details here, but the Curry-Howard correspondence [#Timothy]_ explains this relationship. The proof itself is immediate, because ``plus Z n`` normalises to ``n`` by the definition of ``plus``:"
msgstr ""

#: ../source/tutorial/theorems.rst:108
#: 83615e1117bc4d3cbcc6e57dcf3ebaaf
msgid "It is slightly harder if we try the arguments the other way, because plus is defined by recursion on its first argument. The proof also works by recursion on the first argument to ``plus``, namely ``n``."
msgstr ""

#: ../source/tutorial/theorems.rst:118
#: 4f16a5a637f446ab9466e88ad2faf894
msgid "``cong`` is a function defined in the library which states that equality respects function application:"
msgstr ""

#: ../source/tutorial/theorems.rst:125
#: 61cb7fd22a6240f8832b9635c7d5f132
msgid "To see more detail on what's going on, we can replace the recursive call to ``plusReducesZ`` with a hole:"
msgstr ""

#: ../source/tutorial/theorems.rst:132
#: 5a0225d5041943b5b8c3f4df33b07696
msgid "Then inspecting the type of the hole at the REPL shows us:"
msgstr ""

#: ../source/tutorial/theorems.rst:141
#: ec884eddae4c40f9b88cbff9e1172f44
msgid "We can do the same for the reduction behaviour of plus on successors:"
msgstr ""

#: ../source/tutorial/theorems.rst:149
#: 22d6a9e2c93b4f7998ee64a0844dfe61
msgid "Even for small theorems like these, the proofs are a little tricky to construct in one go. When things get even slightly more complicated, it becomes too much to think about to construct proofs in this “batch mode”."
msgstr ""

#: ../source/tutorial/theorems.rst:154
#: 8799ee63f420478389237b4fcb810607
msgid "Idris provides interactive editing capabilities, which can help with building proofs. For more details on building proofs interactively in an editor, see :ref:`proofs-index`."
msgstr ""

#: ../source/tutorial/theorems.rst:161
#: 8483f2ec435b40308a5608c91142bc23
msgid "Theorems in Practice"
msgstr ""

#: ../source/tutorial/theorems.rst:163
#: 52582ad8630648bcb9ce8cb54b2b94db
msgid "The need to prove theorems can arise naturally in practice. For example, previously (:ref:`sec-views`) we implemented ``natToBin`` using a function ``parity``:"
msgstr ""

#: ../source/tutorial/theorems.rst:171
#: 4bd635ad7bc14b6491c3064877691e2a
msgid "We provided a definition for ``parity``, but without explanation.  We might have hoped that it would look something like the following:"
msgstr ""

#: ../source/tutorial/theorems.rst:183
#: be2f15952988491c9d6d381c7e6f2b85
msgid "Unfortunately, this fails with a type error:"
msgstr ""

#: ../source/tutorial/theorems.rst:193
#: 2596a91067ea48dc82bd562353d40587
msgid "The problem is that normalising ``S j + S j``, in the type of ``Even`` doesn't result in what we need for the type of the right hand side of ``Parity``. We know that ``S (S (plus j j))`` is going to be equal to ``S j + S j``, but we need to explain it to Idris with a proof. We can begin by adding some *holes* (see :ref:`sect-holes`) to the definition:"
msgstr ""

#: ../source/tutorial/theorems.rst:210
#: e18ecdf441484203a6342f5800a931f1
msgid "Checking the type of ``helpEven`` shows us what we need to prove for the ``Even`` case:"
msgstr ""

#: ../source/tutorial/theorems.rst:220
#: 98f70fc5d7e440318458acb7a4f99300
msgid "We can therefore write a helper function to *rewrite* the type to the form we need:"
msgstr ""

#: ../source/tutorial/theorems.rst:228
#: fb211f726b3b4121aa9f1ed88a9f960f
msgid "The ``rewrite ... in`` syntax allows you to change the required type of an expression by rewriting it according to an equality proof. Here, we have used ``plusSuccRightSucc``, which has the following type:"
msgstr ""

#: ../source/tutorial/theorems.rst:236
#: f73d39bd25844d16a2d9b413996ff77f
msgid "We can see the effect of ``rewrite`` by replacing the right hand side of ``helpEven`` with a hole, and working step by step. Beginning with the following:"
msgstr ""

#: ../source/tutorial/theorems.rst:244
#: d6fa8c219eff41f7983b8bd6ee9a5a63
msgid "We can look at the type of ``helpEven_rhs``:"
msgstr ""

#: ../source/tutorial/theorems.rst:253
#: 0147b815e49144b4821f164726d60935
msgid "Then we can ``rewrite`` by applying ``plusSuccRightSucc j j``, which gives an equation ``S (j + j) = j + S j``, thus replacing ``S (j + j)`` (or, in this case, ``S (plus j j)`` since ``S (j + j)`` reduces to that) in the type with ``j + S j``:"
msgstr ""

#: ../source/tutorial/theorems.rst:263
#: 557c79be6df3491daf1b56d1891552a7
msgid "Checking the type of ``helpEven_rhs`` now shows what has happened, including the type of the equation we just used (as the type of ``_rewrite_rule``):"
msgstr ""

#: ../source/tutorial/theorems.rst:274
#: 0707a84d5f96468d9649257d44934ef8
msgid "Using ``rewrite`` and another helper for the ``Odd`` case, we can complete ``parity`` as follows:"
msgstr ""

#: ../source/tutorial/theorems.rst:292
#: cd379c0343294670a97076633b863cf3
msgid "Full details of ``rewrite`` are beyond the scope of this introductory tutorial, but it is covered in the theorem proving tutorial (see :ref:`proofs-index`)."
msgstr ""

#: ../source/tutorial/theorems.rst:298
#: cbd689c7222b4a45b3cac365d179ed4c
msgid "Totality Checking"
msgstr ""

#: ../source/tutorial/theorems.rst:300
#: 31a07e51230c4d8ba4dfa595172bef81
msgid "If we really want to trust our proofs, it is important that they are defined by *total* functions — that is, a function which is defined for all possible inputs and is guaranteed to terminate. Otherwise we could construct an element of the empty type, from which we could prove anything:"
msgstr ""

#: ../source/tutorial/theorems.rst:318
#: 2a83cf058ee4437490aabf8dfb22f010
msgid "Internally, Idris checks every definition for totality, and we can check at the prompt with the ``:total`` command. We see that neither of the above definitions is total:"
msgstr ""

#: ../source/tutorial/theorems.rst:329
#: fdeca35a5bf746398336eed04c3844a7
msgid "Note the use of the word “possibly” — a totality check can never be certain due to the undecidability of the halting problem. The check is, therefore, conservative. It is also possible (and indeed advisable, in the case of proofs) to mark functions as total so that it will be a compile time error for the totality check to fail:"
msgstr ""

#: ../source/tutorial/theorems.rst:340
#: a05d85ef03844e2781bec5e8966950fb
msgid "Reassuringly, our proof in Section :ref:`sect-empty` that the zero and successor constructors are disjoint is total:"
msgstr ""

#: ../source/tutorial/theorems.rst:348
#: aad0f8bd36d6492488a4292c496d1d76
msgid "The totality check is, necessarily, conservative. To be recorded as total, a function ``f`` must:"
msgstr ""

#: ../source/tutorial/theorems.rst:351
#: c69bf51151634cbbbe47a0d205905ceb
msgid "Cover all possible inputs"
msgstr ""

#: ../source/tutorial/theorems.rst:353
#: d72f80fc21584698bb9c664611621d3f
msgid "Be *well-founded* — i.e. by the time a sequence of (possibly mutually) recursive calls reaches ``f`` again, it must be possible to show that one of its arguments has decreased."
msgstr ""

#: ../source/tutorial/theorems.rst:357
#: 159c6dbf3de94e75be37c0d670a26e44
msgid "Not use any data types which are not *strictly positive*"
msgstr ""

#: ../source/tutorial/theorems.rst:359
#: a471671e753144f1b1c201d6b3ffb0af
msgid "Not call any non-total functions"
msgstr ""

#: ../source/tutorial/theorems.rst:362
#: 1b1604d0ac6a4f229abca47a00d659bd
msgid "Directives and Compiler Flags for Totality"
msgstr ""

#: ../source/tutorial/theorems.rst:366
#: dacd144de5f242098d4ec03cf3022020
msgid "Not all of this is implemented yet for Idris 2"
msgstr ""

#: ../source/tutorial/theorems.rst:368
#: 9bc291f407f94c198075b5f45f66ff2e
msgid "By default, Idris allows all well-typed definitions, whether total or not. However, it is desirable for functions to be total as far as possible, as this provides a guarantee that they provide a result for all possible inputs, in finite time. It is possible to make total functions a requirement, either:"
msgstr ""

#: ../source/tutorial/theorems.rst:373
#: 982f5cf7f0df46a48aeddc924a0a570e
msgid "By using the ``--total`` compiler flag."
msgstr ""

#: ../source/tutorial/theorems.rst:375
#: 405549d19c2d4ae99725755f8d0a273e
msgid "By adding a ``%default total`` directive to a source file. All definitions after this will be required to be total, unless explicitly flagged as ``partial``."
msgstr ""

#: ../source/tutorial/theorems.rst:379
#: abe3c195cf294dd4ac4e0eab8722b4ce
msgid "All functions *after* a ``%default total`` declaration are required to be total. Correspondingly, after a ``%default partial`` declaration, the requirement is relaxed."
msgstr ""

#: ../source/tutorial/theorems.rst:383
#: 7f8f41352ce84fd68af260030228774c
msgid "Finally, the compiler flag ``--warnpartial`` causes to print a warning for any undeclared partial function."
msgstr ""

#: ../source/tutorial/theorems.rst:387
#: 8b56c844ffab4e3e9d1e008441b53d43
msgid "Totality checking issues"
msgstr ""

#: ../source/tutorial/theorems.rst:389
#: df5c85a48e724dc4b868924d678e68ed
msgid "Please note that the totality checker is not perfect! Firstly, it is necessarily conservative due to the undecidability of the halting problem, so many programs which *are* total will not be detected as such. Secondly, the current implementation has had limited effort put into it so far, so there may still be cases where it believes a function is total which is not. Do not rely on it for your proofs yet!"
msgstr ""

#: ../source/tutorial/theorems.rst:397
#: 09ee478456e244e4a181211d1d0be98d
msgid "Hints for totality"
msgstr ""

#: ../source/tutorial/theorems.rst:399
#: 7a9acb9759e943da8752e0fb76c0a49f
msgid "In cases where you believe a program is total, but Idris does not agree, it is possible to give hints to the checker to give more detail for a termination argument. The checker works by ensuring that all chains of recursive calls eventually lead to one of the arguments decreasing towards a base case, but sometimes this is hard to spot. For example, the following definition cannot be checked as ``total`` because the checker cannot decide that ``filter (< x) xs`` will always be smaller than ``(x :: xs)``:"
msgstr ""

#: ../source/tutorial/theorems.rst:415
#: 44e69a056dac4d7f912c1f98cacd93b0
msgid "The function ``assert_smaller``, defined in the prelude, is intended to address this problem:"
msgstr ""

#: ../source/tutorial/theorems.rst:423
#: 3f25bc5ce9e746fdb598cedf2ed8e724
msgid "It simply evaluates to its second argument, but also asserts to the totality checker that ``y`` is structurally smaller than ``x``. This can be used to explain the reasoning for totality if the checker cannot work it out itself. The above example can now be written as:"
msgstr ""

#: ../source/tutorial/theorems.rst:437
#: cab45cc027d740a79aa4d75fe31c3134
msgid "The expression ``assert_smaller (x :: xs) (filter (<= x) xs)`` asserts that the result of the filter will always be smaller than the pattern ``(x :: xs)``."
msgstr ""

#: ../source/tutorial/theorems.rst:441
#: b95160cc7bc449469600cd4b014777d9
msgid "In more extreme cases, the function ``assert_total`` marks a subexpression as always being total:"
msgstr ""

#: ../source/tutorial/theorems.rst:449
#: aa0a4a7371d44ed38c4122ae58df5767
msgid "In general, this function should be avoided, but it can be very useful when reasoning about primitives or externally defined functions (for example from a C library) where totality can be shown by an external argument."
msgstr ""

#: ../source/tutorial/theorems.rst:455
#: 2a856321375e413faadd14056278a463
msgid "Timothy G. Griffin. 1989. A formulae-as-type notion of control. In Proceedings of the 17th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL '90). ACM, New York, NY, USA, 47-58. DOI=10.1145/96709.96714 https://doi.acm.org/10.1145/96709.96714"
msgstr ""
