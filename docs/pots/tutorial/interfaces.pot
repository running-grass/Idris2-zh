# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/interfaces.rst:5
#: 664c83029c124e4e96ccff1f0f547a30
msgid "Interfaces"
msgstr ""

#: ../source/tutorial/interfaces.rst:7
#: 4dd9c258833c49f0a8ecb7229c58f173
msgid "We often want to define functions which work across several different data types. For example, we would like arithmetic operators to work on ``Int``, ``Integer`` and ``Double`` at the very least. We would like ``==`` to work on the majority of data types. We would like to be able to display different types in a uniform way."
msgstr ""

#: ../source/tutorial/interfaces.rst:13
#: a70559f569174047a289f4585f49318c
msgid "To achieve this, we use *interfaces*, which are similar to type classes in Haskell or traits in Rust. To define an interface, we provide a collection of overloadable functions. A simple example is the ``Show`` interface, which is defined in the prelude and provides an interface for converting values to ``String``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:24
#: 67c513d0b3ba46f9aba0b38eab1db303
msgid "This generates a function of the following type (which we call a *method* of the ``Show`` interface):"
msgstr ""

#: ../source/tutorial/interfaces.rst:31
#: f6dd1831805546acaa2daed578a44ebc
msgid "We can read this as: “under the constraint that ``a`` has an implementation of ``Show``, take an input ``a`` and return a ``String``.” An implementation of an interface is defined by giving definitions of the methods of the interface. For example, the ``Show`` implementation for ``Nat`` could be defined as:"
msgstr ""

#: ../source/tutorial/interfaces.rst:47
#: d196d1a3b68f40549963bd404525a2b1
msgid "Only one implementation of an interface can be given for a type — implementations may not overlap. Implementation declarations can themselves have constraints. To help with resolution, the arguments of an implementation must be constructors (either data or type constructors) or variables (i.e. you cannot give an implementation for a function). For example, to define a ``Show`` implementation for vectors, we need to know that there is a ``Show`` implementation for the element type, because we are going to use it to convert each element to a ``String``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:65
#: 6a37a133d61444ee96c72e007c22a126
msgid "Note that we need the explicit ``forall n .`` in the ``show'`` function because otherwise the ``n`` is already in scope, and fixed to the value of the top level ``n``."
msgstr ""

#: ../source/tutorial/interfaces.rst:70
#: d58cfe9509ce4d55b05fe7f64a54c276
msgid "Default Definitions"
msgstr ""

#: ../source/tutorial/interfaces.rst:72
#: 50d8f5a4b1384a62b38c251391ab87a1
msgid "The Prelude defines an ``Eq`` interface which provides methods for comparing values for equality or inequality, with implementations for all of the built-in types:"
msgstr ""

#: ../source/tutorial/interfaces.rst:82
#: ff9d629040704b138b88bc6933e75a50
msgid "To declare an implementation for a type, we have to give definitions of all of the methods. For example, for an implementation of ``Eq`` for ``Nat``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:95
#: 11816c291af74f2d90c9da975ae67e01
msgid "It is hard to imagine many cases where the ``/=`` method will be anything other than the negation of the result of applying the ``==`` method. It is therefore convenient to give a default definition for each method in the interface declaration, in terms of the other method:"
msgstr ""

#: ../source/tutorial/interfaces.rst:109
#: 2bfab47569e6460094d8bb08d1ada7b7
msgid "A minimal complete implementation of ``Eq`` requires either ``==`` or ``/=`` to be defined, but does not require both. If a method definition is missing, and there is a default definition for it, then the default is used instead."
msgstr ""

#: ../source/tutorial/interfaces.rst:115
#: 99be351f8c7a4b689270b51f557030d0
msgid "Extending Interfaces"
msgstr ""

#: ../source/tutorial/interfaces.rst:117
#: d67dde2f7df940dba8afe6726c75585b
msgid "Interfaces can also be extended. A logical next step from an equality relation ``Eq`` is to define an ordering relation ``Ord``. We can define an ``Ord`` interface which inherits methods from ``Eq`` as well as defining some of its own:"
msgstr ""

#: ../source/tutorial/interfaces.rst:138
#: 2d89b7a8989744d5afbd651205fda53c
msgid "The ``Ord`` interface allows us to compare two values and determine their ordering. Only the ``compare`` method is required; every other method has a default definition. Using this we can write functions such as ``sort``, a function which sorts a list into increasing order, provided that the element type of the list is in the ``Ord`` interface. We give the constraints on the type variables left of the fat arrow ``=>``, and the function type to the right of the fat arrow:"
msgstr ""

#: ../source/tutorial/interfaces.rst:150
#: 7f5dd5817dec404cac342b9eb2137d12
msgid "Functions, interfaces and implementations can have multiple constraints. Multiple constraints are written in brackets in a comma separated list, for example:"
msgstr ""

#: ../source/tutorial/interfaces.rst:159
#: adb2e711fecb42c3a86715c987c744a6
msgid "Constraints are, like types, first class objects in the language. You can see this at the REPL:"
msgstr ""

#: ../source/tutorial/interfaces.rst:167
#: 5f0e9f4f09be4d56a23d44b9fc29750f
msgid "So, ``(Ord a, Show a)`` is an ordinary pair of ``Types``, with two constraints as the first and second element of the pair."
msgstr ""

#: ../source/tutorial/interfaces.rst:171
#: 662668ea954f4065a04f2e2a553836b5
msgid "Note: Interfaces and ``mutual`` blocks"
msgstr ""

#: ../source/tutorial/interfaces.rst:173
#: 2a01e616aaba4fcbb3654a05da77fd25
msgid "Idris is strictly \"define before use\", except in ``mutual`` blocks. In a ``mutual`` block, Idris elaborates in two passes: types on the first pass and definitions on the second. When the mutual block contains an interface declaration, it elaborates the interface header but none of the method types on the first pass, and elaborates the method types and any default definitions on the second pass."
msgstr ""

#: ../source/tutorial/interfaces.rst:181
#: 916cf8470a4646bbaae12b9210b27ea2
msgid "Quantities for Parameters"
msgstr ""

#: ../source/tutorial/interfaces.rst:183
#: 888d4248f7c04efa91a66f8fd978bbda
msgid "By default parameters that are not explicitly ascribed a type in an ``interface`` declaration are assigned the quantity ``0``. This means that the parameter is not available to use at runtime in the methods' definitions."
msgstr ""

#: ../source/tutorial/interfaces.rst:187
#: 4014df4f130a41c1a09795fe0a414715
msgid "For instance, ``Show a`` gives rise to a ``0``-quantified type variable ``a`` in the type of the ``show`` method:"
msgstr ""

#: ../source/tutorial/interfaces.rst:196
#: 765b7127a5dc4074a8799100b15814ca
msgid "However some use cases require that some of the parameters are available at runtime. We may for instance want to declare an interface for ``Storable`` types. The constraint ``Storable a size`` means that we can store values of type ``a`` in a ``Buffer`` in exactly ``size`` bytes."
msgstr ""

#: ../source/tutorial/interfaces.rst:201
#: 874e43179d9c4768a6423b3c0d4c0fd9
msgid "If the user provides a method to read a value for such a type ``a`` at a given offset, then we can read the ``k`` th element stored in the buffer by computing the appropriate offset from ``k`` and ``size``. This is demonstrated by providing a default implementation for the method ``peekElementOff`` implemented in terms of ``peekByteOff`` and the parameter ``size``."
msgstr ""

#: ../source/tutorial/interfaces.rst:219
#: 9af914a3b21c4761bd2da18dc1aa7473
msgid "Note that ``a`` is explicitly marked as runtime irrelevant so that it is erased by the compiler. Equivalently we could have written ``interface Storable a (size : Nat)``. The meaning of ``| a`` is explained in :ref:`DeterminingParameters`."
msgstr ""

#: ../source/tutorial/interfaces.rst:225
#: 5a3160897016403cbb8fb95b45f682e6
msgid "Functors and Applicatives"
msgstr ""

#: ../source/tutorial/interfaces.rst:227
#: effea8c4042341418bc5c92624ce1c5f
msgid "So far, we have seen single parameter interfaces, where the parameter is of type ``Type``. In general, there can be any number of parameters (even zero), and the parameters can have *any* type. If the type of the parameter is not ``Type``, we need to give an explicit type declaration. For example, the ``Functor`` interface is defined in the prelude:"
msgstr ""

#: ../source/tutorial/interfaces.rst:240
#: 16fdf32423ba4bafb0dc5c8790dbb432
msgid "A functor allows a function to be applied across a structure, for example to apply a function to every element in a ``List``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:254
#: ded5c9d16f244084a8f7e3d52fabd33a
msgid "Having defined ``Functor``, we can define ``Applicative`` which abstracts the notion of function application:"
msgstr ""

#: ../source/tutorial/interfaces.rst:268
#: 07b544e26f7c401d8f85f8f02bc06783
msgid "Monads and ``do``-notation"
msgstr ""

#: ../source/tutorial/interfaces.rst:270
#: c230f889f5544cc38f9f7dc836cd9a10
msgid "The ``Monad`` interface allows us to encapsulate binding and computation, and is the basis of ``do``-notation introduced in Section :ref:`sect-do`. It extends ``Applicative`` as defined above, and is defined as follows:"
msgstr ""

#: ../source/tutorial/interfaces.rst:280
#: 1aa3a34f22cd4103b330afd9bf0ed270
msgid "There is also a non-binding sequencing operator, defined for ``Monad`` as:"
msgstr ""

#: ../source/tutorial/interfaces.rst:286
#: e738a8cf3e464305ad82cc91d969fa31
msgid "Inside a ``do`` block, the following syntactic transformations are applied:"
msgstr ""

#: ../source/tutorial/interfaces.rst:289
#: 9d79ff50df684968b702df2748ef590f
msgid "``x <- v; e`` becomes ``v >>= (\\x => e)``"
msgstr ""

#: ../source/tutorial/interfaces.rst:291
#: 1c70f70a702e40a6b1310bf9dfe9d86e
msgid "``v; e`` becomes ``v >> e``"
msgstr ""

#: ../source/tutorial/interfaces.rst:293
#: 6118f03b9bf94dfe99bc5c3bf9f7da41
msgid "``let x = v; e`` becomes ``let x = v in e``"
msgstr ""

#: ../source/tutorial/interfaces.rst:295
#: 5b455ed224e24939b6232ed39358bd01
msgid "``IO`` has an implementation of ``Monad``, defined using primitive functions. We can also define an implementation for ``Maybe``, as follows:"
msgstr ""

#: ../source/tutorial/interfaces.rst:304
#: 2145abf8d2fd47e288724435d8b74462
msgid "Using this we can, for example, define a function which adds two ``Maybe Int``, using the monad to encapsulate the error handling:"
msgstr ""

#: ../source/tutorial/interfaces.rst:314
#: d44fb877e03b477997d1b39cc39ab1b5
msgid "This function will extract the values from ``x`` and ``y``, if they are both available, or return ``Nothing`` if one or both are not (\"fail fast\"). Managing the ``Nothing`` cases is achieved by the ``>>=`` operator, hidden by the ``do`` notation."
msgstr ""

#: ../source/tutorial/interfaces.rst:326
#: 7fb6cdf085f144d9b14210f4729e13ea
msgid "The translation of ``do`` notation is entirely syntactic, so there is no need for the ``(>>=)`` and ``(>>)`` operators to be the operator defined in the ``Monad`` interface. Idris will, in general, try to disambiguate which operators you mean by type, but you can explicitly choose with qualified do notation, for example:"
msgstr ""

#: ../source/tutorial/interfaces.rst:340
#: 982c295482e4411f8647c8ade1d1dc10
msgid "The ``Prelude.do`` means that Idris will use the ``(>>=)`` and ``(>>)`` operators defined in the ``Prelude``."
msgstr ""

#: ../source/tutorial/interfaces.rst:344
#: dac8f00167054470afb3ed2b7eebc2c6
msgid "Pattern Matching Bind"
msgstr ""

#: ../source/tutorial/interfaces.rst:346
#: 2e1a07bd4caf4da797d77502f883ed7e
msgid "Sometimes we want to pattern match immediately on the result of a function in ``do`` notation. For example, let's say we have a function ``readNumber`` which reads a number from the console, returning a value of the form ``Just x`` if the number is valid, or ``Nothing`` otherwise:"
msgstr ""

#: ../source/tutorial/interfaces.rst:362
#: 35511588674b42d59a62cc53df12cbd5
msgid "If we then use it to write a function to read two numbers, returning ``Nothing`` if neither are valid, then we would like to pattern match on the result of ``readNumber``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:378
#: 3932a307dd7d41d098f1085b7805a840
msgid "If there's a lot of error handling, this could get deeply nested very quickly! So instead, we can combine the bind and the pattern match in one line. For example, we could try pattern matching on values of the form ``Just x_ok``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:390
#: 9054d63c08824fbf90ec2cf10946a336
msgid "There is still a problem, however, because we've now omitted the case for ``Nothing`` so ``readNumbers`` is no longer total! We can add the ``Nothing`` case back as follows:"
msgstr ""

#: ../source/tutorial/interfaces.rst:404
#: 6d3510bad0ba4788854504ce6178e71d
msgid "The effect of this version of ``readNumbers`` is identical to the first (in fact, it is syntactic sugar for it and directly translated back into that form). The first part of each statement (``Just x_ok <-`` and ``Just y_ok <-``) gives the preferred binding - if this matches, execution will continue with the rest of the ``do`` block. The second part gives the alternative bindings, of which there may be more than one."
msgstr ""

#: ../source/tutorial/interfaces.rst:412
#: 3d3f1a6e536947e295d0891d973e127c
msgid "``!``-notation"
msgstr ""

#: ../source/tutorial/interfaces.rst:414
#: b96dd881c27c4f85ada74ece5b6e01dc
msgid "In many cases, using ``do``-notation can make programs unnecessarily verbose, particularly in cases such as ``m_add`` above where the value bound is used once, immediately. In these cases, we can use a shorthand version, as follows:"
msgstr ""

#: ../source/tutorial/interfaces.rst:424
#: b59f7187dc694e2e8a45c1701b2c0b3d
msgid "The notation ``!expr`` means that the expression ``expr`` should be evaluated and then implicitly bound. Conceptually, we can think of ``!`` as being a prefix function with the following type:"
msgstr ""

#: ../source/tutorial/interfaces.rst:432
#: d962ee1a958847978b5bb3aba849931d
msgid "Note, however, that it is not really a function, merely syntax! In practice, a subexpression ``!expr`` will lift ``expr`` as high as possible within its current scope, bind it to a fresh name ``x``, and replace ``!expr`` with ``x``. Expressions are lifted depth first, left to right. In practice, ``!``-notation allows us to program in a more direct style, while still giving a notational clue as to which expressions are monadic."
msgstr ""

#: ../source/tutorial/interfaces.rst:440
#: e6bea91540eb43e6ac8c530bd8a1f15e
msgid "For example, the expression:"
msgstr ""

#: ../source/tutorial/interfaces.rst:446
#: e78f2c24e94d4e1ba412ddd9a1f523b4
msgid "is lifted to:"
msgstr ""

#: ../source/tutorial/interfaces.rst:456
#: 1ad70d6f1cae48cdb9ece6fab0da13ef
msgid "Monad comprehensions"
msgstr ""

#: ../source/tutorial/interfaces.rst:458
#: ee7d5387b8b040978c15fd39987366ab
msgid "The list comprehension notation we saw in Section :ref:`sect-more-expr` is more general, and applies to anything which has an implementation of both ``Monad`` and ``Alternative``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:468
#: 21082faa714842a9b835eda82521d7f2
msgid "In general, a comprehension takes the form ``[ exp | qual1, qual2, …, qualn ]`` where ``quali`` can be one of:"
msgstr ""

#: ../source/tutorial/interfaces.rst:471
#: 8eef644cd1c8422a8becfff6073a752b
msgid "A generator ``x <- e``"
msgstr ""

#: ../source/tutorial/interfaces.rst:473
#: f95d023b4e9e4d13b936ca0c370816a7
msgid "A *guard*, which is an expression of type ``Bool``"
msgstr ""

#: ../source/tutorial/interfaces.rst:475
#: fc90c036c2d647d5828f5307ada4905e
msgid "A let binding ``let x = e``"
msgstr ""

#: ../source/tutorial/interfaces.rst:477
#: 660897239e9e453198f53801ff740217
msgid "To translate a comprehension ``[exp | qual1, qual2, …, qualn]``, first any qualifier ``qual`` which is a *guard* is translated to ``guard qual``, using the following function:"
msgstr ""

#: ../source/tutorial/interfaces.rst:485
#: 84983354636944c78ae9f87723aa8059
msgid "Then the comprehension is converted to ``do`` notation:"
msgstr ""

#: ../source/tutorial/interfaces.rst:491
#: 1a17ad769dde413fa2ca9cb0e9667971
msgid "Using monad comprehensions, an alternative definition for ``m_add`` would be:"
msgstr ""

#: ../source/tutorial/interfaces.rst:500
#: 3c744ab94c094935b4c10a00edcdc8f6
msgid "Interfaces and IO"
msgstr ""

#: ../source/tutorial/interfaces.rst:502
#: 88d9a44a1a3e481daa02a5eb8d32c805
msgid "In general, ``IO`` operations in the libraries aren't written using ``IO`` directly, but rather via the ``HasIO`` interface:"
msgstr ""

#: ../source/tutorial/interfaces.rst:510
#: 00ec5ba0adf74039b3ebd432b6003231
msgid "``HasIO`` explains, via ``liftIO``, how to convert a primitive ``IO`` operation to an operation in some underlying type, as long as that type has a ``Monad`` implementation.  These interface allows a programmer to define some more expressive notion of interactive program, while still giving direct access to ``IO`` primitives."
msgstr ""

#: ../source/tutorial/interfaces.rst:517
#: 0caada94162149e883057f3f2170441d
msgid "Idiom brackets"
msgstr ""

#: ../source/tutorial/interfaces.rst:519
#: 2b832ae5ddce4d52a962dca6250ffe0e
msgid "While ``do`` notation gives an alternative meaning to sequencing, idioms give an alternative meaning to *application*. The notation and larger example in this section is inspired by Conor McBride and Ross Paterson’s paper “Applicative Programming with Effects” [#ConorRoss]_."
msgstr ""

#: ../source/tutorial/interfaces.rst:524
#: a97dc44b50cb48e6be56102baeb00300
msgid "First, let us revisit ``m_add`` above. All it is really doing is applying an operator to two values extracted from ``Maybe Int``. We could abstract out the application:"
msgstr ""

#: ../source/tutorial/interfaces.rst:534
#: 3e750bc1ae884423b8f9e0dc9cebece0
msgid "Using this, we can write an alternative ``m_add`` which uses this alternative notion of function application, with explicit calls to ``m_app``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:543
#: 31886b16859649829e5153f1a491f27c
msgid "Rather than having to insert ``m_app`` everywhere there is an application, we can use idiom brackets to do the job for us. To do this, we can give ``Maybe`` an implementation of ``Applicative`` as follows, where ``<*>`` is defined in the same way as ``m_app`` above (this is defined in the Idris library):"
msgstr ""

#: ../source/tutorial/interfaces.rst:557
#: a2c9806aeb6d4ebb8fbbf9c3a40e7289
msgid "Using ``<*>`` we can use this implementation as follows, where a function application ``[| f a1 … an |]`` is translated into ``pure f <*> a1 <*> … <*> an``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:567
#: 3051630889334f13b7a4b7492a73b2f5
msgid "An error-handling interpreter"
msgstr ""

#: ../source/tutorial/interfaces.rst:569
#: 5332722364774534924f7de3f2176005
msgid "Idiom notation is commonly useful when defining evaluators. McBride and Paterson describe such an evaluator [#ConorRoss]_, for a language similar to the following:"
msgstr ""

#: ../source/tutorial/interfaces.rst:579
#: e33399b23c8a41ed833e7e227a0efe7c
msgid "Evaluation will take place relative to a context mapping variables (represented as ``String``\\s) to ``Int`` values, and can possibly fail. We define a data type ``Eval`` to wrap an evaluator:"
msgstr ""

#: ../source/tutorial/interfaces.rst:588
#: 98c7813acff2453090da2f46a226f9aa
msgid "Wrapping the evaluator in a data type means we will be able to provide implementations of interfaces for it later. We begin by defining a function to retrieve values from the context during evaluation:"
msgstr ""

#: ../source/tutorial/interfaces.rst:602
#: 4a5e62717bd44b5da7ae109858c021b1
msgid "When defining an evaluator for the language, we will be applying functions in the context of an ``Eval``, so it is natural to give ``Eval`` an implementation of ``Applicative``. Before ``Eval`` can have an implementation of ``Applicative`` it is necessary for ``Eval`` to have an implementation of ``Functor``:"
msgstr ""

#: ../source/tutorial/interfaces.rst:621
#: 55079dc79b0849d0b7f1bcb85f9f9f04
msgid "Evaluating an expression can now make use of the idiomatic application to handle errors:"
msgstr ""

#: ../source/tutorial/interfaces.rst:635
#: 16e66644eff94c1297d770541cd14eb6
msgid "For example:"
msgstr ""

#: ../source/tutorial/interfaces.rst:645
#: a0bb8bcfc56d4b50988b57174374942c
msgid "Named Implementations"
msgstr ""

#: ../source/tutorial/interfaces.rst:647
#: 85144ff01eb34bd99602b0f5ed1844ad
msgid "It can be desirable to have multiple implementations of an interface for the same type, for example to provide alternative methods for sorting or printing values. To achieve this, implementations can be *named* as follows:"
msgstr ""

#: ../source/tutorial/interfaces.rst:659
#: f95ce20d1fa64b9bbcbd622303b314bf
msgid "This declares an implementation as normal, but with an explicit name, ``myord``. The syntax ``compare @{myord}`` gives an explicit implementation to ``compare``, otherwise it would use the default implementation for ``Nat``. We can use this, for example, to sort a list of ``Nat`` in reverse. Given the following list:"
msgstr ""

#: ../source/tutorial/interfaces.rst:670
#: 7662a88a2b274c29ada54bcd25feb6ba
msgid "We can sort it using the default ``Ord`` implementation, by using the ``sort`` function available with ``import Data.List``, then we can try with the named implementation ``myord`` as follows, at the Idris prompt:"
msgstr ""

#: ../source/tutorial/interfaces.rst:681
#: c10c46dbbe494e19801d113a9497e805
msgid "Sometimes, we also need access to a named parent implementation. For example, the prelude defines the following ``Semigroup`` interface:"
msgstr ""

#: ../source/tutorial/interfaces.rst:689
#: 454cc704cb474583878efd7f36cc6ca1
msgid "Then it defines ``Monoid``, which extends ``Semigroup`` with a “neutral” value:"
msgstr ""

#: ../source/tutorial/interfaces.rst:697
#: e9cc00cd6cdb4af7b6bb9f7541846266
msgid "We can define two different implementations of ``Semigroup`` and ``Monoid`` for ``Nat``, one based on addition and one on multiplication:"
msgstr ""

#: ../source/tutorial/interfaces.rst:708
#: 2b6aa9772939472cb690ec3b35de0c57
msgid "The neutral value for addition is ``0``, but the neutral value for multiplication is ``1``. It's important, therefore, that when we define implementations of ``Monoid`` that they extend the correct ``Semigroup`` implementation. We can do this with a ``using`` clause in the implementation as follows:"
msgstr ""

#: ../source/tutorial/interfaces.rst:721
#: 7c6fecedb1a64a5fa699366afd1b02c0
msgid "The ``using PlusNatSemi`` clause indicates that ``PlusNatMonoid`` should extend ``PlusNatSemi`` specifically."
msgstr ""

#: ../source/tutorial/interfaces.rst:727
#: e942e4f12be54c598eed05e2115a5d61
msgid "Interface Constructors"
msgstr ""

#: ../source/tutorial/interfaces.rst:729
#: 3322b853304a4948afe9d8356a40f688
msgid "Interfaces, just like records, can be declared with a user-defined constructor."
msgstr ""

#: ../source/tutorial/interfaces.rst:741
#: 12377215744b4abf904af9a029db4ed8
msgid "Then ``MkB : A t => t -> B t``. If we have"
msgstr ""

#: ../source/tutorial/interfaces.rst:751
#: 1f66f0051b9e48db8dfc2cce7887a3fa
msgid "Then we can use the function ``getAB`` even though we didn't implement the interface ``B`` for ``Nat`` by passing an implementation inline"
msgstr ""

#: ../source/tutorial/interfaces.rst:761
#: d6bd7b2b1dc544ecaf898ea43a78258f
msgid "Determining Parameters"
msgstr ""

#: ../source/tutorial/interfaces.rst:763
#: 45fbd895e4184200be3daba188fc8bbb
msgid "When an interface has more than one parameter, it can help resolution if the parameters used to find an implementation are restricted. For example:"
msgstr ""

#: ../source/tutorial/interfaces.rst:772
#: 975fe46b4976427d834b481ebf91b01b
msgid "In this interface, only ``m`` needs to be known to find an implementation of this interface, and ``s`` can then be determined from the implementation. This is declared with the ``| m`` after the interface declaration. We call ``m`` a *determining parameter* of the ``MonadState`` interface, because it is the parameter used to find an implementation. This is similar to the concept of *functional dependencies* `in Haskell <https://wiki.haskell.org/Functional_dependencies>`_."
msgstr ""

#: ../source/tutorial/interfaces.rst:779
#: 7375b49eeac94ae1aba491687957649b
msgid "Conor McBride and Ross Paterson. 2008. Applicative programming with effects. J. Funct. Program. 18, 1 (January 2008), 1-13. DOI=10.1017/S0956796807006326 https://dx.doi.org/10.1017/S0956796807006326"
msgstr ""
