# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/modules.rst:5
#: acb2441d200647a68a0164f85f8f8f84
msgid "Modules and Namespaces"
msgstr ""

#: ../source/tutorial/modules.rst:7
#: 0b8d2f1619c54dfc9c257232b21dca74
msgid "An Idris program consists of a collection of modules. Each module includes an optional ``module`` declaration giving the name of the module, a list of ``import`` statements giving the other modules which are to be imported, and a collection of declarations and definitions of types, interfaces and functions. For example, the listing below gives a module which defines a binary tree type ``BTree`` (in a file ``BTree.idr``):"
msgstr ""

#: ../source/tutorial/modules.rst:39
#: dc86d2841b444dfc844b69eb3f959bdf
msgid "The modifiers ``export`` and ``public export`` say which names are visible from other namespaces. These are explained further below."
msgstr ""

#: ../source/tutorial/modules.rst:42
#: f6eec1d153084496b1e48cc7751e1389
msgid "Then, this gives a main program (in a file ``bmain.idr``) which uses the ``BTree`` module to sort a list:"
msgstr ""

#: ../source/tutorial/modules.rst:55
#: 81d8eebfdc9349a48b419d0e7924cde9
msgid "The same names can be defined in multiple modules: names are *qualified* with the name of the module. The names defined in the ``BTree`` module are, in full:"
msgstr ""

#: ../source/tutorial/modules.rst:58
#: c12b8220e42b4ddc8b8a2f4c3ca08fa8
msgid "``BTree.BTree``"
msgstr ""

#: ../source/tutorial/modules.rst:59
#: bc06b8a3ead842f492f3774d26f1331e
msgid "``BTree.Leaf``"
msgstr ""

#: ../source/tutorial/modules.rst:60
#: 6834d661193a4d908128f388930ee2cd
msgid "``BTree.Node``"
msgstr ""

#: ../source/tutorial/modules.rst:61
#: 0d59c69b40c543ec887dfc2cf3ea7c33
msgid "``BTree.insert``"
msgstr ""

#: ../source/tutorial/modules.rst:62
#: 17d950159eba4745bf80b266c008148e
msgid "``BTree.toList``"
msgstr ""

#: ../source/tutorial/modules.rst:63
#: 681fbf364e3847dbb4c3cf032b093c6b
msgid "``BTree.toTree``"
msgstr ""

#: ../source/tutorial/modules.rst:65
#: e76fbc50f30d44ecaea950ed9e0785cf
msgid "If names are otherwise unambiguous, there is no need to give the fully qualified name. Names can be disambiguated either by giving an explicit qualification, using the ``with`` keyword, or according to their type."
msgstr ""

#: ../source/tutorial/modules.rst:69
#: 1e0a0b8fcb414a1285d08d5dcfb8d4fb
msgid "The ``with`` keyword in expressions comes in two variants:"
msgstr ""

#: ../source/tutorial/modules.rst:71
#: 520b1fcffa1b41648c535f825cde0a63
msgid "``with BTree.insert (insert x empty)`` for one name"
msgstr ""

#: ../source/tutorial/modules.rst:72
#: 0c95cc8acb0f4ab194e977647f231b81
msgid "``with [BTree.insert, BTree.empty] (insert x empty)`` for multiple names"
msgstr ""

#: ../source/tutorial/modules.rst:74
#: 725fdc5bfdb74a3294e594d8d0e79485
msgid "This is particularly useful with ``do`` notation, where it can often improve error messages: ``with MyModule.(>>=) do ...``"
msgstr ""

#: ../source/tutorial/modules.rst:77
#: ab9b403e9fc2431eae76f20f26ce67c3
msgid "If a file contains a module declaration ``module Foo.Bar.MyModule``, its path relative to the ``sourcedir`` specified in the ``.ipkg`` project file (defaults to ``.``) must be ``./Foo/Bar/MyModule.idr``. If you are not using an ``.ipkg`` project file, the path must be relative to the directory you are running Idris from. Similarly, an ``import`` statement also refers to such a relative filepath stripped of its file extension, using dots to separate directories. As in the example above, all modules names and directories must be capitalised identifiers. If a file does not contain a module declaration, it is considered to be a module whose identifier is ``Main``."
msgstr ""

#: ../source/tutorial/modules.rst:88
#: 1f566b6867854b5e8db827fdf45c2b18
msgid "Export Modifiers"
msgstr ""

#: ../source/tutorial/modules.rst:90
#: dc028ef550ce49eda9ce1c462c29a209
msgid "Idris allows for fine-grained control over the visibility of a namespace's contents. By default, all names defined in a namespace are kept private.  This aids in specification of a minimal interface and for internal details to be left hidden. Idris allows for functions, types, and interfaces to be marked as: ``private``, ``export``, or ``public export``. Their general meaning is as follows:"
msgstr ""

#: ../source/tutorial/modules.rst:97
#: 99dcefd65a134a81b86b4ea30d923c63
msgid "``private`` meaning that it is not exported at all. This is the default."
msgstr ""

#: ../source/tutorial/modules.rst:99
#: 6e1fa857a5b84a7ba45834cf0ead997b
msgid "``export`` meaning that its top level type is exported."
msgstr ""

#: ../source/tutorial/modules.rst:101
#: 23ba7b22cfbe43a8ae049fd3c1dfbb6c
msgid "``public export`` meaning that the entire definition is exported."
msgstr ""

#: ../source/tutorial/modules.rst:103
#: c122bbba5fc748399eba7be13e603392
msgid "A further restriction in modifying the visibility is that definitions must not refer to anything within a lower level of visibility. For example, ``public export`` definitions cannot use ``private`` or ``export`` names, and ``export`` types cannot use ``private`` names. This is to prevent private names leaking into a module's interface."
msgstr ""

#: ../source/tutorial/modules.rst:110
#: ad18d59734df4097a9c36f3df7de7fe5
msgid "Meaning for Functions"
msgstr ""

#: ../source/tutorial/modules.rst:112
#: e4e3d741f9c44769880929ae15d55e09
msgid "``export`` the type is exported"
msgstr ""

#: ../source/tutorial/modules.rst:114
#: f923c145772440bba77aed2d4828460c
msgid "``public export`` the type and definition are exported, and the definition can be used after it is imported. In other words, the definition itself is considered part of the module's interface. The long name ``public export`` is intended to make you think twice about doing this."
msgstr ""

#: ../source/tutorial/modules.rst:122
#: ea8d42af9f3144518bedd8d49e69b356
msgid "Type synonyms in Idris are created by writing a function. When setting the visibility for a module, it is usually a good idea to ``public export`` all type synonyms if they are to be used outside the module. Otherwise, Idris won't know what the synonym is a synonym for."
msgstr ""

#: ../source/tutorial/modules.rst:128
#: 5a12cdce12bf41c492a194bfad988ec3
msgid "Since ``public export`` means that a function's definition is exported, this effectively makes the function definition part of the module's API. Therefore, it's generally a good idea to avoid using ``public export`` for functions unless you really mean to export the full definition."
msgstr ""

#: ../source/tutorial/modules.rst:134
#: 5d88d5227c304ddaa7e59e48ce7929de
msgid "*For beginners*: If the function needs to be accessed only at runtime, use ``export``. However, if it's also meant to be used at *compile* time (e.g. to prove a theorem), use ``public export``. For example, consider the function ``plus : Nat -> Nat -> Nat`` discussed previously, and the following theorem: ``thm : plus Z m = m``. In order to prove it, the type checker needs to reduce ``plus Z m`` to ``m`` (and hence obtain ``thm : m = m``). To achieve this, it will need access to the *definition* of ``plus``, which includes the equation ``plus Z m = m``. Therefore, in this case, ``plus`` has to be marked as ``public export``."
msgstr ""

#: ../source/tutorial/modules.rst:147
#: 01fbdad7222c4305831855d8ea638390
msgid "Meaning for Data Types"
msgstr ""

#: ../source/tutorial/modules.rst:149
#: f3530e33f05647a6aa4968d0f7c9c498
msgid "For data types, the meanings are:"
msgstr ""

#: ../source/tutorial/modules.rst:151
#: bb7114b7bc764eaaac2fa8a8805f09ba
msgid "``export`` the type constructor is exported"
msgstr ""

#: ../source/tutorial/modules.rst:153
#: 5650eee7cd2c4fcda1627aa28a21e27b
msgid "``public export`` the type constructor and data constructors are exported"
msgstr ""

#: ../source/tutorial/modules.rst:157
#: ddd0190ef01f4d74ad6f065ff4a98f32
msgid "Meaning for Interfaces"
msgstr ""

#: ../source/tutorial/modules.rst:159
#: 225cb96390074ca3a9f90dc18b5e4975
msgid "For interfaces, the meanings are:"
msgstr ""

#: ../source/tutorial/modules.rst:161
#: f4cd85a062044a9ea8a773252a3ced74
msgid "``export`` the interface name is exported"
msgstr ""

#: ../source/tutorial/modules.rst:163
#: ebc3ddcac7304e4fbd4a4b63d36517a1
msgid "``public export`` the interface name, method names and default definitions are exported"
msgstr ""

#: ../source/tutorial/modules.rst:167
#: 550bee9ae05b473aa76ee3a5d6bff0b0
msgid "Meaning for fixity declarations"
msgstr ""

#: ../source/tutorial/modules.rst:169
#: 693af72dfb5045999be97e5de37900b6
msgid "The modifiers differ slightly when applied to fixities. Un-labelled fixities are exported rather than be private. There is no difference between `public export` and `export`. In summary:"
msgstr ""

#: ../source/tutorial/modules.rst:173
#: 6b869c6c4d5441a4a318e6506dab459e
msgid "``private`` means the fixity declaration is only visible within the file."
msgstr ""

#: ../source/tutorial/modules.rst:175
#: 4cc90dcccd6542d8b8abc756fa7ba47e
msgid "``public export`` and ``export`` are the same and the fixity is exported. The access modifier could also be eluded for the same effect."
msgstr ""

#: ../source/tutorial/modules.rst:179
#: ef74db8eecaa49779ab6371f70a246f2
msgid "Propagating Inner Module API's"
msgstr ""

#: ../source/tutorial/modules.rst:181
#: 4ab0aa8b88c64fd59cee273c90a36bae
msgid "Additionally, a module can re-export a module it has imported, by using the ``public`` modifier on an ``import``. For example:"
msgstr ""

#: ../source/tutorial/modules.rst:191
#: 87d5066c73dc4c4a90f88f1f58ef1a78
msgid "The module ``A`` will export the name ``a``, as well as any public or abstract names in module ``C``, but will not re-export anything from module ``B``."
msgstr ""

#: ../source/tutorial/modules.rst:196
#: 4a44e17c18434a9498ea2a8fb6f303dd
msgid "Renaming imports"
msgstr ""

#: ../source/tutorial/modules.rst:198
#: 9657d0323111423f82fc8a2b7059dc3b
msgid "Sometimes it is convenient to be able to access the names in another module via a different namespace (typically, a shorter one). For this, you can use `import...as`. For example:"
msgstr ""

#: ../source/tutorial/modules.rst:208
#: 99d1d8eb210346bf8469081989b3c134
msgid "This module ``A`` has access to the exported names from module ``Data.List``, but can also explicitly access them via the module name ``L``. ``import...as`` can also be combined with ``import public`` to create a module which exports a larger API from other sub-modules:"
msgstr ""

#: ../source/tutorial/modules.rst:220
#: ae6744a19e734cb8bd5cc4272925d390
msgid "Here, any module which imports ``Books`` will have access to the exported interfaces of ``Books.Hardback`` and ``Books.Comic`` both under the namespace ``Books``."
msgstr ""

#: ../source/tutorial/modules.rst:225
#: eefc0284e10d42e185b4ecfd5289f8f3
msgid "Explicit Namespaces"
msgstr ""

#: ../source/tutorial/modules.rst:227
#: 9d224113f6a54da88def2c84fa60a1f6
msgid "Defining a module also defines a namespace implicitly. However, namespaces can also be given *explicitly*. This is most useful if you wish to overload names within the same module:"
msgstr ""

#: ../source/tutorial/modules.rst:245
#: 51e327a4e7204b8f945c04959f98448c
msgid "This (admittedly contrived) module defines two functions with fully qualified names ``Foo.X.test`` and ``Foo.Y.test``, which can be disambiguated by their types:"
msgstr ""

#: ../source/tutorial/modules.rst:256
#: f91bbf28f60a4c2cbb0cc0d75a92db19
msgid "The export rules, ``public export`` and ``export``, are *per namespace*, not *per file*, so the two ``test`` definitions above need the ``export`` flag to be visible outside their own namespaces."
msgstr ""

#: ../source/tutorial/modules.rst:261
#: 021f89a18886411f83e0486473bd2090
msgid "Explicit namespaces inside functions"
msgstr ""

#: ../source/tutorial/modules.rst:263
#: aae9681f621040f1aeda27f5595dd488
msgid "Explicit namespaces can be defined inside ``where``-blocks of functions. Unlike other definitions (e.g. ``data`` or ``record``), such namespace definitions are understood as belonging to the scope of the function definition itself."
msgstr ""

#: ../source/tutorial/modules.rst:268
#: b5edccbf30f344a19f6447d513b8fe69
msgid "For example, the following code should typecheck."
msgstr ""

#: ../source/tutorial/modules.rst:282
#: 80ff9a36e29744a8bd459d7e21abd85f
msgid "Notice that if a function that contains namespace definition has parameters, then definitions inside this namespace will have these parameters too. This is done because such definitions have access to values of the parameters."
msgstr ""

#: ../source/tutorial/modules.rst:286
#: e7e5a89dde5347989820b0233042ce5a
msgid "These parameters must be passed explicitly when accessing namespaced definitions from outside the function where they are declared, and must not be passed when accessed from the inside. This behaviour is similar to parameterised blocks described below. Look at the following example."
msgstr ""

#: ../source/tutorial/modules.rst:305
#: 23f6b262deaa4aa8b30d99871c671f48
msgid "Parameterised blocks - `parameters`-blocks"
msgstr ""

#: ../source/tutorial/modules.rst:307
#: 9867148cc0bf4697be3d70f65be85a3d
msgid "Groups of functions can be parameterised over a number of arguments using a ``parameters`` declaration, for example:"
msgstr ""

#: ../source/tutorial/modules.rst:316
#: 21ee397fba9d409ba440b22fa57ede03
msgid "The effect of a ``parameters`` block is to add the declared parameters to every function, type and data constructor within the block. Specifically, adding the parameters to the front of the argument list. Outside the block, the parameters must be given explicitly. The ``addAll`` function, when called from the REPL, will thus have the following type signature."
msgstr ""

#: ../source/tutorial/modules.rst:328
#: 3fb9e1f7ba404ac8bc9bfa22d15c8bf0
msgid "and the following definition."
msgstr ""

#: ../source/tutorial/modules.rst:335
#: c4fc3cd96623494893db56513332d047
msgid "Parameters blocks can be nested, and can also include data declarations, in which case the parameters are added explicitly to all type and data constructors. They may also be dependent types with implicit arguments:"
msgstr ""

#: ../source/tutorial/modules.rst:348
#: 0ff1be00e9cf40e1a64a4665738cf6d7
msgid "To use ``Vects`` or ``append`` outside the block, we must also give the ``xs`` and ``y`` arguments. Here, we can use placeholders for the values which can be inferred by the type checker:"
msgstr ""

#: ../source/tutorial/modules.rst:357
#: 571dd666020343ceb7f05423d3da8dae
msgid "You can specify what quantity and if the parameters are implicits using the same syntax as record parameters."
msgstr ""
