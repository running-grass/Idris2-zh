# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/views.rst:5
#: b496a464d34a47c5b02e0b0b9726bb72
msgid "Views and the “``with``” rule"
msgstr ""

#: ../source/tutorial/views.rst:8
#: 1aca0cc268e342f48332dc165310447e
msgid "Dependent pattern matching"
msgstr ""

#: ../source/tutorial/views.rst:10
#: 4c2eb84a92204813b1e31af85429c6d8
msgid "Since types can depend on values, the form of some arguments can be determined by the value of others. For example, if we were to write down the implicit length arguments to ``(++)``, we’d see that the form of the length argument was determined by whether the vector was empty or not:"
msgstr ""

#: ../source/tutorial/views.rst:22
#: 57dc167e49f44562a605eb15b98e060b
msgid "If ``n`` was a successor in the ``[]`` case, or zero in the ``::`` case, the definition would not be well typed."
msgstr ""

#: ../source/tutorial/views.rst:28
#: fd0d226920944ff09d05c58b1befa7bb
msgid "The ``with`` rule — matching intermediate values"
msgstr ""

#: ../source/tutorial/views.rst:30
#: 0ccefecc748c402eb160eacf921e088e
msgid "Very often, we need to match on the result of an intermediate computation. Idris provides a construct for this, the ``with`` rule, inspired by views in ``Epigram`` [#McBridgeMcKinna]_, which takes account of the fact that matching on a value in a dependently typed language can affect what we know about the forms of other values. In its simplest form, the ``with`` rule adds another argument to the function being defined."
msgstr ""

#: ../source/tutorial/views.rst:38
#: e57bc8d24e2e4364b1a0037e1d88d9bf
msgid "When this intermediate computation additionally appears in the type of the function being defined, the ``with`` construct allows us to capture these occurrences so that the observations made in the patterns will be reflected in the type."
msgstr ""

#: ../source/tutorial/views.rst:43
#: 5b34cb1ee4434c47bed9be74f0c9539d
msgid "We have already seen a vector filter function. This time, we define it using ``with`` as follows:"
msgstr ""

#: ../source/tutorial/views.rst:53
#: 3781366bff494ee6a86c669ff7293cf8
msgid "Here, the ``with`` clause allows us to deconstruct the result of ``filter p xs``. The view refined argument pattern ``filter p (x :: xs)`` goes beneath the ``with`` clause, followed by a vertical bar ``|``, followed by the deconstructed intermediate result ``( _ ** xs' )``. If the view refined argument pattern is unchanged from the original function argument pattern, then the left side of ``|`` is extraneous and may be omitted with an underscore ``_``:"
msgstr ""

#: ../source/tutorial/views.rst:66
#: b7cfa6766cf148e59658a9bccdb20419
msgid "``with`` clauses can also be nested:"
msgstr ""

#: ../source/tutorial/views.rst:77
#: 359418484f9d4568aa751ac23e057301
msgid "and left hand sides that are the same as their parent's can be skipped by using ``_`` to focus on the patterns for the most local ``with``. Meaning that the above ``foo`` can be rewritten as follows:"
msgstr ""

#: ../source/tutorial/views.rst:90
#: 3ba3c9ca5ea44dd08d4d636527ef60f8
msgid "Equivalently, multiple expressions separated by ``|`` can be can be deconstructed in one ``with`` statement:"
msgstr ""

#: ../source/tutorial/views.rst:100
#: f101393ed93a4b88bc69df0a430218a0
msgid "If the intermediate computation itself has a dependent type, then the result can affect the forms of other arguments — we can learn the form of one value by testing another. In these cases, view refined argument patterns must be explicit. For example, a ``Nat`` is either even or odd. If it is even it will be the sum of two equal ``Nat``. Otherwise, it is the sum of two equal ``Nat`` plus one:"
msgstr ""

#: ../source/tutorial/views.rst:113
#: f85e7a9ac1c943d9a2a4de730cb119f1
msgid "We say ``Parity`` is a *view* of ``Nat``. It has a *covering function* which tests whether it is even or odd and constructs the predicate accordingly. Note that we're going to need access to ``n`` at run time, so although it's an implicit argument, it has unrestricted multiplicity."
msgstr ""

#: ../source/tutorial/views.rst:122
#: 5dfeb015b1b24ef9ab3848be5d5b9c8e
msgid "We’ll come back to the definition of ``parity`` shortly. We can use it to write a function which converts a natural number to a list of binary digits (least significant first) as follows, using the ``with`` rule:"
msgstr ""

#: ../source/tutorial/views.rst:135
#: 51b642af2d8c474a98080ef597f5e588
msgid "The value of ``parity k`` affects the form of ``k``, because the result of ``parity k`` depends on ``k``. So, as well as the patterns for the result of the intermediate computation (``Even`` and ``Odd``) right of the ``|``, we also write how the results affect the other patterns left of the ``|``. That is:"
msgstr ""

#: ../source/tutorial/views.rst:141
#: 609cb5bab5a245529ec6ce1bfdd294bd
msgid "When ``parity k`` evaluates to ``Even``, we can refine the original argument ``k`` to a refined pattern ``(j + j)`` according to ``Parity (n + n)`` from the ``Even`` constructor definition. So ``(j + j)`` replaces ``k`` on the left side of ``|``, and the ``Even`` constructor appears on the right side. The natural number ``j`` in the refined pattern can be used on the right side of the ``=`` sign."
msgstr ""

#: ../source/tutorial/views.rst:149
#: 523df850765949f18fd92ff642df314c
msgid "Otherwise, when ``parity k`` evaluates to ``Odd``, the original argument ``k`` is refined to ``S (j + j)`` according to ``Parity (S (n + n))`` from the ``Odd`` constructor definition, and ``Odd`` now appears on the right side of ``|``, again with the natural number ``j`` used on the right side of the ``=`` sign."
msgstr ""

#: ../source/tutorial/views.rst:155
#: 1dedf1e6748442468c9ade0aa9930dd6
msgid "Note that there is a function in the patterns (``+``) and repeated occurrences of ``j`` - this is allowed because another argument has determined the form of these patterns."
msgstr ""

#: ../source/tutorial/views.rst:160
#: aa9ddab8f7764a9488d8a7f40a927d38
msgid "Defining ``parity``"
msgstr ""

#: ../source/tutorial/views.rst:162
#: 4d6c041c65c147bfa3048d77ab821fd2
msgid "The definition of ``parity`` is a little tricky, and requires some knowledge of theorem proving (see Section :ref:`sect-theorems`), but for completeness, here it is:"
msgstr ""

#: ../source/tutorial/views.rst:177
#: fa5d604d1eec4c81987bce9d725335bf
msgid "For full details on ``rewrite`` in particular, please refer to the theorem proving tutorial, in Section :ref:`proofs-index`."
msgstr ""

#: ../source/tutorial/views.rst:180
#: 838be94b8ce741b6be8bf349d63cb73a
msgid "Conor McBride and James McKinna. 2004. The view from the left. J. Funct. Program. 14, 1 (January 2004), 69-111. https://doi.org/10.1017/S0956796803004829"
msgstr ""
