# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/multiplicities.rst:5
#: 2ba7c291e6134756a01345f7377a7873
msgid "Multiplicities"
msgstr ""

#: ../source/tutorial/multiplicities.rst:7
#: e73d276a87b340a58cc08e45165df691
msgid "Idris 2 is based on `Quantitative Type Theory (QTT) <https://bentnib.org/quantitative-type-theory.html>`_, a core language developed by Bob Atkey and Conor McBride. In practice, this means that every variable in Idris 2 has a *quantity* associated with it. A quantity is one of:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:13
#: 2191bbee2d124097af997873c41d0888
msgid "``0``, meaning that the variable is *erased* at run time"
msgstr ""

#: ../source/tutorial/multiplicities.rst:14
#: 7a05591ab764492a9a6413b68290169c
msgid "``1``, meaning that the variable is used *exactly once* at run time"
msgstr ""

#: ../source/tutorial/multiplicities.rst:15
#: 0507818fef10498f9da73a4371403a99
msgid "*Unrestricted*, which is the same behaviour as Idris 1"
msgstr ""

#: ../source/tutorial/multiplicities.rst:17
#: 142e3e392c444e7a89d285e4331727b2
msgid "We can see the multiplicities of variables by inspecting holes. For example, if we have the following skeleton definition of ``append`` on vectors..."
msgstr ""

#: ../source/tutorial/multiplicities.rst:25
#: 5a1f378f9fec40a7b82a3234d93a42ee
msgid "...we can look at the hole ``append_rhs``:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:38
#: 5f3f83700fc4496bad74b62de2cfb70b
msgid "The ``0`` next to ``m``, ``a`` and ``n`` mean that they are in scope, but there will be ``0`` occurrences at run-time. That is, it is **guaranteed** that they will be erased at run-time."
msgstr ""

#: ../source/tutorial/multiplicities.rst:42
#: 779af7b1921246bebc1e6af1c6519d62
msgid "Multiplicities can be explicitly written in function types as follows:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:44
#: 9c3e7c8653f546a994031c51c5c63108
msgid "``ignoreN : (0 n : Nat) -> Vect n a -> Nat`` - this function cannot look at ``n`` at run time"
msgstr ""

#: ../source/tutorial/multiplicities.rst:46
#: 9c291613b786497dbae6383ee3a8fea1
msgid "``duplicate : (1 x : a) -> (a, a)`` - this function must use ``x`` exactly once (so good luck implementing it, by the way. There is no implementation because it would need to use ``x`` twice!)"
msgstr ""

#: ../source/tutorial/multiplicities.rst:50
#: fe6e2635f3f04ecaac61bb42753a7d46
msgid "If there is no multiplicity annotation, the argument is unrestricted. If, on the other hand, a name is implicitly bound (like ``a`` in both examples above) the argument is erased. So, the above types could also be written as:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:54
#: 7137ee41b28b4166b3bbc0094caa1cf6
msgid "``ignoreN : {0 a : _} -> (0 n : Nat) -> Vect n a -> Nat``"
msgstr ""

#: ../source/tutorial/multiplicities.rst:55
#: 53d5c073ca00456f8e75fb492c75c184
msgid "``duplicate : {0 a : _} -> (1 x : a) -> (a, a)``"
msgstr ""

#: ../source/tutorial/multiplicities.rst:57
#: 08d92665c75c4e0ca7df9d4874c9622c
msgid "This section describes what this means for your Idris 2 programs in practice, with several examples. In particular, it describes:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:60
#: 8258b0e04d80426ab39f81297b5b8d6b
msgid ":ref:`sect-erasure` - how to know what is relevant at run time and what is erased"
msgstr ""

#: ../source/tutorial/multiplicities.rst:61
#: a404880be857405b9626b7527bf3a636
msgid ":ref:`sect-linearity` - using the type system to encode *resource usage protocols*"
msgstr ""

#: ../source/tutorial/multiplicities.rst:62
#: 83fe9cae5b6c4a5090bae013b40ccad9
msgid ":ref:`sect-pmtypes` - truly first class types"
msgstr ""

#: ../source/tutorial/multiplicities.rst:64
#: 72ab6b75c48d4cefa2211d9fba3172ca
msgid "The most important of these for most programs, and the thing you'll need to know about if converting Idris 1 programs to work with Idris 2, is erasure_. The most interesting, however, and the thing which gives Idris 2 much more expressivity, is linearity_, so we'll start there."
msgstr ""

#: ../source/tutorial/multiplicities.rst:72
#: 0bcf4f8042ea4acd87ff038c2791d2a8
msgid "Linearity"
msgstr ""

#: ../source/tutorial/multiplicities.rst:74
#: ca9a242e4c0f46f48da45327d064474c
msgid "The ``1`` multiplicity expresses that a variable must be used exactly once. By \"used\" we mean either:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:77
#: 18d95266821449cc9bc09e73dc31ebdd
msgid "if the variable is a data type or primitive value, it is pattern matched against, ex. by being the subject of a *case* statement, or a function argument that is pattern matched against, etc.,"
msgstr ""

#: ../source/tutorial/multiplicities.rst:78
#: 32fa0021b20746dea7116573ca8131d5
msgid "if the variable is a function, that function is applied (i.e. ran with an argument)"
msgstr ""

#: ../source/tutorial/multiplicities.rst:80
#: 75c0c5d5bb1a4643aebbde121cc50edd
msgid "First, we'll see how this works on some small examples of functions and data types, then see how it can be used to encode `resource protocols`_."
msgstr ""

#: ../source/tutorial/multiplicities.rst:83
#: 0bfc6c829f694b60b8bb13bb7e049d06
msgid "Above, we saw the type of ``duplicate``. Let's try to write it interactively, and see what goes wrong. We'll start by giving the type and a skeleton definition with a hole"
msgstr ""

#: ../source/tutorial/multiplicities.rst:92
#: c89aea486d924e7c875a80d948a54e15
msgid "Checking the type of a hole tells us the multiplicity of each variable in scope. If we check the type of ``?help`` we'll see that we can't use ``a`` at run time, and we have to use ``x`` exactly once::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:102
#: 2d191cc6756641cbaa100719a5c98738
msgid "If we use ``x`` for one part of the pair..."
msgstr ""

#: ../source/tutorial/multiplicities.rst:109
#: d27ecb54fc864b558ab33b298fb125b6
msgid "...then the type of the remaining hole tells us we can't use it for the other::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:117
#: 11534186ff7b42409ce894ff2e881748
msgid "The same happens if we try defining ``duplicate x = (?help, x)`` (try it!)."
msgstr ""

#: ../source/tutorial/multiplicities.rst:119
#: dcdb30f5e1164e49a7afc0e0e457a418
msgid "In order to avoid parsing ambiguities, if you give an explicit multiplicity for a variable as with the argument to ``duplicate``, you need to give it a name too. But, if the name isn't used in the scope of the type, you can use ``_`` instead of a name, as follows:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:128
#: b88bae5cfd144137914307847e3c2d59
msgid "The intution behind multiplicity ``1`` is that if we have a function with a type of the following form..."
msgstr ""

#: ../source/tutorial/multiplicities.rst:135
#: 51e41b4b3de34ce8ab6f323a6af22d08
msgid "...then the guarantee given by the type system is that *if* ``f x`` *is used exactly once, then* ``x`` *is used exactly once*. So, if we insist on trying to define ``duplicate``...::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:141
#: 45b7e2be186c4d90b02b8aab982fab84
msgid "...then Idris will complain::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:146
#: 23b7706b1f5a40fb89f770642200b31f
msgid "A similar intuition applies for data types. Consider the following types, ``Lin`` which wraps an argument that must be used once, and ``Unr`` which wraps an argument with unrestricted use"
msgstr ""

#: ../source/tutorial/multiplicities.rst:158
#: 9ffe8a60f92e44149c4c6a2f04333ee6
msgid "If ``MkLin x`` is used once, then ``x`` is used once. But if ``MkUnr x`` is used once, there is no guarantee on how often ``x`` is used. We can see this a bit more clearly by starting to write projection functions for ``Lin`` and ``Unr`` to extract the argument"
msgstr ""

#: ../source/tutorial/multiplicities.rst:171
#: 527e0ab21b034ff6b6d96515714fc695
msgid "Checking the types of the holes shows us that, for ``getLin``, we must use ``x`` exactly once (Because the ``val`` argument is used once, by pattern matching on it as ``MkLin x``, and if ``MkLin x`` is used once, ``x`` must be used once)::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:182
#: 13c27d21de5c4aae8bd5ced4c116636e
msgid "For ``getUnr``, however, we still have to use ``val`` once, again by pattern matching on it, but using ``MkUnr x`` once doesn't place any restrictions on ``x``. So, ``x`` has unrestricted use in the body of ``getUnr``::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:192
#: f0b726769f894e5ba7839baa7f8f2d59
msgid "If ``getLin`` has an unrestricted argument..."
msgstr ""

#: ../source/tutorial/multiplicities.rst:199
#: d0d27ef83ce3441482230ade0c35366b
msgid "...then ``x`` is unrestricted in ``howmanyLin``::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:207
#: 7560391075934d2fa4a87b9a73a61af4
msgid "Remember the intuition from the type of ``MkLin`` is that if ``MkLin x`` is used exactly once, ``x`` is used exactly once. But, we didn't say that ``MkLin x`` would be used exactly once, so there is no restriction on ``x``."
msgstr ""

#: ../source/tutorial/multiplicities.rst:212
#: 60fe7594ad974156a69e3cd1d9e75082
msgid "Resource protocols"
msgstr ""

#: ../source/tutorial/multiplicities.rst:214
#: 1d952989836f48eb93aab7c63bc58c89
msgid "One way to take advantage of being able to express linear usage of an argument is in defining resource usage protocols, where we can use linearity to ensure that any unique external resource has only one instance, and we can use functions which are linear in their arguments to represent state transitions on that resource. A door, for example, can be in one of two states, ``Open`` or ``Closed``"
msgstr ""

#: ../source/tutorial/multiplicities.rst:228
#: 557cd404d7ed4a29aac83b3a81564b5b
msgid "(Okay, we're just pretending here - imagine the ``doorId`` is a reference to an external resource!)"
msgstr ""

#: ../source/tutorial/multiplicities.rst:231
#: 0763b2a0c954441cb78ebcea85d9a331
msgid "We can define functions for opening and closing the door which explicitly describe how they change the state of a door, and that they are linear in the door"
msgstr ""

#: ../source/tutorial/multiplicities.rst:240
#: 2b4afc1593e046f1bf56f50de5cdc644
msgid "Remember, the intuition is that if ``openDoor d`` is used exactly once, then ``d`` is used exactly once. So, provided that a door ``d`` has multiplicity ``1`` when it's created, we *know* that once we call ``openDoor`` on it, we won't be able to use ``d`` again. Given that ``d`` is an external resource, and ``openDoor`` has changed its state, this is a good thing!"
msgstr ""

#: ../source/tutorial/multiplicities.rst:247
#: 4bb71649c9374cb79f8bb1275cab9caf
msgid "We can ensure that any door we create has multiplicity ``1`` by creating them with a ``newDoor`` function with the following type"
msgstr ""

#: ../source/tutorial/multiplicities.rst:254
#: 8a0f57a0337e47c9b82e0114f246fc33
msgid "That is, ``newDoor`` takes a function, which it runs exactly once. That function takes a door, which is used exactly once. We'll run it in ``IO`` to suggest that there is some interaction with the outside world going on when we create the door. Since the multiplicity ``1`` means the door has to be used exactly once, we need to be able to delete the door when we're finished"
msgstr ""

#: ../source/tutorial/multiplicities.rst:265
#: 9838be0ce4e548a8b2e1600b90b069fc
msgid "So an example correct door protocol usage would be"
msgstr ""

#: ../source/tutorial/multiplicities.rst:276
#: 5160f451d75c4755b9a382b82756d02d
msgid "It's instructive to build this program interactively, with holes along the way, and see how the multiplicities of ``d``, ``d'`` etc change. For example"
msgstr ""

#: ../source/tutorial/multiplicities.rst:288
#: df5651fb22b547d58f9955d671e20e3c
msgid "Checking the type of ``?whatnow`` shows that ``d`` is now spent, but we still have to use ``d'`` exactly once::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:297
#: 964378f7b1e64289b019ca1c5754025b
msgid "Note that the ``0`` multiplicity for ``d`` means that we can still *talk* about it - in particular, we can still reason about it in types - but we can't use it again in a relevant position in the rest of the program. It's also fine to shadow the name ``d`` throughout"
msgstr ""

#: ../source/tutorial/multiplicities.rst:311
#: dabb3f30466545318871a12e7b2a8542
msgid "If we don't follow the protocol correctly - create the door, open it, close it, then delete it - then the program won't type check. For example, we can try not to delete the door before finishing"
msgstr ""

#: ../source/tutorial/multiplicities.rst:324
#: 791a7e14c4084b73905554cce7a787c3
msgid "This gives the following error::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:329
#: 8ec0409ec04d4ce0870a59ff6eced661
msgid "There's a lot more to be said about the details here! But, this shows at a high level how we can use linearity to capture resource usage protocols at the type level. If we have an external resource which is guaranteed to be used linearly, like ``Door``, we don't need to run operations on that resource in an ``IO`` monad, since we're already enforcing an ordering on operations and don't have access to any out of date resource states. This is similar to the way interactive programs work in `the Clean programming language <https://clean.cs.ru.nl/Clean>`_, and in fact is how ``IO`` is implemented internally in Idris 2, with a special ``%World`` type for representing the state of the outside world that is always used linearly"
msgstr ""

#: ../source/tutorial/multiplicities.rst:351
#: 3ce2d33f698b49f1ac30481c0eab6a8f
msgid "Having multiplicities in the type system raises several interesting questions, such as:"
msgstr ""

#: ../source/tutorial/multiplicities.rst:354
#: 07ce4994c5d04914b24cdb1af2b53d64
msgid "Can we use linearity information to inform memory management and, for example, have type level guarantees about functions which will not need to perform garbage collection?"
msgstr ""

#: ../source/tutorial/multiplicities.rst:357
#: d3306c18d5e14e6aa5228e6718c38add
msgid "How should multiplicities be incorporated into interfaces such as ``Functor``, ``Applicative`` and ``Monad``?"
msgstr ""

#: ../source/tutorial/multiplicities.rst:359
#: b383177eac2b4fdba83aee6d93dece4a
msgid "If we have ``0``, and ``1`` as multiplicities, why stop there? Why not have ``2``, ``3`` and more (like `Granule <https://granule-project.github.io/granule.html>`_)"
msgstr ""

#: ../source/tutorial/multiplicities.rst:362
#: bb191d47563b4efcb77cdf8c0c4a93fd
msgid "What about multiplicity polymorphism, as in the `Linear Haskell proposal <https://arxiv.org/abs/1710.09756>`_?"
msgstr ""

#: ../source/tutorial/multiplicities.rst:363
#: 3f6bad4cffd643e28b5142eacdec7098
msgid "Even without all of that, what can we do *now*?"
msgstr ""

#: ../source/tutorial/multiplicities.rst:368
#: 6951f8bd17d648b38ea3932fbb820edf
msgid "Erasure"
msgstr ""

#: ../source/tutorial/multiplicities.rst:370
#: f544009ee5404053a0949f8296193681
msgid "The ``1`` multiplicity give us many possibilities in the kinds of properties we can express. But, the ``0`` multiplicity is perhaps more important in that it allows us to be precise about which values are relevant at run time, and which are compile time only (that is, which are erased). Using the ``0`` multiplicity means a function's type now tells us exactly what it needs at run time."
msgstr ""

#: ../source/tutorial/multiplicities.rst:377
#: 64f34833c0734f52b1aef804032598e3
msgid "For example, in Idris 1 you could get the length of a vector as follows"
msgstr ""

#: ../source/tutorial/multiplicities.rst:384
#: 62cfad728b384492a158c2d637c93923
msgid "This is fine, since it runs in constant time, but the trade off is that ``n`` has to be available at run time, so at run time we always need the length of the vector to be available if we ever call ``vlen``. Idris 1 can infer whether the length is needed, but there's no easy way for a programmer to be sure."
msgstr ""

#: ../source/tutorial/multiplicities.rst:389
#: b465c49edb824f83afe2ca4c444b895f
msgid "In Idris 2, we need to state explicitly that ``n`` is needed at run time"
msgstr ""

#: ../source/tutorial/multiplicities.rst:396
#: f2d5f444a46a437e84a62f5d5a55925d
msgid "(Incidentally, also note that in Idris 2, names bound in types are also available in the definition without explicitly rebinding them.)"
msgstr ""

#: ../source/tutorial/multiplicities.rst:399
#: 16e48c9d7db64ea9b86cd03ae22b9b45
msgid "This also means that when you call ``vlen``, you need the length available. For example, this will give an error"
msgstr ""

#: ../source/tutorial/multiplicities.rst:407
#: 7f0d5921cbbd48d6ad08f815923c28d1
msgid "Idris 2 reports::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:412
#: 489fe549ba854ffaa15d65c8bf12ec8c
msgid "This means that it needs to use ``m`` as an argument to pass to ``vlen xs``, where it needs to be available at run time, but ``m`` is not available in ``sumLengths`` because it has multiplicity ``0``."
msgstr ""

#: ../source/tutorial/multiplicities.rst:416
#: 9219384b0385423f86d0993b1d21721a
msgid "We can see this more clearly by replacing the right hand side of ``sumLengths`` with a hole..."
msgstr ""

#: ../source/tutorial/multiplicities.rst:424
#: 79684fe8883c4f9f85924e53c88075dd
msgid "...then checking the hole's type at the REPL::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:435
#: 65e3294cfa684678bd728edb5e8d3910
msgid "Instead, we need to give bindings for ``m`` and ``n`` with unrestricted multiplicity"
msgstr ""

#: ../source/tutorial/multiplicities.rst:443
#: 00f3c38bfa744d71a65558a1f3f9c1e1
msgid "Remember that giving no multiplicity on a binder, as with ``m`` and ``n`` here, means that the variable has unrestricted usage."
msgstr ""

#: ../source/tutorial/multiplicities.rst:446
#: 43dc29132a3346a0b71b6b49382f1255
msgid "If you're converting Idris 1 programs to work with Idris 2, this is probably the biggest thing you need to think about. It is important to note, though, that if you have bound implicits, such as..."
msgstr ""

#: ../source/tutorial/multiplicities.rst:454
#: e862580910f249f08d691262a07b4296
msgid "...then it's a good idea to make sure ``t`` really is needed, or performance might suffer due to the run time building the instance of ``t`` unnecessarily!"
msgstr ""

#: ../source/tutorial/multiplicities.rst:457
#: 17c94ab1569b4cb9a0ca3833d7b7745f
msgid "One final note on erasure: it is an error to try to pattern match on an argument with multiplicity ``0``, unless its value is inferrable from elsewhere. So, the following definition is rejected"
msgstr ""

#: ../source/tutorial/multiplicities.rst:467
#: 1e0a4d1dc4204dae8527fd75cc3752c8
msgid "This is rejected with the error::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:472
#: 4c152754b68a4e5d9f710d3ff5eba640
msgid "The following, however, is fine, because in ``sNot``, even though we appear to match on the erased argument ``x``, its value is uniquely inferrable from the type of the second argument"
msgstr ""

#: ../source/tutorial/multiplicities.rst:486
#: 0e22802038864e60a318fdc077f13d47
msgid "Experience with Idris 2 so far suggests that, most of the time, as long as you're using unbound implicits in your Idris 1 programs, they will work without much modification in Idris 2. The Idris 2 type checker will point out where you require an unbound implicit argument at run time - sometimes this is both surprising and enlightening!"
msgstr ""

#: ../source/tutorial/multiplicities.rst:495
#: 21c396caf12f43d48f8b02aec0ee5310
msgid "Pattern Matching on Types"
msgstr ""

#: ../source/tutorial/multiplicities.rst:497
#: 837cae6f82674f93a867ab1a948b521e
msgid "One way to think about dependent types is to think of them as \"first class\" objects in the language, in that they can be assigned to variables, passed around and returned from functions, just like any other construct. But, if they're truly first class, we should be able to pattern match on them too! Idris 2 allows us to do this. For example"
msgstr ""

#: ../source/tutorial/multiplicities.rst:510
#: e84f036ba4b44b96bd086a92816427dc
msgid "We can try this as follows::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:519
#: 8e0e5c398672481c9062c263a29727a2
msgid "Pattern matching on function types is interesting, because the return type may depend on the input value. For example, let's add a case to ``showType``"
msgstr ""

#: ../source/tutorial/multiplicities.rst:527
#: c090ca6521804e6589cc30dd515b30b8
msgid "Inspecting the type of ``help`` tells us::"
msgstr ""

#: ../source/tutorial/multiplicities.rst:534
#: b8841a1ef5e84daeaa52b789e0919a78
msgid "So, the return type ``a`` depends on the input value of type ``Nat``, and we'll need to come up with a value to use ``a``, for example"
msgstr ""

#: ../source/tutorial/multiplicities.rst:541
#: 97508a5633064fbb9939ba6cffe44f98
msgid "Note that multiplicities on the binders, and the ability to pattern match on *non-erased* types mean that the following two types are distinct"
msgstr ""

#: ../source/tutorial/multiplicities.rst:549
#: e91ac2c3daee4bc1a1af67c4a26a115f
msgid "In the case of ``notId``, we can match on ``a`` and get a function which is certainly not the identity function"
msgstr ""

#: ../source/tutorial/multiplicities.rst:564
#: 832baece9edb43faad5e94ce33265f8b
msgid "There is an important consequence of being able to distinguish between relevant and irrelevant type arguments, which is that a function is *only* parametric in ``a`` if ``a`` has multiplicity ``0``. So, in the case of ``notId``, ``a`` is *not* a parameter, and so we can't draw any conclusions about the way the function will behave because it is polymorphic, because the type tells us it might pattern match on ``a``."
msgstr ""

#: ../source/tutorial/multiplicities.rst:571
#: 9bcdbd7fd92644d39c6a3adc698947d4
msgid "On the other hand, it is merely a coincidence that, in non-dependently typed languages, types are *irrelevant* and get erased, and values are *relevant* and remain at run time. Idris 2, being based on QTT, allows us to make the distinction between relevant and irrelevant arguments precise. Types can be relevant, values (such as the ``n`` index to vectors) can be irrelevant."
msgstr ""

#: ../source/tutorial/multiplicities.rst:577
#: a2e4bfdd3e264f508308dafd7c3e28ad
msgid "For more details on multiplicities, see `Idris 2: Quantitative Type Theory in Action <https://www.type-driven.org.uk/edwinb/idris-2-quantitative-type-theory-in-action.html>`_."
msgstr ""
