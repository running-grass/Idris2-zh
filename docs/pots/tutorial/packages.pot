# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/packages.rst:5
#: 9f4669b270664c5695a02cf683e4a013
msgid "Packages"
msgstr ""

#: ../source/tutorial/packages.rst:7
#: f99037b7e35c45729e73738c47542c3f
msgid "Idris includes a simple build system for building packages and executables from a named package description file. These files can be used with the Idris compiler to manage the development process."
msgstr ""

#: ../source/tutorial/packages.rst:12
#: 4aab66d3d88d4746bcbc4ba885b57ea9
msgid "Package Descriptions"
msgstr ""

#: ../source/tutorial/packages.rst:14
#: 0b6fa9abfcfe4841a1ea2d84f3be6129
msgid "A package description includes the following:"
msgstr ""

#: ../source/tutorial/packages.rst:16
#: ab913ca65282475188173c2998f734f1
msgid "A header, consisting of the keyword ``package`` followed by a package name. Package names can be any valid Idris identifier. The iPKG format also takes a quoted version that accepts any valid filename."
msgstr ""

#: ../source/tutorial/packages.rst:20
#: c285c4b524374d4ea70ce571c7b20fa2
msgid "Fields describing package contents, ``<field> = <value>``."
msgstr ""

#: ../source/tutorial/packages.rst:22
#: 3480120d4a584b43818cfc4de925be7b
msgid "At least one field must be the modules field, where the value is a comma separated list of modules. For example, given an idris package ``maths`` that has modules ``Maths.idr``, ``Maths.NumOps.idr``, ``Maths.BinOps.idr``, and ``Maths.HexOps.idr``, the corresponding package file would be:"
msgstr ""

#: ../source/tutorial/packages.rst:37
#: 5e3fc73399b7463a8c61b1ceeceebce6
msgid "Running ``idris2 --init`` will interactively create a new package file in the current directory. The generated package file lists all configurable fields with a brief description."
msgstr ""

#: ../source/tutorial/packages.rst:39
#: 8b872351e0674e5d85981d6d513891af
msgid "Other examples of package files can be found in the ``libs`` directory of the main Idris repository, and in `third-party libraries <https://github.com/idris-lang/Idris-dev/wiki/Libraries>`_."
msgstr ""

#: ../source/tutorial/packages.rst:45
#: 0ed90c937da34f458effae64215f71bc
msgid "Using Package files"
msgstr ""

#: ../source/tutorial/packages.rst:47
#: f47971adae8a49009c609bc4d2db33d3
msgid "Idris itself is aware about packages, and special commands are available to help with, for example, building packages, installing packages, and cleaning packages.  For instance, given the ``maths`` package from earlier we can use Idris as follows:"
msgstr ""

#: ../source/tutorial/packages.rst:52
#: ff1aa766e9a9469c9c0eec9ca6e63658
msgid "``idris2 --build maths.ipkg`` will build all modules in the package"
msgstr ""

#: ../source/tutorial/packages.rst:54
#: 60e3cb534eaf4428b83720a40cf9b21d
msgid "``idris2 --install maths.ipkg`` will install the package, making it accessible by other Idris libraries and programs."
msgstr ""

#: ../source/tutorial/packages.rst:57
#: d483fa27786c45b1bbe8f4c9a56cfd30
msgid "``idris2 --clean maths.ipkg`` will delete all intermediate code and executable files generated when building."
msgstr ""

#: ../source/tutorial/packages.rst:60
#: 507bdf25c40e4cf796f3829bdeb2ffa0
msgid "Once the maths package has been installed, the command line option ``--package maths`` makes it accessible (abbreviated to ``-p maths``). For example:"
msgstr ""

#: ../source/tutorial/packages.rst:69
#: abd1f0e7c5d44378a2703ee4af7ac4a4
msgid "Package Dependencies Using Atom"
msgstr ""

#: ../source/tutorial/packages.rst:71
#: 6a068f641aa447f79db7a05f1fb96e28
msgid "If you are using the Atom editor and have a dependency on another package, corresponding to for instance ``import Lightyear`` or ``import Pruviloj``, you need to let Atom know that it should be loaded. The easiest way to accomplish that is with a .ipkg file. The general contents of an ipkg file will be described in the next section of the tutorial, but for now here is a simple recipe for this trivial case:"
msgstr ""

#: ../source/tutorial/packages.rst:78
#: 8f2bcd732af24fb5878ca6a22da81fdb
msgid "Create a folder myProject."
msgstr ""

#: ../source/tutorial/packages.rst:80
#: a25ffea6d61b4d3fb844cd5a0c4b5313
msgid "Add a file myProject.ipkg containing just a couple of lines:"
msgstr ""

#: ../source/tutorial/packages.rst:88
#: 7f45a72ca6ff410985e52ca8e3a4dcf1
msgid "In Atom, use the File menu to Open Folder myProject."
msgstr ""
