# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/backends/incremental.rst:3
#: a349119484ec4194a41ab8ba825b18e9
msgid "Incremental Code Generation"
msgstr ""

#: ../source/backends/incremental.rst:5
#: 27b34c3318874f52b6fbc6056a489389
msgid "By default, Idris 2 is a whole program compiler - that is, it finds all the necessary function definitions and compiles them only when you build an executable. This gives plenty of optimisation opportunities, but can also be slow for rebuilding. However, if the backend supports it, you can build modules and executables *incrementally*. To do so, you can either:"
msgstr ""

#: ../source/backends/incremental.rst:11
#: e985e84ee74d4bb4835348f1a225eda7
msgid "Set the ``--inc <backend>`` flag at the command line, for each backend you want to use incrementally."
msgstr ""

#: ../source/backends/incremental.rst:13
#: b80ce4d8ce224824b37b0abcefce3791
msgid "Set the ``IDRIS2_INC_CGS`` environment variable with a comma separated list of backends to use incrementally."
msgstr ""

#: ../source/backends/incremental.rst:16
#: 225ced7ad7104dc684e53b37f8c824d5
msgid "At the moment, only the Chez backend supports incremental builds."
msgstr ""

#: ../source/backends/incremental.rst:19
#: d799c422667c43069997aae97071c854
msgid "Building modules incrementally"
msgstr ""

#: ../source/backends/incremental.rst:21
#: db791f1895304872b04016a4c1f7b5a1
msgid "If either of the above are set, building a module will produce compiled binary code for all of the definitions in the module, as well as the usual checked TTC file. e.g.:"
msgstr ""

#: ../source/backends/incremental.rst:30
#: 99ba484ccbfe4e6fbfb31035726f794c
msgid "On successful type checking, each of these will produce a Chez Scheme file (``Foo.ss``) and compiled code for it (``Foo.so``) as well as the usual ``Foo.ttc``, in the same build directory as ``Foo.ttc``."
msgstr ""

#: ../source/backends/incremental.rst:34
#: 004a10e902574af5b302206c21d9e891
msgid "In incremental mode, you will see a warning for any holes in the module, even if those holes will be defined in a different module."
msgstr ""

#: ../source/backends/incremental.rst:38
#: ba24c9e92a2148dfaadd80155a3323e7
msgid "Building executables incrementally"
msgstr ""

#: ../source/backends/incremental.rst:40
#: e09b9c4558364a60894ab8fb02d2d3b4
msgid "If either ``--inc`` is used or ``IDRIS2_INC_CGS`` is set, compiling to an executable will attempt to link all of the compiled modules together, rather than generating code for all of the functions at once. For this to work, all the imported modules *must* have been built with incremental compilation for the current back end (Idris will revert to whole program compilation if any are missing, and you will see a warning.)"
msgstr ""

#: ../source/backends/incremental.rst:47
#: 3da84b544c5041858445629547e15f23
msgid "Therefore, all packages used by the executable must also have been built incrementally for the current back end. The ``prelude``, ``base``, ``contrib``, ``network`` and ``test`` packages are all built with incremental compilation support for Chez by default."
msgstr ""

#: ../source/backends/incremental.rst:52
#: ec122d693c9045eea60f153ec23b0a22
msgid "When switching between incremental and whole program compilation, it is recommended that you remove the ``build`` directory first. This is particularly important when switching to incremental compilation, since there may be stale object files that Idris does not currently detect!"
msgstr ""

#: ../source/backends/incremental.rst:59
#: fb45164091d6469bb268c1755059c129
msgid "Overriding incremental compilation"
msgstr ""

#: ../source/backends/incremental.rst:61
#: 1bf2c44bafdf4d498d7941bb9dacc95e
msgid "The ``--whole-program`` flag overrides any incremental compilation settings when building an executable."
msgstr ""

#: ../source/backends/incremental.rst:65
#: 7fc7d91c90ab494285b952398b879e1e
msgid "Performance note"
msgstr ""

#: ../source/backends/incremental.rst:67
#: 10effd26052b452c8a350cb6ab70d715
msgid "Incremental compilation means that executables are generated much quicker, especially when only a small proportion of modules have changed. However, it means that there are fewer optimisation opportunities, so the resulting executable will not perform as well. For deployment, ``--whole-program`` compilation is recommended."
msgstr ""
