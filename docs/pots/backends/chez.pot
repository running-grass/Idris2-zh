# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/backends/chez.rst:3
#: 9050b450aad54da69c6054ec038a76c5
msgid "Chez Scheme Code Generator"
msgstr ""

#: ../source/backends/chez.rst:5
#: b8410cd405a34dc8a3129946ff906313
msgid "The Chez Scheme code generator is the default, or it can be accessed via a REPL command:"
msgstr ""

#: ../source/backends/chez.rst:12
#: 1f15288f7ab5447aa7e0943c22919221
msgid "By default, therefore, to run Idris programs you will need to install `Chez Scheme <https://www.scheme.com/>`_. Chez Scheme is open source, and available via most OS package managers."
msgstr ""

#: ../source/backends/chez.rst:16
#: 177493ff1e3a48509775307c9dd023de
msgid "You can compile an expression ``expr`` of type ``IO ()`` to an executable as follows, at the REPL:"
msgstr ""

#: ../source/backends/chez.rst:23
#: 61a8248e9f4046aaa6d55502c4d2af4b
msgid "...where ``execname`` is the name of the executable file. This will generate the following:"
msgstr ""

#: ../source/backends/chez.rst:26
#: 8f16252ffb244c5aa61decb698723f9b
msgid "A shell script ``build/exec/execname`` which invokes the program"
msgstr ""

#: ../source/backends/chez.rst:27
#: 6cf0836e532f468fba628910d59c0ad8
msgid "A subdirectory ``build/exec/execname_app`` which contains all the data necessary to run the program. This includes the Chez Scheme source (``execname.ss``), the compiled Chez Scheme code (``execname.so``) and any shared libraries needed for foreign function definitions."
msgstr ""

#: ../source/backends/chez.rst:32
#: 524da3cf7bea4a74bae81ecfbf249c58
msgid "The executable ``execname`` is relocatable to any subdirectory, provided that ``execname_app`` is also in the same subdirectory."
msgstr ""

#: ../source/backends/chez.rst:35
#: 881fef26e7fd4b10b37c46ad38184b84
msgid "You can also execute an expression directly:"
msgstr ""

#: ../source/backends/chez.rst:41
#: ade458a1ee9b49fe8de1e1b136ac1114
msgid "Again, ``expr`` must have type ``IO ()``. This will generate a temporary executable script ``_tmpchez`` in the ``build/exec`` directory, and execute that."
msgstr ""

#: ../source/backends/chez.rst:45
#: 5dc08594351d48ae9018794cc99bdad4
msgid "Chez Scheme is the default code generator, so if you invoke ``idris2`` with the ``-o execname`` flag, it will generate an executable script ``build/exec/execname``, again with support files in ``build/exec/execname_app``."
msgstr ""

#: ../source/backends/chez.rst:51
#: 6eb7d69120ce4178966c0f81d5fe2852
msgid "Chez Directives"
msgstr ""

#: ../source/backends/chez.rst:53
#: e83ce0ec8532495b9e979cd965b5f512
msgid "``--directive extraRuntime=<path>``"
msgstr ""

#: ../source/backends/chez.rst:55
#: dc467ecb6e974cf3a8b9f821af95d8ae
msgid "Embed Scheme source from ``<path>`` directly into generated output. Can be specified more than once, in which case all given files will be included in the order specified."
msgstr ""

#: ../source/backends/chez.rst:75
#: d99b769d86574eefb5b9520f89928eb0
msgid "``--directive lazy=weakMemo``"
msgstr ""

#: ../source/backends/chez.rst:77
#: e2e96b2cc884496990a54c2071c88b29
msgid "Makes all non-toplevel ``Lazy`` and ``Inf`` values to be *weakly* memoised. That is, once this expression is evaluated at runtime, it is allowed to not to be recalculated on later accesses until memoised value is wiped by a garbage collector. Garbage collector is allowed to collect weakly memoised values at its own discretion, so when no free memory is available, weakly memoised values are free to be wiped. That's why it is safer comparing to full memoisation."
msgstr ""

#: ../source/backends/chez.rst:85
#: fdcfb268fda04f73827592c2cbe995df
msgid "Making a freestanding executable"
msgstr ""

#: ../source/backends/chez.rst:87
#: 7fa8952daee84922853b9f00e3f2926e
msgid "It's possible to embed the Chez Scheme system and the built Idris2 program into a freestanding executable with `chez-exe <https://github.com/gwatt/chez-exe>`_."
msgstr ""

#: ../source/backends/chez.rst:89
#: bd37eb3261364244921c6600b10a364b
msgid "Build and install the ``compile-chez-program-tool`` by running the configuration script and then make:"
msgstr ""

#: ../source/backends/chez.rst:96
#: 150c08f2482142c08cc0489c0e13fc5b
msgid "where ``<bootpath`` is the path to where the Chez Scheme bootfiles (``petite.boot`` and ``scheme.boot``) and ``scheme.h`` are. More configuration is described in the chez-exe installation instructions."
msgstr ""

#: ../source/backends/chez.rst:99
#: 615985362dde4a09badef9a8a626f1f1
msgid "Invoke ``compile-chez-program``:"
msgstr ""

#: ../source/backends/chez.rst:105
#: eda69b67555242e7ab691a3eb0dcdd5f
msgid "Note that it can only use the ``.ss``-file and not the ``.so``-file. To embed the full Chez Scheme system including the compiler add the ``--full-chez`` option."
msgstr ""

#: ../source/backends/chez.rst:108
#: b887b6a238814b2881d770fa4a19bd91
msgid "The finished executable still requires the libidris_support shared library. It's possible to also eliminate that dependency by linking with it statically."
msgstr ""
