# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/app/exceptionsstate.rst:2
#: ef41a81c835f4a97a52ec3ad0d4eb7e2
msgid "Exceptions and State"
msgstr ""

#: ../source/app/exceptionsstate.rst:4
#: 4cb4cc56682149b9a95910f634c2d939
msgid "``Control.App`` is primarily intended to make it easier to manage the common cases of applications with exceptions and state. We can throw and catch exceptions listed in the list of errors (the ``es`` parameter to ``App``) and introduce new global state."
msgstr ""

#: ../source/app/exceptionsstate.rst:10
#: 000c552097ad42fe8eca013643119fef
msgid "Exceptions"
msgstr ""

#: ../source/app/exceptionsstate.rst:12
#: e24ce60414a24a6a8d9ef9808c413f45
msgid "The ``List Error`` is a list of error types, which can be thrown and caught using the functions below:"
msgstr ""

#: ../source/app/exceptionsstate.rst:20
#: bf0b0a777ada4fe8bc2749f62d910b23
msgid "We can use ``throw`` and ``catch`` for some exception type ``err`` as long as the exception type exists in the list of errors, ``es``, as checked by the ``HasErr`` predicate, also defined in ``Control.App`` (Also, note that ``Exception`` is a synonym for ``HasErr``):"
msgstr ""

#: ../source/app/exceptionsstate.rst:34
#: 82185b6f2fad446fbb0eae1a428ff73b
msgid "Finally, we can introduce new exception types via ``handle``, which runs a block of code which might throw, handling any exceptions:"
msgstr ""

#: ../source/app/exceptionsstate.rst:44
#: 8008566fc8184816b322e412318de9e4
msgid "Adding State"
msgstr ""

#: ../source/app/exceptionsstate.rst:46
#: 8eaf130135024c4985d9d7572ffe54e2
msgid "Applications will typically need to keep track of state, and we support this primitively in ``App`` using a ``State`` type, defined in ``Control.App``:"
msgstr ""

#: ../source/app/exceptionsstate.rst:54
#: 0a9d24603b2f4d1f9c0573275934c7ed
msgid "The ``tag`` is used purely to distinguish between different states, and is not required at run-time, as explicitly stated in the types of ``get`` and ``put``, which are used to access and update a state:"
msgstr ""

#: ../source/app/exceptionsstate.rst:63
#: df8e618620414d38839fa4b427e75ad8
msgid "These use an ``auto``-implicit to pass around a ``State`` with the relevant ``tag`` implicitly, so we refer to states by tag alone. In ``helloCount`` earlier, we used an empty type ``Counter`` as the tag:"
msgstr ""

#: ../source/app/exceptionsstate.rst:72
#: 7f48d6f6e8214522ab39876e08fd16be
msgid "The list of errors ``e`` is used to ensure that states are only usable in the list of errors in which they are introduced. States are introduced using ``new``:"
msgstr ""

#: ../source/app/exceptionsstate.rst:80
#: 3e89a66cea514d239dd69a89005a3be9
msgid "Note that the type tells us ``new`` runs the program with the state exactly once. Rather than using ``State`` and ``Exception`` directly, however, we typically use interfaces to constrain the operations which are allowed in a list of errors. Internally, ``State`` is implemented via an ``IORef``, primarily for performance reasons."
msgstr ""
