# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/app/index.rst:5
#: 89894b4c1b6c448b8d40b165077b6eed
msgid "Structuring Idris 2 Applications"
msgstr ""

#: ../source/app/index.rst:7
#: 7f8715c48b3748b5a108e524f028fd1d
msgid "A tutorial on structuring Idris 2 applications using ``Control.App``."
msgstr ""

#: ../source/app/index.rst:11
#: 81c8629d5e8947f8a83cc851c3fbd919
msgid "The documentation for Idris has been published under the Creative Commons CC0 License. As such to the extent possible under law, *The Idris Community* has waived all copyright and related or neighboring rights to Documentation for Idris."
msgstr ""

#: ../source/app/index.rst:16
#: f0fdc66f78b445b29e80b1fcdc2f2dfc
msgid "More information concerning the CC0 can be found online at: http://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#: ../source/app/index.rst:21
#: 82da9bbfb1564bd482351798539eb93e
msgid "Idris applications have ``main : IO ()`` as an entry point.  A type ``IO a`` is a description of interactive actions which produce a value of type ``a``. This is fine for primitives, but ``IO`` does not support exceptions so we have to be explicit about how an operation handles failure. Also, if we do want to support exceptions, we also want to explain how exceptions and linearity (see Section :ref:`sect-multiplicities`) interact."
msgstr ""

#: ../source/app/index.rst:28
#: ae1b0aaf1e344136ae77c30b032bc9c4
msgid "In this tutorial, we describe a parameterised type ``App`` and a related parameterised type ``App1``, which together allow us to structure larger applications, taking into account both exceptions and linearity. The aims of ``App`` and ``App1`` are that they should:"
msgstr ""

#: ../source/app/index.rst:33
#: 2a1b160214fb41a6936b75796d700949
msgid "make it possible to express what interactions a function does, in its type, without too much notational overhead."
msgstr ""

#: ../source/app/index.rst:35
#: 578947dcf92346218e55d0164f98a8ae
msgid "have little or no performance overhead compared to writing in *IO*."
msgstr ""

#: ../source/app/index.rst:36
#: 4b94748ce4a74e368163bb11e3700747
msgid "be compatible with other libraries and techniques for describing effects, such as algebraic effects or monad transformers."
msgstr ""

#: ../source/app/index.rst:38
#: 869057c9d71b4be39e88a6e08899cccc
msgid "be sufficiently easy to use and performant that it can be the basis of *all* libraries that make foreign function calls, much as *IO* is in Idris 1 and Haskell"
msgstr ""

#: ../source/app/index.rst:41
#: bc0a2a082146494993ac885b5ea96f0e
msgid "be compatible with linear types, meaning that they should express whether a section of code is linear (guaranteed to execute exactly once without throwing an exception) or whether it might throw an exception."
msgstr ""

#: ../source/app/index.rst:45
#: 1937eb02fb994271aab0457381813a5b
msgid "We begin by introducing ``App``, with some small example programs, then show how to extend it with exceptions, state, and other interfaces."
msgstr ""
