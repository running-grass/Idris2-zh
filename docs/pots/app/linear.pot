# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/app/linear.rst:2
#: b2e30fb2b7714309983f3ac19e955195
msgid "Linear Resources"
msgstr ""

#: ../source/app/linear.rst:4
#: c20825ca486946f88b5f254173bd87f4
msgid "We have introduced ``App`` for writing interactive programs, using interfaces to constrain which operations are permitted, but have not yet seen the ``Path`` parameter in action. Its purpose is to constrain when programs can throw exceptions, to know where linear resource usage is allowed. The bind operator for ``App`` is defined as follows (not via ``Monad``):"
msgstr ""

#: ../source/app/linear.rst:20
#: 129bcd1300fa4cbb88f06827a6615d3e
msgid "The intuition behind this type is that, when sequencing two ``App`` programs:"
msgstr ""

#: ../source/app/linear.rst:23
#: 8887c51977b94bc8bc798b068a064237
msgid "if the first action might throw an exception, then the whole program might throw."
msgstr ""

#: ../source/app/linear.rst:25
#: e9ecec3c027d44fcbf83b9958a7f1b74
msgid "if the first action cannot throw an exception, the second action can still throw, and the program as a whole can throw."
msgstr ""

#: ../source/app/linear.rst:27
#: 44c1625ec09a483da8ca7bd792e8893e
msgid "if neither action can throw an exception, the program as a whole cannot throw."
msgstr ""

#: ../source/app/linear.rst:30
#: a9c7dab3220e48dab933375438dde9df
msgid "The reason for the detail in the type is that it is useful to be able to sequence programs with a different ``Path``, but in doing so, we must calculate the resulting ``Path`` accurately. Then, if we want to sequence subprograms with linear variables, we can use an alternative bind operator which guarantees to run the continuation exactly once:"
msgstr ""

#: ../source/app/linear.rst:42
#: 586ef48815a24e45bbebf62ac248296b
msgid "To illustrate the need for ``bindL``, we can try writing a program which tracks the state of a secure data store, which requires logging in before reading the data."
msgstr ""

#: ../source/app/linear.rst:47
#: a2ca29d9282d4e15a634f3a4fe2593ed
msgid "Example: a data store requiring a login"
msgstr ""

#: ../source/app/linear.rst:49
#: a89cf4ed61f04f53ae42ced5d379531a
msgid "Many software components rely on some form of state, and there may be operations which are only valid in specific states. For example, consider a secure data store in which a user must log in before getting access to some secret data. This system can be in one of two states:"
msgstr ""

#: ../source/app/linear.rst:54
#: 1b85484efb624fd599989d7900db4cdb
msgid "``LoggedIn``, in which the user is allowed to read the secret"
msgstr ""

#: ../source/app/linear.rst:55
#: 8f76493a6ec94f0c8991c7f36a124b5e
msgid "``LoggedOut``, in which the user has no access to the secret"
msgstr ""

#: ../source/app/linear.rst:57
#: 6689743629094db3b5e472df747b5b86
msgid "We can provide commands to log in, log out, and read the data, as illustrated in the following diagram:"
msgstr ""

#: ../source/app/linear.rst:60
#: edc1cdf37ff34bf39642a534b5d323fb
msgid "|login|"
msgstr ""

#: ../source/app/linear.rst:128
#: 67caaac9b28f4c5bb4364da55568a859
msgid "login"
msgstr ""

#: ../source/app/linear.rst:62
#: 518782d327b2420b805ccaa94182bfca
msgid "The ``login`` command, if it succeeds, moves the overall system state from ``LoggedOut`` to ``LoggedIn``. The ``logout`` command moves the state from ``LoggedIn`` to ``LoggedOut``. Most importantly, the ``readSecret`` command is only valid when the system is in the ``LoggedIn`` state."
msgstr ""

#: ../source/app/linear.rst:67
#: e9e2e04e42684327851a3d8eb0fb6708
msgid "We can represent the state transitions using functions with linear types. To begin, we define an interface for connecting to and disconnecting from a store:"
msgstr ""

#: ../source/app/linear.rst:78
#: 041bd48c30174d23a76fed73f517a8eb
msgid "Neither ``connect`` nor ``disconnect`` throw, as shown by generalising over ``l``. Once we have a connection, we can use the following functions to access the resource directly:"
msgstr ""

#: ../source/app/linear.rst:94
#: 7ba99b1b975c44b5842ab53c01b07dd1
msgid "``Res`` is defined in the Prelude, since it is commonly useful.  It is a dependent pair type, which associates a value with a linear resource. We'll leave the other definitions abstract, for the purposes of this introductory example."
msgstr ""

#: ../source/app/linear.rst:99
#: 1ec6c973b51e428382778497a6309ab1
msgid "The following listing shows a complete program accessing the store, which reads a password, accesses the store if the password is correct and prints the secret data. It uses ``let (>>=) = bindL`` and ``(>>) = seqL`` to redefine ``do``-notation locally."
msgstr ""

#: ../source/app/linear.rst:120
#: 296a24a64efa4ef5a327f2e970f34a77
msgid "If we omit the ``let (>>=) = bindL``, it will use the default ``(>>=)`` operator, which allows the continuation to be run multiple times, which would mean that ``s`` is not guaranteed to be accessed linearly, and ``storeProg`` would not type check (and similarly with ``(>>) = bindIg``). We can safely use ``getStr`` and ``putStr`` because they are guaranteed not to throw by the ``Path`` parameter in their types."
msgstr ""

#: ../source/app/linear.rst:132
#: ecb80c4cab05482eba0ba33ab0225f37
msgid "App1: Linear Interfaces"
msgstr ""

#: ../source/app/linear.rst:134
#: 8bc47219ca5e4d199d93a75373fccdc8
msgid "Adding the ``bindL`` function to allow locally rebinding the ``(>>=)`` operator allows us to combine existing linear resource programs with operations in ``App`` - at least, those that don't throw. It would nevertheless be nice to interoperate more directly with ``App``. One advantage of defining interfaces is that we can provide multiple implementations for different contexts, but our implementation of the data store uses primitive functions (which we left undefined in any case) to access the store."
msgstr ""

#: ../source/app/linear.rst:143
#: 5ff28e53da244192b053924162381139
msgid "To allow control over linear resources, ``Control.App`` provides an alternative parameterised type ``App1``:"
msgstr ""

#: ../source/app/linear.rst:151
#: 48a036d0546343c287c0acfbb9683732
msgid "There is no need for a ``Path`` argument, since linear programs can never throw. The ``Usage`` argument states whether the value returned is to be used once, or has unrestricted usage, with the default in ``App1`` being to use once:"
msgstr ""

#: ../source/app/linear.rst:160
#: 9dca78f1c655410091b86592421eacdb
msgid "The main difference from ``App`` is the ``(>>=)`` operator, which has a different multiplicity for the variable bound by the continuation depending on the usage of the first action:"
msgstr ""

#: ../source/app/linear.rst:173
#: b4d7397e3d8a4b038d1fbef03049f96e
msgid "``Cont1Type`` returns a continuation which uses the argument linearly, if the first ``App1`` program has usage ``One``, otherwise it returns a continuation where argument usage is unrestricted. Either way, because there may be linear resources in scope, the continuation is run exactly once and there can be no exceptions thrown."
msgstr ""

#: ../source/app/linear.rst:179
#: 58080dd1f2c842c2b971f187b201c66c
msgid "Using ``App1``, we can define all of the data store operations in a single interface, as shown in the following listing. Each operation other than ``disconnect`` returns a `linear` resource."
msgstr ""

#: ../source/app/linear.rst:195
#: 558b5eab201740e9b25e6f9de3bc7891
msgid "We can explicitly move between ``App`` and ``App1``:"
msgstr ""

#: ../source/app/linear.rst:202
#: 47a64bde5e864b52acce6a1248e89678
msgid "We can run an ``App`` program using ``app``, inside ``App1``, provided that it is guaranteed not to throw. Similarly, we can run an ``App1`` program using ``app1``, inside ``App``, provided that the value it returns has unrestricted usage. So, for example, we can write:"
msgstr ""

#: ../source/app/linear.rst:216
#: 84eed1f496da4ac195530935fdaa20c4
msgid "This uses ``app1`` to state that the body of the program is linear, then ``app`` to state that the ``putStr`` operation is in ``App``. We can see that ``connect`` returns a linear resource by inspecting the hole ``what_next``, which also shows that we are running inside ``App1``:"
msgstr ""

#: ../source/app/linear.rst:229
#: 3a30dcfa65964c4e946074cc080df4ee
msgid "For completeness, one way to implement the interface is as follows, with hard coded password and internal data:"
msgstr ""

#: ../source/app/linear.rst:249
#: 6fc94a98c91c4ae39facad58731bebe7
msgid "Then we can run it in ``main``:"
msgstr ""
