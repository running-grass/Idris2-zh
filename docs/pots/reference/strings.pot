# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/strings.rst:2
#: a220882fad0646a6be822bcfcb7b31a5
msgid "String literals in Idris"
msgstr ""

#: ../source/reference/strings.rst:4
#: 72d41e6f70be47da8b6cf752a6e8a650
msgid "To facilitate the use of string literals, idris provides three features in addition to plain string literals: multiline strings, raw strings and interpolated strings."
msgstr ""

#: ../source/reference/strings.rst:9
#: 6a17028644f944eb878fe448091a89dc
msgid "Plain string literals"
msgstr ""

#: ../source/reference/strings.rst:11
#: 0b51c1c9db1c4e29a8fcd4b81e6650aa
msgid "String literals behave the way you expect from other programming language. Use quotation marks ``\"`` around the piece of text that you want to use as a string:"
msgstr ""

#: ../source/reference/strings.rst:14
#: 7f0df13f074042feb361755b44e94523
msgid "``\"hello world\"``"
msgstr ""

#: ../source/reference/strings.rst:16
#: d98ba70ce3f04e4794a84582e271f0df
msgid "As explained in :doc:`overloadedlit`, string literals can be overloaded to return a type different than string."
msgstr ""

#: ../source/reference/strings.rst:19
#: 7fe74572cd0845adba8eaa557a9b2e2e
msgid "Multiline string literals"
msgstr ""

#: ../source/reference/strings.rst:21
#: a59c52e8bc51491ca6a00c70b9c0a94a
msgid "In some cases you will have to display a large string literal that spans multiple lines. For this you can use *multiline string literals*, they allow you to span a string across multiple vertical lines, preserving the line returns and the indentation. Additionally they allow you to indent your multiline string with the surrounding code, without breaking the intended format of the string."
msgstr ""

#: ../source/reference/strings.rst:26
#: 2290a1c4adda4e83911a972a1de288ac
msgid "To use multiline strings, start with a triple quote ``\"\"\"`` followed by a line return, then enter your text and close it with another triple quote ``\"\"\"`` with whitespace on its left. The indentation of the closing triple quote will determine how much whitespace should be cropped from each line of the text."
msgstr ""

#: ../source/reference/strings.rst:33
#: 130da488e66542c18564cc80285d29ce
msgid "Multiline strings use triple quotes to enable the automatic cropping of leading whitespace when the multiline block is indented."
msgstr ""

#: ../source/reference/strings.rst:48
#: 588ca0439a7f45f5823d39db275ad150
msgid "printing the variable `welcome` will result in the following text:"
msgstr ""

#: ../source/reference/strings.rst:58
#: 8798565fe0494af4ba93a776f2bf13c4
msgid "As you can see, each line has been stripped of its leading 4 space, that is because the closing delimiter was indented with 4 spaces."
msgstr ""

#: ../source/reference/strings.rst:61
#: eaeb459fd4ea44a391b600473748d51a
msgid "In order to use multiline string literals, remember the following:"
msgstr ""

#: ../source/reference/strings.rst:63
#: 4d19c39e047441e484dbf370682e83ac
msgid "The starting delimited must be followed by a line return"
msgstr ""

#: ../source/reference/strings.rst:64
#: 19411cf31c1e4ab4ba9ec5e51f296562
msgid "The ending delimiter's intendation level must not exceed the indentation of any line"
msgstr ""

#: ../source/reference/strings.rst:67
#: c65201c5f23c404c9185d5b8446e4997
msgid "Raw string literals"
msgstr ""

#: ../source/reference/strings.rst:69
#: 218529be6fee4561980a9b2af1a8b4b7
msgid "It is not uncommon to write string literals that require some amount of escaping. For plain string literals the characters ``\\\\`` and ``\"`` must be escaped, for multiline strings the characters ``\"\"\"`` must be escaped. Raw string literals allow you to dynamically change the required escaped sequence in order to avoid having to escape those very common sets of characters. For this, use ``#\"`` as starting delimiter and ``\"#`` as closing delimiter. The number of ``#`` symbols can be increased in order to accommodate for edge cases where ``\"#`` would be a valid symbol. In the following example we are able to match on ``\\{`` by using half as many ``\\\\`` characters as if we didn't use raw string literals:"
msgstr ""

#: ../source/reference/strings.rst:84
#: 51cfcd649c8d43cf927caccc0429bf96
msgid "If you need to escape characters you still can by using a ``\\\\`` followed by the same number of ``#`` that you used for your string delimiters. In the following example we are using two ``#`` characters as our escape sequence and want to print a line return:"
msgstr ""

#: ../source/reference/strings.rst:93
#: 9e9225ac91d2438f926f32491ec392be
msgid "This last example could be implemented by combining raw string literals with multiline strings:"
msgstr ""

#: ../source/reference/strings.rst:105
#: 08e140d364b943038ed00d528113edce
msgid "Interpolated strings"
msgstr ""

#: ../source/reference/strings.rst:107
#: 63ebd601af7b416094441376f2d3a0e7
msgid "Concatenating string literals with runtime values happens all the time, but sprinkling our code with lots of ``\"`` and ``++`` symbols sometimes hurts legibility which in turn can introduce bugs that are hard to detect for human eyes. Interpolated strings allow to inline the execution of programs that evaluate to strings with a string literals in order to avoid manually writing out the concatenation of those expressions. To use interpolated strings, use ``\\{`` to start an interpolation slice in which you can write an idris expression. Close it with ``}``"
msgstr ""

#: ../source/reference/strings.rst:130
#: ed0200af0dcf47d1a9b9e41146e7b666
msgid "As you can see in the second line, raw string literals and interpolated strings can be combined. The starting and closing delimiters indicate how many ``#`` must be used as escape sequence in the string, since interpolated strings require the first ``{`` to be escaped, an interpolated slice in a raw string uses ``\\#{`` as starting delimiter."
msgstr ""

#: ../source/reference/strings.rst:135
#: 96262b2fd7d6443aae5a19181f88c621
msgid "Additionally multiline strings can also be combined with string interpolation in the way you expect, as shown with the ``Decl`` pattern. Finally all three features can be combined together in the last branch of the example, where a multiline string has a custom escape sequence and includes an interpolated slice."
msgstr ""

#: ../source/reference/strings.rst:141
#: 0b5b8c0f78534e3c9f33eea37f2ca616
msgid "Interpolation Interface"
msgstr ""

#: ../source/reference/strings.rst:143
#: b73c1d7f170f4a1bb588c87a67d5f0b6
msgid "The Prelude exposes an ``Interpolation`` interface with one function ``interpolate``. This function is used within every interpolation slice to convert an arbitrary expression into a string that can be concatenated with the rest of the interpolated string."
msgstr ""

#: ../source/reference/strings.rst:147
#: 21205016092c439fa8914afa11d7f58b
msgid "To go into more details, when you write ``\"hello \\{username}\"`` the compiler translates the expression into ``concat [interpolate \"hello \", interpolate username]`` so that the concatenation is fast and so that if ``username`` implement the ``Interpolation`` interface, you don't have to convert it to a string manually."
msgstr ""

#: ../source/reference/strings.rst:151
#: 1bb4912919c04a5e82182294b9b73fe5
msgid "Here is an example where we reuse the ``Expr`` type but instead of implementing a ``print`` function we implement ``Interpolation``:"
msgstr ""

#: ../source/reference/strings.rst:170
#: 98d0fe0d2dd747ed873b56af89caafa6
msgid "As you can see we avoid repeated calls to ``print`` since the slices are automatically applied to ``interpolate``."
msgstr ""

#: ../source/reference/strings.rst:173
#: c81ee0e9e926470a976e98add6eecc4c
msgid "We use ``Interpolation`` instead of ``Show`` for interpolation slices because the semantics of ``show`` are not necessarily the same as ``interpolate``. Typically the implementation of ``show`` for ``String`` adds double quotes around the text, but for ``interpolate`` what we want is to return the string as is. In the previous example, ``\"hello \\{username}\"``, if we were to use ``show`` we would end up with the string ``\"hello \"Susan`` which displays an extra pair of double quotes. That is why the implementation of ``interpolate`` for ``String`` is the identity function: ``interpolate x = x``. This way the desugared code looks like: ``concat [id \"hello \", interpolate username]``."
msgstr ""
