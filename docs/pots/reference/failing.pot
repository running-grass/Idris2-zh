# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/failing.rst:2
#: 7dcfd489d36f4e4790ef9d704d95edd7
msgid "Failing blocks"
msgstr ""

#: ../source/reference/failing.rst:7
#: 20f583856e894e61b8f1d750af66f301
msgid "Failing blocks let users check that some code parses but is rejected during elaboration. Their simplest form is using the keyword ``failing`` followed by some indented Idris code:"
msgstr ""

#: ../source/reference/failing.rst:17
#: bf21ad40c85541148771b9bb3e783d2f
msgid "Putting the code above in a file and asking Idris to check it will not produce an error message since the code in the ``failing`` block is rejected, i.e. fails."
msgstr ""

#: ../source/reference/failing.rst:21
#: b1169cddb130421fae2f4391f383ed8b
msgid "The ``failing`` keyword optionally takes a string argument. If present, the string attached to the failing block is checked against the error message raised to check that it appears in the error. This lets the user document the kind of error expected in the block, while at the same time checking that the error message is indeed what we expected. For example, in the following example, we make sure that Idris rejects a proof that the character ``'a'`` is equal to ``'b'`` by throwing an error when unifying them:"
msgstr ""

#: ../source/reference/failing.rst:35
#: 0c9f10d554004516943b7f859e4ea8a0
msgid "Failing blocks can be helpful when demonstrating false paths or starts in a program or example. Valid code is accepted in failing blocks, so intermediary helper functions can be used as long as at least one statement in the block fails (it does not have to be the first or last statement!):"
msgstr ""

#: ../source/reference/failing.rst:55
#: 864d7ccf55ca44ac90d61c7d3f588351
msgid "Invalid failing blocks"
msgstr ""

#: ../source/reference/failing.rst:57
#: f0edd63149ae459e9488164aff35ac4d
msgid "Should the failing block not fail, i.e. the code inside is accepted during elaboration, the compiler will report an error:"
msgstr ""

#: ../source/reference/failing.rst:66
#: 409b434437bb49d5aec96d9d6080adb5
msgid "Checking the above gives:"
msgstr ""

#: ../source/reference/failing.rst:72
#: 3004d404cf2943549e644a93f445c65d
msgid "Similarly, if an expected error (sub)string is given but the error output does not match, we get:"
msgstr ""

#: ../source/reference/failing.rst:79
#: f781aded4d064537acb2448a6659dc81
msgid "Followed by the given expected error string and the actual error output, allowing us to compare and contrast."
msgstr ""

#: ../source/reference/failing.rst:83
#: 8e61e0113621443788994da58b0321ce
msgid "One block per falsehood"
msgstr ""

#: ../source/reference/failing.rst:85
#: 5ca3a40ebfdf43629de40542b94652dc
msgid "**Take care to use separate ``failing`` blocks per thing to check.** Using a single block can lead to unexpected results. The following example passes, since the second statement fails:"
msgstr ""

#: ../source/reference/failing.rst:102
#: a6bcf598a68943aa89391b7343c1d99d
msgid "Instead, separate the statements out into separate failing blocks:"
msgstr ""

#: ../source/reference/failing.rst:118
#: 19e3054256e34e90be1adaf002408bac
msgid "This causes two ``Error: Failing block did not fail`` messages to be emitted, as one would expect."
msgstr ""
