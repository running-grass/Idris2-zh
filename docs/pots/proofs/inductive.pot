# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/proofs/inductive.rst:5
#: 795b85b0c44f427da9580491011f4f2a
msgid "Inductive Proofs"
msgstr ""

#: ../source/proofs/inductive.rst:7
#: eb38234d9d0344f88ad65b4e81e210a1
msgid "Before embarking on proving ``plus_commutes`` in Idris itself, let us consider the overall structure of a proof of some property of natural numbers. Recall that they are defined recursively, as follows:"
msgstr ""

#: ../source/proofs/inductive.rst:17
#: e7c5c687481a4eaab13d911952df699b
msgid "A *total* function over natural numbers must both terminate, and cover all possible inputs. Idris checks functions for totality by checking that all inputs are covered, and that all recursive calls are on *structurally smaller* values (so recursion will always reach a base case). Recalling ``plus``:"
msgstr ""

#: ../source/proofs/inductive.rst:29
#: d23a976b763b4f08a84db34fc5c4c1e3
msgid "This is total because it covers all possible inputs (the first argument can only be ``Z`` or ``S k`` for some ``k``, and the second argument ``m`` covers all possible ``Nat``) and in the recursive call, ``k`` is structurally smaller than ``S k`` so the first argument will always reach the base case ``Z`` in any sequence of recursive calls."
msgstr ""

#: ../source/proofs/inductive.rst:35
#: 7a758be88489402fb22cdd24b12c38c3
msgid "In some sense, this resembles a mathematical proof by induction (and this is no coincidence!). For some property ``P`` of a natural number ``x``, we can show that ``P`` holds for all ``x`` if:"
msgstr ""

#: ../source/proofs/inductive.rst:39
#: 05e204798ff544e28b96baf199e26cbd
msgid "``P`` holds for zero (the base case)."
msgstr ""

#: ../source/proofs/inductive.rst:41
#: bc51111ec85445ca9261464f4467f675
msgid "Assuming that ``P`` holds for ``k``, we can show ``P`` also holds for ``S k`` (the inductive step)."
msgstr ""

#: ../source/proofs/inductive.rst:44
#: 1bd8283e857a4d4a8648e95b5a39358a
msgid "In ``plus``, the property we are trying to show is somewhat trivial (for all natural numbers ``x``, there is a ``Nat`` which need not have any relation to ``x``). However, it still takes the form of a base case and an inductive step. In the base case, we show that there is a ``Nat`` arising from ``plus n m`` when ``n = Z``, and in the inductive step we show that there is a ``Nat`` arising when ``n = S k`` and we know we can get a ``Nat`` inductively from ``plus k m``. We could even write a function capturing all such inductive definitions:"
msgstr ""

#: ../source/proofs/inductive.rst:64
#: 1d706d474dcb43c68a738100be22dfdb
msgid "Using ``nat_induction``, we can implement an equivalent inductive version of ``plus``:"
msgstr ""

#: ../source/proofs/inductive.rst:77
#: a0cafaffebb54a7ea19a91b3dc93340b
msgid "To prove that ``plus n m = plus m n`` for all natural numbers ``n`` and ``m``, we can also use induction. Either we can fix ``m`` and perform induction on ``n``, or vice versa. We can sketch an outline of a proof; performing induction on ``n``, we have:"
msgstr ""

#: ../source/proofs/inductive.rst:82
#: 4712c90a02584b3b9dc9b6386f3088dc
msgid "Property ``prop`` is ``\\x => plus x m = plus m x``."
msgstr ""

#: ../source/proofs/inductive.rst:84
#: 1cc21dc3fad04eadb5e662a0119664cd
msgid "Show that ``prop`` holds in the base case and inductive step:"
msgstr ""

#: ../source/proofs/inductive.rst:0
#: f1fea0b6ad3a4aac823572389fe77096
msgid "Base case: ``prop Z``, i.e."
msgstr ""

#: ../source/proofs/inductive.rst:0
#: ec70f80a154647efbbd41cf651dc5761
msgid "``plus Z m = plus m Z``, which reduces to"
msgstr ""

#: ../source/proofs/inductive.rst:0
#: f92c3f29fbf0432cb15d384ee5af804f
msgid "``m = plus m Z`` due to the definition of ``plus``."
msgstr ""

#: ../source/proofs/inductive.rst:0
#: c601d83f60ac4d3693bce374af15820d
msgid "Inductive step: Inductively, we know that ``prop k`` holds for a specific, fixed ``k``, i.e."
msgstr ""

#: ../source/proofs/inductive.rst:0
#: 5d1940b4b50b4c5c9369304e7e2e700b
msgid "``plus k m = plus m k`` (the induction hypothesis). Given this, show ``prop (S k)``, i.e."
msgstr ""

#: ../source/proofs/inductive.rst:0
#: 31737e73db9e4ce59c926d2f4dd56005
msgid "``plus (S k) m = plus m (S k)``, which reduces to"
msgstr ""

#: ../source/proofs/inductive.rst:0
#: 4b78bad028a74444ba1082ea708b6279
msgid "``S (plus k m) = plus m (S k)``. From the induction hypothesis, we can rewrite this to"
msgstr ""

#: ../source/proofs/inductive.rst:0
#: 1196745bc16041a1aa7c33b6774e672e
msgid "``S (plus m k) = plus m (S k)``."
msgstr ""

#: ../source/proofs/inductive.rst:96
#: bd074894bc63405ca5f444b7384bb1bc
msgid "To complete the proof we therefore need to show that ``m = plus m Z`` for all natural numbers ``m``, and that ``S (plus m k) = plus m (S k)`` for all natural numbers ``m`` and ``k``. Each of these can also be proved by induction, this time on ``m``."
msgstr ""

#: ../source/proofs/inductive.rst:101
#: 13c5bb95915a42f0b2aee51679f5b33a
msgid "We are now ready to embark on a proof of commutativity of ``plus`` formally in Idris."
msgstr ""
