# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/proofs/propositional.rst:1
#: bafd591930574e58a7d948575546f1f0
msgid "This page attempts to explain some of the techniques used in Idris to prove propositional equalities."
msgstr ""

#: ../source/proofs/propositional.rst:5
#: b2c4f0bba91546d8a45c6ec646f37617
msgid "Proving Propositional Equality"
msgstr ""

#: ../source/proofs/propositional.rst:7
#: bcae08c1544a487dadb0bda91dda50be
msgid "We have seen that definitional equalities can be proved using ``Refl`` since they always normalise to values that can be compared directly."
msgstr ""

#: ../source/proofs/propositional.rst:10
#: 892f12670a6648a7a2668ac18f773cf6
msgid "However with propositional equalities we are using symbolic variables, which do not always normalise."
msgstr ""

#: ../source/proofs/propositional.rst:13
#: 48ddd2f79b6d4b23a2422a91c055adef
msgid "So to take the previous example:"
msgstr ""

#: ../source/proofs/propositional.rst:19
#: a4097169e7944d9a951194192de6a9ba
msgid "In this case ``plus n Z`` does not normalise to n. Even though both sides of the equality are provably equal we cannot claim ``Refl`` as a proof."
msgstr ""

#: ../source/proofs/propositional.rst:22
#: 06e1d9acab6d48b4b2f64c5ab2bcd1ef
msgid "If the pattern match cannot match for all ``n`` then we need to match all possible values of ``n``. In this case"
msgstr ""

#: ../source/proofs/propositional.rst:33
#: 5a2c535d0f7c4952b1d5e2016a18c195
msgid "we can't use ``Refl`` to prove ``plus n 0 = n`` for all ``n``. Instead, we call it for each case separately.  So, in the second line for example, the type checker substitutes ``Z`` for ``n`` in the type being matched, and reduces the type accordingly."
msgstr ""

#: ../source/proofs/propositional.rst:39
#: e6864eb9403c49818bf6764c9e97b41c
msgid "Replace"
msgstr ""

#: ../source/proofs/propositional.rst:41
#: eff1a657db90424f971bdf32627276f8
msgid "This implements the 'indiscernability of identicals' principle, if two terms are equal then they have the same properties. In other words, if ``x=y``, then we can substitute y for x in any expression. In our proofs we can express this as:"
msgstr ""

#: ../source/proofs/propositional.rst:45
#: ae0f916445c44b6b893f6d695c7f4d46
msgid "if x=y then prop x = prop y"
msgstr ""

#: ../source/proofs/propositional.rst:48
#: 6bbff96f0ebe407bb392c7de1f2711d1
msgid "where prop is a pure function representing the property. In the examples below prop is an expression in some variable with a type like this: ``prop: n -> Type``"
msgstr ""

#: ../source/proofs/propositional.rst:51
#: 7e27a5e740cc4c6bb2a19375e3a09182
msgid "So if ``n`` is a natural number variable then ``prop`` could be something like ``\\n => 2*n + 3``."
msgstr ""

#: ../source/proofs/propositional.rst:54
#: f200c4c239ca4c7fa05db68bf58246af
msgid "To use this in our proofs there is the following function in the prelude:"
msgstr ""

#: ../source/proofs/propositional.rst:62
#: 47c95e3da9b148308b5f4cd331464ef6
msgid "If we supply an equality (x=y) and a proof of a property of x (``prop x``) then we get a proof of a property of y (``prop y``). So, in the following example, if we supply ``p1 x`` which is a proof that ``x=2`` and the equality ``x=y`` then we get a proof that ``y=2``."
msgstr ""

#: ../source/proofs/propositional.rst:76
#: 7b91beb1201143df97bdf96a33309dfd
msgid "Rewrite"
msgstr ""

#: ../source/proofs/propositional.rst:78
#: f829bf7527154f5aa02b7943568f8764
msgid "In practice, ``replace`` can be a little tricky to use because in general the implicit argument ``prop`` can be hard to infer for the machine, so Idris provides a high level syntax which calculates the property and applies ``replace``."
msgstr ""

#: ../source/proofs/propositional.rst:83
#: 87af375fdc21448b939a2b9f76acefb0
msgid "Example: again we supply ``p1 x`` which is a proof that ``x=2`` and the equality ``y=x`` then we get a proof that ``y=2``."
msgstr ""

#: ../source/proofs/propositional.rst:94
#: 5414f98cc76b458f8d3c2cde56969457
msgid "We can think of ``rewrite`` as working in this way:"
msgstr ""

#: ../source/proofs/propositional.rst:96
#: 068a7eba1168400b9eae443c696a7cf4
msgid "Start with a equation ``x=y`` and a property ``prop : x -> Type``"
msgstr ""

#: ../source/proofs/propositional.rst:97
#: b6f96e73257b463ea209b26cad1b4908
msgid "Search for ``x`` in ``prop``"
msgstr ""

#: ../source/proofs/propositional.rst:98
#: 5efa11c91c4f46cd843b873d03fc6edf
msgid "Replaces all occurrences of ``x`` with ``y`` in ``prop``."
msgstr ""

#: ../source/proofs/propositional.rst:100
#: 297ba5f07a2c4f6ebb167d1e62129fb0
msgid "That is, we are doing a substitution."
msgstr ""

#: ../source/proofs/propositional.rst:102
#: 22c216e1896144c7af0e5e395e617d3d
msgid "Notice that here we need to supply reverse equality, i.e. ``y=x`` instead of ``x=y``. This is because ``rewrite`` performs the substitution of left part of equality to the right part and this substitution is done in the *return type*. Thus, here in the return type ``y=2`` we need to apply ``y=x`` in order to match the type of the argument ``x=2``."
msgstr ""

#: ../source/proofs/propositional.rst:108
#: 57045770e4444accbaf53b499bc58bfb
msgid "Symmetry and Transitivity"
msgstr ""

#: ../source/proofs/propositional.rst:110
#: 675b970ba29f4f4f9e81d19b1659b4e9
msgid "In addition to 'reflexivity' equality also obeys 'symmetry' and 'transitivity' and these are also included in the prelude:"
msgstr ""

#: ../source/proofs/propositional.rst:124
#: bca8264236c148f5a438bce0ee0c3538
msgid "Heterogeneous Equality"
msgstr ""

#: ../source/proofs/propositional.rst:126
#: 94f5b164456048d7be285f89cf122b6e
msgid "Also included in the prelude:"
msgstr ""
