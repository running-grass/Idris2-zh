# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/proofs/definitional.rst:1
#: cc571bf9ee8b4959b387d4c3566d9e13
msgid "Before we discuss the details of theorem proving in Idris, we will describe some fundamental concepts:"
msgstr ""

#: ../source/proofs/definitional.rst:4
#: c5d942a28e2a4ad9aa7cee8b70756854
msgid "Propositions and judgments"
msgstr ""

#: ../source/proofs/definitional.rst:5
#: 288da4698ae64f1c8feb00403b7dfb35
msgid "Boolean and constructive logic"
msgstr ""

#: ../source/proofs/definitional.rst:6
#: ../source/proofs/definitional.rst:57
#: f22b0844ff364830b25c01bf2ca00cee
#: c57a1569ea46435e8343b021aa8e2eae
msgid "Curry-Howard correspondence"
msgstr ""

#: ../source/proofs/definitional.rst:7
#: 5578845ce3584faf963a98b72c0ee987
msgid "Definitional and propositional equalities"
msgstr ""

#: ../source/proofs/definitional.rst:8
#: 7d2c809b13c24ea6b8efd977e60711e9
msgid "Axiomatic and constructive approaches"
msgstr ""

#: ../source/proofs/definitional.rst:11
#: 1fa5f238274a492c8b3ccbf0496ff9f3
msgid "Propositions and Judgments"
msgstr ""

#: ../source/proofs/definitional.rst:13
#: c8f9703fa1374ea5a8102e869dec305e
msgid "Propositions are the subject of our proofs. Before the proof, we can't formally say if they are true or not. If the proof is successful then the result is a 'judgment'.  For instance, if the ``proposition`` is,"
msgstr ""

#: ../source/proofs/definitional.rst:18
#: c01e679728db4ff1b02bfd29f761cea4
msgid "1+1=2"
msgstr ""

#: ../source/proofs/definitional.rst:21
#: 392816b58716446798fdbc2c2c00a88c
msgid "When we prove it, the ``judgment`` is,"
msgstr ""

#: ../source/proofs/definitional.rst:24
#: 3424b4614c38435dbec000c88035b0f3
msgid "1+1=2 true"
msgstr ""

#: ../source/proofs/definitional.rst:27
#: 63ed1ba14bbb4f77a46c594888b5cbb5
msgid "Or if the ``proposition`` is,"
msgstr ""

#: ../source/proofs/definitional.rst:30
#: 2fbbd83c4aa940dfa5d2f7c8b08d10e2
msgid "1+1=3"
msgstr ""

#: ../source/proofs/definitional.rst:33
#: e93ccffec47b4b25a1489e7548976f38
msgid "we can't prove it is true, but it is still a valid proposition and perhaps we can prove it is false so the ``judgment`` is,"
msgstr ""

#: ../source/proofs/definitional.rst:37
#: 3ff9221e7cdb40bf8e5a45e10e8fa9ac
msgid "1+1=3 false"
msgstr ""

#: ../source/proofs/definitional.rst:40
#: 7d997b70b1624917863ac53c61505e8e
msgid "This may seem a bit pedantic but it is important to be careful: in mathematics not every proposition is true or false. For instance, a proposition may be unproven or even unprovable."
msgstr ""

#: ../source/proofs/definitional.rst:44
#: 528fc24cbdef487aa528f6046f809f7f
msgid "So the logic here is different from the logic that comes from boolean algebra. In that case what is not true is false and what is not false is true. The logic we are using here does not have this law, the \"Law of Excluded Middle\", so we cannot use it."
msgstr ""

#: ../source/proofs/definitional.rst:49
#: 9739476d618e48ce8648309e25a0506c
msgid "A false proposition is taken to be a contradiction and if we have a contradiction then we can prove anything, so we need to avoid this. Some languages, used in proof assistants, prevent contradictions."
msgstr ""

#: ../source/proofs/definitional.rst:53
#: 409928072bac4d5f890ed6aadace6ea1
msgid "The logic we are using is called constructive (or sometimes intuitional) because we are constructing a 'database' of judgments."
msgstr ""

#: ../source/proofs/definitional.rst:59
#: 267701ff43914c6a8befa2a4bce31f74
msgid "So how do we relate these proofs to Idris programs? It turns out that there is a correspondence between constructive logic and type theory. They have the same structure and we can switch back and forth between the two notations."
msgstr ""

#: ../source/proofs/definitional.rst:63
#: b5da42a12279440bb709d3a2a4101a52
msgid "The way that this works is that a proposition is a type so..."
msgstr ""

#: ../source/proofs/definitional.rst:73
#: b7877bf76d554921bc7591b4ef7d584c
msgid "...is a proposition and it is also a type. The following will also produce an equality type:"
msgstr ""

#: ../source/proofs/definitional.rst:82
#: 2504fc275ec04a578bceba2fc592d3e4
msgid "Both of these are valid propositions so both are valid equality types. But how do we represent a true judgment? That is, how do we denote 1+1=2 is true but not 1+1=3?  A type that is true is inhabited, that is, it can be constructed. An equality type has only one constructor 'Refl' so a proof of 1+1=2 is"
msgstr ""

#: ../source/proofs/definitional.rst:92
#: aa3e090af32142bba8bd2f819fd44645
msgid "Now that we can represent propositions as types other aspects of propositional logic can also be translated to types as follows:"
msgstr ""

#: ../source/proofs/definitional.rst:96
#: 0471f0ca49cc4b0ebac977167ffbd2c6
msgid "propositions"
msgstr ""

#: ../source/proofs/definitional.rst:96
#: dbdff720bb9f4d30b33199091772fed2
msgid "example of possible type"
msgstr ""

#: ../source/proofs/definitional.rst:98
#: ffe13314d5084e5f89c92c9c46302d39
msgid "A"
msgstr ""

#: ../source/proofs/definitional.rst:98
#: 4d5f874d840c4fddb56d2ba1043fbcf1
msgid "x=y"
msgstr ""

#: ../source/proofs/definitional.rst:100
#: 15fb2a97f8294b49b3e551f8273896db
msgid "B"
msgstr ""

#: ../source/proofs/definitional.rst:100
#: ../source/proofs/definitional.rst:108
#: ../source/proofs/definitional.rst:110
#: 88e8c857ada342c79aa89a7396b31321
#: eb26c2862a974ce186b73b8cad1e5b6e
#: 796c006e7be249e8b95dd841855e5bc7
msgid "y=z"
msgstr ""

#: ../source/proofs/definitional.rst:102
#: 76d2173ef5284a09b395cc1d66ae9507
msgid "and"
msgstr ""

#: ../source/proofs/definitional.rst:102
#: 9b80192cc21b4c71837057d1babc730e
msgid "A /\\\\ B"
msgstr ""

#: ../source/proofs/definitional.rst:102
#: 966d28068c23435b998a73d05b9391bb
msgid "Pair(x=y,y=z)"
msgstr ""

#: ../source/proofs/definitional.rst:104
#: d1871ece79ed4c52afe77c2d44720207
msgid "or"
msgstr ""

#: ../source/proofs/definitional.rst:104
#: d7ffee823085466ab5c0c9adbb4c2f39
msgid "A \\\\/ B"
msgstr ""

#: ../source/proofs/definitional.rst:104
#: cd1287d0df914093b903ef051041f21d
msgid "Either(x=y,y=z)"
msgstr ""

#: ../source/proofs/definitional.rst:106
#: 69ee30c2a23b4919964b929099b82906
msgid "implies"
msgstr ""

#: ../source/proofs/definitional.rst:106
#: f1edafc871404363a4ebfd78fdfda0a7
msgid "A -> B"
msgstr ""

#: ../source/proofs/definitional.rst:106
#: b0573697c18b40d188318ad46511af11
msgid "(x=y) -> (y=z)"
msgstr ""

#: ../source/proofs/definitional.rst:108
#: b1cccecaf64748c99e376d6b0e4049fa
msgid "for all"
msgstr ""

#: ../source/proofs/definitional.rst:110
#: f40f72843f9c440e86438d9e739d4bd7
msgid "exists"
msgstr ""

#: ../source/proofs/definitional.rst:115
#: becfb6bf4429423fb38f34ebb76f572a
msgid "And (conjunction)"
msgstr ""

#: ../source/proofs/definitional.rst:117
#: f27a53dadc0d4b2b9b28201c788860e0
msgid "We can have a type which corresponds to conjunction:"
msgstr ""

#: ../source/proofs/definitional.rst:123
#: ab05ad881dd3420fa2d740fe2b57f1fe
msgid "There is a built in type called 'Pair'."
msgstr ""

#: ../source/proofs/definitional.rst:126
#: 5c405b9da0914f57bba6f0e4f8a70eb9
msgid "Or (disjunction)"
msgstr ""

#: ../source/proofs/definitional.rst:128
#: e7945428fd2d4a0ba5acd41cb77036c2
msgid "We can have a type which corresponds to disjunction:"
msgstr ""

#: ../source/proofs/definitional.rst:136
#: 97f431bf399546f0a8b8f4326ae5c0ae
msgid "There is a built in type called 'Either'."
msgstr ""

#: ../source/proofs/definitional.rst:139
#: f3012753e202448f9a9439f255535e73
msgid "Definitional and Propositional Equalities"
msgstr ""

#: ../source/proofs/definitional.rst:141
#: 0004981d5f394c29a303923f5548c891
msgid "We have seen that  we can 'prove' a type by finding a way to construct a term. In the case of equality types there is only one constructor which is ``Refl``. We have also seen that each side of the equation does not have to be identical like '2=2'. It is enough that both sides are *definitionally equal* like this:"
msgstr ""

#: ../source/proofs/definitional.rst:151
#: 79cf3d4aed99444fb439fdad6e6acd50
msgid "Both sides of this equation normalise to 2 and so Refl matches and the proposition is proved."
msgstr ""

#: ../source/proofs/definitional.rst:154
#: 7ef4cf3754fb413a8392d4be0d97b5f1
msgid "We don't have to stick to terms; we can also use symbolic parameters so the following type checks:"
msgstr ""

#: ../source/proofs/definitional.rst:162
#: 32fbe4f8b429403f95cbc52e4b568ae6
msgid "If a proposition/equality type is not definitionally equal but is still true then it is *propositionally equal*. In this case we may still be able to prove it but some steps in the proof may require us to add something into the terms or at least to take some sideways steps to get to a proof."
msgstr ""

#: ../source/proofs/definitional.rst:167
#: e6ff89576ef54dbd9b9eb4ab8b4a313f
msgid "Especially when working with equalities containing variable terms (inside functions) it can be hard to know which equality types are definitionally equal, in this example ``plusReducesL`` is *definitionally equal* but ``plusReducesR`` is not (although it is *propositionally equal*). The only difference between them is the order of the operands."
msgstr ""

#: ../source/proofs/definitional.rst:181
#: 52d35f73e2d64c4e932874c9f7880246
msgid "Checking ``plusReducesR`` gives the following error:"
msgstr ""

#: ../source/proofs/definitional.rst:192
#: 1bede3c030cb43aab3264c98effd3190
msgid "So why is ``Refl`` able to prove some equality types but not others?"
msgstr ""

#: ../source/proofs/definitional.rst:194
#: c99d9b82467e4c10af6d8b6122a35d2a
msgid "The first answer is that ``plus`` is defined by recursion on its first argument. So, when the first argument is ``Z``, it reduces, but not when the second argument is ``Z``."
msgstr ""

#: ../source/proofs/definitional.rst:198
#: 5aff4499ed3c4a50a7b521cbe1a3356a
msgid "If an equality type can be proved/constructed by using ``Refl`` alone it is known as a *definitional equality*. In order to be definitionally equal both sides of the equation must normalise to the same value."
msgstr ""

#: ../source/proofs/definitional.rst:202
#: 14e9ce1fd7fb40ad809205392ecc886b
msgid "So when we type ``1+1`` in Idris it is immediately reduced to 2 because definitional equality is built in"
msgstr ""

#: ../source/proofs/definitional.rst:210
#: 73b4ff31c1eb4946ac0684640f16555c
msgid "In the following pages we discuss how to resolve propositional equalities."
msgstr ""
