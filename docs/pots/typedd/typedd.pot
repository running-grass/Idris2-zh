# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/typedd/typedd.rst:4
#: 11125a05924d496c8a7f7563edbf04c4
msgid "Type Driven Development with Idris: Updates Required"
msgstr ""

#: ../source/typedd/typedd.rst:6
#: d17a1ec6d45d48a190458154681f74aa
msgid "The code in the book `Type-Driven Development with Idris <https://www.manning.com/books/type-driven-development-with-idris>`_ by Edwin Brady, available from `Manning <https://www.manning.com>`_,  will mostly work in Idris 2, with some small changes as detailed in this document. The updated code is also [going to be] part of the test suite (see `tests/typedd-book <https://github.com/edwinb/Idris2/tree/master/tests/typedd-book>`_ in the Idris 2 source)."
msgstr ""

#: ../source/typedd/typedd.rst:14
#: cd26754419684bfea911301de2eec226
msgid "If you are new to Idris, and learning from the book, we recommend working through the first 3-4 chapters with Idris 1, to avoid the need to worry about the changes described here. After that, refer to this document for any necessary changes."
msgstr ""

#: ../source/typedd/typedd.rst:20
#: 7fb1f32357f04b6bac8b57c20f0f0791
msgid "Chapter 1"
msgstr ""

#: ../source/typedd/typedd.rst:22
#: 814ae74977044c2d9211bc7040a4b0fe
msgid "Instead of entering ``2.1 * 20``, enter ``the Double (2.1 * 20)``."
msgstr ""

#: ../source/typedd/typedd.rst:24
#: 1724a2ae99384151a907fe77d084bdc2
msgid "Instead of entering ``:exec`` to run ``Hello.idr`` in the REPL, enter ``:exec main``."
msgstr ""

#: ../source/typedd/typedd.rst:27
#: 29f49e6460b84047aa7b08ea0a0f3fda
msgid "Chapter 2"
msgstr ""

#: ../source/typedd/typedd.rst:29
#: 64ccaf532a6249b8bd226af784b90091
msgid "The Prelude is smaller than Idris 1, and many functions have been moved to the base libraries instead. So:"
msgstr ""

#: ../source/typedd/typedd.rst:32
#: edaf53c12ecc400c94f65ff954f42087
msgid "In ``Average.idr``, add:"
msgstr ""

#: ../source/typedd/typedd.rst:40
#: 6a878e8a3ec6478381504944bb6a65ff
msgid "Instead of entering ``6.0 + 3 * 12``, enter ``the Double (6.0 + 3 * 12)``."
msgstr ""

#: ../source/typedd/typedd.rst:42
#: 0cc00660eb444a5a99c710eddabb8aa9
msgid "In ``AveMain.idr`` and ``Reverse.idr`` add:"
msgstr ""

#: ../source/typedd/typedd.rst:48
#: ceecdcdc545240b79192731f79ffeaf8
msgid "Instead of entering ``:exec`` to run ``main`` from ``AveMain.idr``, enter ``:exec main``."
msgstr ""

#: ../source/typedd/typedd.rst:51
#: 2a73f49bf3814b43b02ba017064aa48c
msgid "Chapter 3"
msgstr ""

#: ../source/typedd/typedd.rst:53
#: 959b8ddc402f4282a7f91be906b0026c
msgid "Unbound implicits have multiplicity 0, so we can't match on them at run-time. Therefore, in ``Matrix.idr``, we need to change the type of ``createEmpties`` and ``transposeMat`` so that the length of the inner vector is available to match on:"
msgstr ""

#: ../source/typedd/typedd.rst:63
#: bcdd54877a7d45d9ba12d40948cd039e
msgid "For the same reason, we also need to change the type of ``length`` to:"
msgstr ""

#: ../source/typedd/typedd.rst:70
#: 601c94be0e8141a5bda00059b07f80a0
msgid "Chapter 4"
msgstr ""

#: ../source/typedd/typedd.rst:72
#: c8d317de80b4401299768da2a30b4ce8
msgid "For the reasons described above:"
msgstr ""

#: ../source/typedd/typedd.rst:74
#: 0c265a1187384012897b6efa49d7c792
msgid "In ``DataStore.idr``, add ``import System.REPL`` and ``import Data.String``"
msgstr ""

#: ../source/typedd/typedd.rst:75
#: efdedc992a9f46588299b4e7665afbe4
msgid "In ``SumInputs.idr``, add ``import System.REPL``"
msgstr ""

#: ../source/typedd/typedd.rst:76
#: 7c204932beeb4f2c9dc31c76ac6c2865
msgid "In ``TryIndex.idr``, add an implicit argument:"
msgstr ""

#: ../source/typedd/typedd.rst:82
#: c94d0aeafe8c4957a05efcf3de224297
msgid "In exercise 5 of 4.2, add an implicit argument:"
msgstr ""

#: ../source/typedd/typedd.rst:89
#: bc73220a603a4f6eb1bade8a30f4a432
msgid "Chapter 5"
msgstr ""

#: ../source/typedd/typedd.rst:91
#: e675af45d58042a59ab5d73154de5a99
msgid "Although there is a ``Cast`` instance from ``String`` to ``Nat``, its behaviour of returning Z if the ``String`` is not numeric is now thought to be confusing and potentially error prone. Instead, there is ``stringToNatOrZ`` in ``Data.String`` which at least has a clearer name. So:"
msgstr ""

#: ../source/typedd/typedd.rst:96
#: 2e1232c55b1b4c3098e1c8fb7f432fc1
msgid "In ``Loops.idr`` and ``ReadNum.idr`` it's preferable to add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ``."
msgstr ""

#: ../source/typedd/typedd.rst:99
#: d29c4883dcde4774a5e699d9f566affb
msgid "In ``ReadNum.idr``, since functions must now be ``covering`` by default, add a ``partial`` annotation to ``readNumbers_v2``. (This is the version of ``readNumbers`` on page 135.)"
msgstr ""

#: ../source/typedd/typedd.rst:103
#: 96d4b17cb72b451d871ace5dab780638
msgid "The file-handling functions for the exercises in section 5.3.4 are no longer in the Prelude.  Import `System.File.Handle` and `System.File.ReadWrite` to use them."
msgstr ""

#: ../source/typedd/typedd.rst:107
#: db8fef4dd83442dd967835532fc8ee3b
msgid "Chapter 6"
msgstr ""

#: ../source/typedd/typedd.rst:109
#: 671a3a1da50f4755b7f419aaba1da230
msgid "In ``DataStore.idr`` and ``DataStoreHoles.idr``, add ``import Data.String`` and ``import System.REPL``. Also in ``DataStore.idr``, the ``schema`` argument to ``display`` is required for matching, so change the type to:"
msgstr ""

#: ../source/typedd/typedd.rst:117
#: e8dd25b5de3d45e09ce7ef4739049e20
msgid "In ``TypeFuns.idr`` add ``import Data.String``"
msgstr ""

#: ../source/typedd/typedd.rst:119
#: ca6c9c8ca8b3433f85ee8c36e48fafb2
msgid "Listing 6.9 says that ``data Schema`` declares a type that hasn't been defined yet. In Idris2, a colon and a type are required:"
msgstr ""

#: ../source/typedd/typedd.rst:127
#: 42780fcf0b8b46e6ae0a4866e19907f8
msgid "Chapter 7"
msgstr ""

#: ../source/typedd/typedd.rst:129
#: 7ba25bf3da7c43e1a53d9ec74756ab5a
msgid "``Abs`` is now a separate interface from ``Neg``. So, change the type of ``eval`` to include ``Abs`` specifically:"
msgstr ""

#: ../source/typedd/typedd.rst:136
#: b48c3c3a792742afb619b238f1866936
msgid "Also, take ``abs`` out of the ``Neg`` implementation for ``Expr`` and add an implementation of ``Abs`` as follows:"
msgstr ""

#: ../source/typedd/typedd.rst:145
#: 8949d460753e4245b111a3001663c662
msgid "Chapter 8"
msgstr ""

#: ../source/typedd/typedd.rst:147
#: 7ecef4417f964e5f88fc3a140aefba9c
msgid "In ``AppendVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs"
msgstr ""

#: ../source/typedd/typedd.rst:149
#: f08a2b18337041f5ba9fce26d39afb7c
msgid "``cong`` now takes an explicit argument for the function to apply. So, in ``CheckEqMaybe.idr`` change the last case to:"
msgstr ""

#: ../source/typedd/typedd.rst:158
#: 8f46e0d3d1cf40e9b91fb7d1fb818f00
msgid "A similar change is necessary in ``CheckEqDec.idr``."
msgstr ""

#: ../source/typedd/typedd.rst:160
#: f16d2a6b223a4e2591e7c614592283e3
msgid "In ``ExactLength.idr``, the ``m`` argument to ``exactLength`` is needed at run time, so change its type to:"
msgstr ""

#: ../source/typedd/typedd.rst:168
#: d2045c339ad34ff8b750fa8ec824ad3c
msgid "A similar change is necessary in ``ExactLengthDec.idr``. Also, ``DecEq`` is no longer part of the prelude, so add ``import Decidable.Equality``."
msgstr ""

#: ../source/typedd/typedd.rst:171
#: 6ed0c9abad2b4c3793555704eb7e625a
msgid "In ``ReverseVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs."
msgstr ""

#: ../source/typedd/typedd.rst:173
#: 9590a2443fad47cb92e78d275d366f53
msgid "In ``Void.idr``, since functions must now be ``covering`` by default, add a ``partial`` annotation to ``nohead`` and its helper function ``getHead``."
msgstr ""

#: ../source/typedd/typedd.rst:176
#: b44e8edcbc774259aca900fe54525838
msgid "In Exercise 2 of 8.2.5, the definition of ``reverse'`` should be changed to ``reverse' : Vect k a -> Vect m a -> Vect (k + m) a``, because the ``n`` in ``reverse'`` is otherwise bound to the same value as the ``n`` in the signature of ``myReverse``."
msgstr ""

#: ../source/typedd/typedd.rst:181
#: ffadac3c3a0542babbb36da759cea8df
msgid "Chapter 9"
msgstr ""

#: ../source/typedd/typedd.rst:183
#: 0d096eba4b6446199f77e4fed457ab1c
msgid "In ``ElemType.idr``, add ``import Decidable.Equality``"
msgstr ""

#: ../source/typedd/typedd.rst:185
#: 3ebb81e8adf544dda73c9d002081d972
msgid "In ``Elem.idr``, add ``import Data.Vect.Elem``"
msgstr ""

#: ../source/typedd/typedd.rst:187
#: 426445ef54ff439fba9621c883d67ed4
msgid "In ``Hangman.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:189
#: 0914701689ab4596af901162f9e0ffc2
msgid "Add ``import Data.String``, ``import Data.Vect.Elem`` and ``import Decidable.Equality``"
msgstr ""

#: ../source/typedd/typedd.rst:190
#: ../source/typedd/typedd.rst:542
#: b40e5bf8b007496ea301785e8e018f55
#: e088a6cf38354e5dabae138b0fd87693
msgid "``removeElem`` pattern matches on ``n``, so it needs to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:200
#: 8e6c5a92c6cb4cb4abb1c7f09ea203bf
msgid "``letters`` is used by ``processGuess``, because it's passed to ``removeElem``:"
msgstr ""

#: ../source/typedd/typedd.rst:209
#: 08f4476bab31485bb1666f815447c07b
msgid "``guesses`` and ``letters`` are implicit arguments to ``game``, but are used by the definition, so add them to its type:"
msgstr ""

#: ../source/typedd/typedd.rst:217
#: 467b66353c65479aaa5433ae04d58ace
msgid "In ``RemoveElem.idr``"
msgstr ""

#: ../source/typedd/typedd.rst:219
#: 7d2230a52622475bb96207a1e05a68fe
msgid "Add ``import Data.Vect.Elem``"
msgstr ""

#: ../source/typedd/typedd.rst:220
#: e5b3462575214d1d963941e90743c340
msgid "``removeElem`` needs to be updated as above."
msgstr ""

#: ../source/typedd/typedd.rst:223
#: d03ef9d7e8af4177851c678b5a77c1cc
msgid "Chapter 10"
msgstr ""

#: ../source/typedd/typedd.rst:225
#: a4b7d07913a44e028d884fd826422970
msgid "Lots of changes necessary here, at least when constructing views, due to Idris 2 having a better (that is, more precise and correct!) implementation of unification, and the rules for recursive ``with`` application being tightened up."
msgstr ""

#: ../source/typedd/typedd.rst:229
#: 52b82293c5084948a9ab3c9244cfe188
msgid "In ``MergeSort.idr``, add ``import Data.List``"
msgstr ""

#: ../source/typedd/typedd.rst:231
#: 42975cf7fe3c4e7d8f781056740c7ecd
msgid "In ``MergeSortView.idr``, add ``import Data.List``, and make the arguments to the views explicit:"
msgstr ""

#: ../source/typedd/typedd.rst:244
#: ee00fd3d7df64bc882ed1897b7a00c33
msgid "In the problem 1 of exercise 10-1, the ``rest`` argument of the data constructor ``Exact`` of ``TakeN`` must be made explicit."
msgstr ""

#: ../source/typedd/typedd.rst:253
#: 6b6788a8f9cc47feb04ece6fb25b747e
msgid "In ``SnocList.idr``, in ``my_reverse``, the link between ``Snoc rec`` and ``xs ++ [x]`` needs to be made explicit. Idris 1 would happily decide that ``xs`` and ``x`` were the relevant implicit arguments to ``Snoc`` but this was little more than a guess based on what would make it type check, whereas Idris 2 is more precise in what it allows to unify. So, ``x`` and ``xs`` need to be explicit arguments to ``Snoc``:"
msgstr ""

#: ../source/typedd/typedd.rst:266
#: 87085c3408684972b994c758d5f3bc9d
msgid "Correspondingly, they need to be explicit when matching. For example:"
msgstr ""

#: ../source/typedd/typedd.rst:275
#: 4a9440d73c1b482c9f1f6d6be6b1454a
msgid "Similar changes are necessary in ``snocListHelp`` and ``my_reverse_help``. See tests/typedd-book/chapter10/SnocList.idr for the full details."
msgstr ""

#: ../source/typedd/typedd.rst:278
#: 0d96db53de384d088b7a7b1ce02a2ca5
msgid "Also, in ``snocListHelp``, ``input`` is used at run time so needs to be bound in the type:"
msgstr ""

#: ../source/typedd/typedd.rst:286
#: 036e1f479ba346c4af3cd0193a7fa0b8
msgid "It's no longer necessary to give ``{input}`` explicitly in the patterns for ``snocListHelp``, although it's harmless to do so."
msgstr ""

#: ../source/typedd/typedd.rst:289
#: 7b35c909dee542638eb4d94d31f3ff2d
msgid "In ``IsSuffix.idr``, the matching has to be written slightly differently. The recursive with application in Idris 1 probably shouldn't have allowed this! Note that the ``Snoc`` - ``Snoc`` case has to be written first otherwise Idris generates a case tree splitting on ``input1`` and ``input2`` instead of the ``SnocList`` objects and this leads to a lot of cases being detected as missing."
msgstr ""

#: ../source/typedd/typedd.rst:304
#: 6bcdd1ff2d5e403984004b6f6934c86e
msgid "This doesn't yet get past the totality checker, however, because it doesn't know about looking inside pairs."
msgstr ""

#: ../source/typedd/typedd.rst:307
#: a58b955b8e9f493bb02b1bdbc41f99ca
msgid "For the ``VList`` view in the exercise 4 after Chapter 10-2 ``import Data.List.Views.Extra`` from ``contrib`` library."
msgstr ""

#: ../source/typedd/typedd.rst:309
#: 2845ffd4ac3c4b8184b7e7ffeff9a2aa
msgid "In ``DataStore.idr``: Well this is embarrassing - I've no idea how Idris 1 lets this through! I think perhaps it's too \"helpful\" when solving unification problems. To fix it, add an extra parameter ``schema`` to ``StoreView``, and change the type of ``SNil`` to be explicit that the ``empty`` is the function defined in ``DataStore``. Also add ``entry`` and ``store`` as explicit arguments to ``SAdd``:"
msgstr ""

#: ../source/typedd/typedd.rst:322
#: 8b9fa55ecf6f484e8c97037d498405ca
msgid "Since ``size`` is as explicit argument in the ``DataStore`` record, it also needs to be relevant in the type of ``storeViewHelp``:"
msgstr ""

#: ../source/typedd/typedd.rst:331
#: 20724e7740c0488aa5ffd144fed7fa17
msgid "In ``TestStore.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:333
#: c278ccd4432a48b283aebb8519cd6c24
msgid "In ``listItems``, ``empty`` needs to be ``DataStore.empty`` to be explicit that you mean the function"
msgstr ""

#: ../source/typedd/typedd.rst:335
#: 0f00eae53e9144618583315e64beb438
msgid "In ``filterKeys``, there is an error in the ``SNil`` case, which wasn't caught because of the type of ``SNil`` above. It should be:"
msgstr ""

#: ../source/typedd/typedd.rst:343
#: f4faaa5f902f479bb7ba1180402dc3bc
msgid "Chapter 11"
msgstr ""

#: ../source/typedd/typedd.rst:345
#: 7073dfd3eed0466f83839e04ea8b57dd
msgid "In ``Streams.idr`` add ``import Data.Stream`` for ``iterate``."
msgstr ""

#: ../source/typedd/typedd.rst:347
#: a113936a58474ed1adaa195fe16c0575
msgid "In ``Arith.idr`` and ``ArithTotal.idr``, the ``Divides`` view now has explicit arguments for the dividend and remainder, so they need to be explicit in ``bound``:"
msgstr ""

#: ../source/typedd/typedd.rst:357
#: 8de71cb4cb624234ad442c1eb6c05508
msgid "In addition,  ``import Data.Bits`` has to be added for ``shiftR``, which now uses a safer type for the number of shifts:"
msgstr ""

#: ../source/typedd/typedd.rst:367
#: 8b5fd93d1d054a7192be29e16a1629ae
msgid "In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, and ``import Data.Bits`` as above. Also add ``import Data.String`` for ``String.toLower``."
msgstr ""

#: ../source/typedd/typedd.rst:370
#: 487b325f720d4a6fa89f8e4aeb6e594e
msgid "In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, ``import Data.Bits`` and ``import Data.String`` as above.  Also, since export rules are per-namespace now, rather than per-file, you need to export ``(>>=)`` from the namespaces ``CommandDo`` and ``ConsoleDo``."
msgstr ""

#: ../source/typedd/typedd.rst:375
#: 614ddd9187d946b88e34d3cc787e5dfb
msgid "In ``ArithCmdDo.idr``, since ``(>>=)`` is ``export``, ``Command`` and ``ConsoleIO`` also have to be ``export``. Also, update ``randoms`` and ``import Data.Bits`` as above."
msgstr ""

#: ../source/typedd/typedd.rst:378
#: 8ec3513779644bd6a7f6a6901306d480
msgid "In ``StreamFail.idr``, add a ``partial`` annotation to ``labelWith``."
msgstr ""

#: ../source/typedd/typedd.rst:380
#: b2b94d07e0ea493cb949023129491347
msgid "In order to support ``do`` notation for custom types (like ``RunIO``), you need to implement ``(>>=)`` for binding values in a ``do`` block and ``(>>)`` for sequencing computations without binding values. See  `tests <https://github.com/idris-lang/Idris2/tree/master/tests/typedd-book/chapter11>`_ for complete implementations."
msgstr ""

#: ../source/typedd/typedd.rst:382
#: cf92ee80128a47e29c6d99d6b40f36d1
msgid "For instance, the following do block is desugared to ``foo >>= (\\x => bar >>= (\\y => baz x y))``:"
msgstr ""

#: ../source/typedd/typedd.rst:391
#: 5623e1c527284b3198defd4acca9d487
msgid "while the following is converted to ``foo >> bar >> baz``:"
msgstr ""

#: ../source/typedd/typedd.rst:401
#: 0f4dcb0d88d345d4ab9d341c67c315d2
msgid "Chapter 12"
msgstr ""

#: ../source/typedd/typedd.rst:403
#: 7a5b2064d88f40ca89ce5bcc16224045
msgid "For reasons described above: In ``ArithState.idr``, add ``import Data.String`` and ``import Data.Bits`` and update ``randoms``.  Also the ``(>>=)`` operators need to be set as ``export`` since they are in their own namespaces, and in ``getRandom``, ``DivBy`` needs to take additional arguments ``div`` and ``rem``."
msgstr ""

#: ../source/typedd/typedd.rst:409
#: 927c9e06832c4e7b9a4b08490a5c9e28
msgid "In ``ArithState.idr``, since ``(>>=)`` is ``export``, ``Command`` and ``ConsoleIO`` also have to be ``export``."
msgstr ""

#: ../source/typedd/typedd.rst:412
#: 347d8033cbc1459b97c82f378e1c8344
msgid "evalState from Control.Monad.State now takes the ``stateType`` argument first."
msgstr ""

#: ../source/typedd/typedd.rst:415
#: d6d9dfe026084abca67da99dd0e3c53a
msgid "Chapter 13"
msgstr ""

#: ../source/typedd/typedd.rst:417
#: 1fdeccdb938c4c259b490cd28709bea5
msgid "In ``StackIO.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:419
#: 8bf7f2657d1d4aa282e78081c320e336
msgid "``tryAdd`` pattern matches on ``height``, so it needs to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:426
#: e042c6c90f264554a549a6c43bc4c76f
msgid "``height`` is also an implicit argument to ``stackCalc``, but is used by the definition, so add it to its type:"
msgstr ""

#: ../source/typedd/typedd.rst:433
#: 648ace43f70449f1acce08aaa1db8b96
msgid "In ``StackDo`` namespace, export ``(>>=)``:"
msgstr ""

#: ../source/typedd/typedd.rst:443
#: fee79e9378e846b3b11e50ef14a9a8a9
msgid "In ``Vending.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:445
#: 70f08eecc9f649ce89d27256b2a152f8
msgid "Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in ``strToInput``"
msgstr ""

#: ../source/typedd/typedd.rst:446
#: 9288dad7f3e748ae86b4621407d61498
msgid "In ``MachineCmd`` type, add an implicit argument to ``(>>=)`` data constructor:"
msgstr ""

#: ../source/typedd/typedd.rst:455
#: 7f2a709d933044a49bdebb211661bf12
msgid "In ``MachineIO`` type, add an implicit argument to ``Do`` data constructor:"
msgstr ""

#: ../source/typedd/typedd.rst:464
#: 7f0d8ded44754ac3b91793f40d83b926
msgid "``runMachine`` pattern matches on ``inState``, so it needs to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:471
#: d31eec1854a040e392918b6b19567bb0
msgid "In ``MachineDo`` namespace, add an implicit argument to ``(>>=)`` and export it:"
msgstr ""

#: ../source/typedd/typedd.rst:482
#: 1dddd297427546a58d8a59f6acb0a54f
msgid "``vend`` and ``refill`` pattern match on ``pounds`` and ``chocs``, so they need to be written in their type:"
msgstr ""

#: ../source/typedd/typedd.rst:490
#: 3cbd7d8c93e744609bd9c7d1f89a8f7b
msgid "``pounds`` and ``chocs`` are implicit arguments to ``machineLoop``, but are used by the definition, so add them to its type:"
msgstr ""

#: ../source/typedd/typedd.rst:498
#: 38208aef5a7246d4932497513b327236
msgid "Chapter 14"
msgstr ""

#: ../source/typedd/typedd.rst:500
#: b3246d799df2499abca7abfbea7d0df9
msgid "In ``ATM.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:502
#: f55aaeb52f1e4515a63266c8e3099432
msgid "Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in ``runATM``"
msgstr ""

#: ../source/typedd/typedd.rst:504
#: f81b6ac14c1e43918cd3fa494462f079
msgid "In ``Hangman.idr``, add:"
msgstr ""

#: ../source/typedd/typedd.rst:512
#: 52e3906427dd4d34ab6c64ba8e3c9942
msgid "In ``Loop`` namespace, export ``GameLoop`` type and its data constructors:"
msgstr ""

#: ../source/typedd/typedd.rst:524
#: b0dd7abe3a4240478ab5c0fa80799aa6
msgid "``letters`` and ``guesses`` are used by ``gameLoop``, so they need to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:531
#: f6498efe2d4e4cc5b08e0759fdb60c50
msgid "In ``Game`` type, add an implicit argument ``letters`` to ``InProgress`` data constructor:"
msgstr ""

#: ../source/typedd/typedd.rst:552
#: 47bfe4f03c2b4da5a977d7ba26444e09
msgid "Chapter 15"
msgstr ""

#: ../source/typedd/typedd.rst:554
#: 2e224c80f1a54c2fa3a89a28ffdffc5d
msgid "Todo"
msgstr ""

#: ../source/typedd/typedd.rst:556
#: 3a8c7fd27d5945f28589dd2496db0113
msgid "This chapter."
msgstr ""
