# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-2023, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-16 09:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/cookbook/parsing.rst:2
#: 32f3c4604482407587f23ac8faf2e8df
msgid "Parsing"
msgstr ""

#: ../source/cookbook/parsing.rst:4
#: 7d9095de88ee4b60b10e7871db914185
msgid "Idris 2 comes with a Lexing and a Parsing library built into the ``contrib`` package."
msgstr ""

#: ../source/cookbook/parsing.rst:6
#: 499fc090ced14c909d2813eeeb76eed0
msgid "For this cookbook, we will write a very simple parser for a lambda calculus parser that will accept the following language:"
msgstr ""

#: ../source/cookbook/parsing.rst:13
#: 8ef19eb9ba3146c8b6a96be9f600880d
msgid "Once we write a lambda calculus parser, we will also see how we can take advantage of a powerful built in expression parser in Idris 2 to write a small calculator that should be smart enough to parse the following expression:"
msgstr ""

#: ../source/cookbook/parsing.rst:22
#: 17a4d948d633402e8cd4b4d20d7de1e7
msgid "Lexer"
msgstr ""

#: ../source/cookbook/parsing.rst:24
#: 94dfbd5a45084e4096c6cdff568e0cca
msgid "The main lexer module is under ``Text.Lexer``. This module contains ``toTokenMap`` which is a function that converts a ``List (Lexer, k) -> TokenMap (Token k)`` where ``k`` is a token kind. This function could be used for simple lexer to token mappings. The module also includes high level lexers for specifying quantity and common programming primitives like ``alphas``, ``intLit``, ``lineComment`` and ``blockComment``."
msgstr ""

#: ../source/cookbook/parsing.rst:30
#: 0c24b61346cb42158d4e1a55fa03e448
msgid "The ``Text.Lexer`` module also reexports ``Text.Lexer.Core``, ``Text.Quantity`` and ``Text.Token``."
msgstr ""

#: ../source/cookbook/parsing.rst:32
#: 8f202cc2d8a14e228644537346212571
msgid "``Text.Lexer.Core`` provides the building blocks of the lexer, including a type called ``Recognise`` which is the underlying data type for the lexer. The other important function that this module provides is a ``lex`` which takes in a lexer and returns the tokens."
msgstr ""

#: ../source/cookbook/parsing.rst:36
#: 704aa0a1cb3743f38092852badcbedfa
msgid "``Text.Quantity`` provides a data type ``Quantity`` which can be used with certain lexers to specify how many times something is expected to appear."
msgstr ""

#: ../source/cookbook/parsing.rst:39
#: fd5a69c044d940ad8fc4e6d2e10d6b6d
msgid "``Text.Token`` provides a data type ``Token`` that represents a parsed token, its kind and the text. This module also provides an important interface called ``TokenKind`` which tells the lexer how to map token kinds to Idris 2 types and how to convert each kind from a string to a value."
msgstr ""

#: ../source/cookbook/parsing.rst:44
#: 1335ba14c96f415aab25f5350d583751
msgid "Parser"
msgstr ""

#: ../source/cookbook/parsing.rst:46
#: 812acf7bbded4a7a805e235695ee400f
msgid "The main parser module is under ``Text.Parser``. This module contains different grammar parsers, the main one being ``match`` which takes a ``TokenKind`` and returns the value as defined in the ``TokenKind`` interface. There are other grammar parsers as well, but for our example, we will only be using ``match``."
msgstr ""

#: ../source/cookbook/parsing.rst:50
#: 2a7148d22f6844d286d48475619848f2
msgid "The ``Text.Parser`` module reexports ``Text.Parser.Core``, ``Text.Quantity`` and ``Text.Token``."
msgstr ""

#: ../source/cookbook/parsing.rst:52
#: 582867ed2dcf46c4b07c099757504f80
msgid "``Text.Parser.Core`` provides the building blocks of the parser, including a type called ``Grammar`` which is the underlying data type for the parser. The other important function that this module provides is ``parse`` which takes in a ``Grammar`` and returns the parsed expression."
msgstr ""

#: ../source/cookbook/parsing.rst:56
#: 0cff2e102a6840a8b3bd57f843aab6b6
msgid "We covered ``Text.Quantity`` and ``Text.Token`` in the Lexer section so we're not going to repeat what they do here."
msgstr ""

#: ../source/cookbook/parsing.rst:60
#: a139a9840d384738811476336688dc1f
msgid "Lambda Calculus Lexer & Parser"
msgstr ""

#: ../source/cookbook/parsing.rst:62
#: 27e09ea664ea41039ed7a679d1244c7d
msgid "LambdaCalculus.idr"
msgstr ""

#: ../source/cookbook/parsing.rst:231
#: 75cb504746ab4ccdbf35477d299e67c2
msgid "Testing out our parser gives us back the following output:"
msgstr ""

#: ../source/cookbook/parsing.rst:240
#: cc4676c6cbaa4fd99e0a50204ac7fab8
msgid "Expression Parser"
msgstr ""

#: ../source/cookbook/parsing.rst:242
#: 46862cd29e604c8a9f19acb9c2a69e43
msgid "Idris 2 also comes with a very convenient expression parser that is aware of precedence and associativity in ``Text.Parser.Expression``."
msgstr ""

#: ../source/cookbook/parsing.rst:245
#: 04188bc2b03e41579d18cd1292f14fa5
msgid "The main function called ``buildExpressionParser`` takes in an ``OperatorTable`` and a ``Grammar`` that represents the terms, and returns a parsed expression. The magic comes from the ``OperatorTable`` since this table defines all the operators, the grammars for those operators, the precedence, and the associativity."
msgstr ""

#: ../source/cookbook/parsing.rst:250
#: 68dcf21bd91d46c78510f186d03622b7
msgid "An ``OperatorTable`` is a list of lists containing the ``Op`` type. The ``Op`` type allows you to specify ``Prefix``, ``Postfix``, and ``Infix`` operators along with their grammars. ``Infix`` also contains the associativity called ``Assoc`` which can specify left associativity or ``AssocLeft``, right associativity assoc or ``AssocRight`` and as being non-associative or ``AssocNone``."
msgstr ""

#: ../source/cookbook/parsing.rst:255
#: b4af3c5871fe419da66abfd33d367957
msgid "An example of an operator table we'll be using for the calculator is:"
msgstr ""

#: ../source/cookbook/parsing.rst:268
#: d05ec221a99440b0aa601eeb4747a344
msgid "This table defines 4 operators for mulitiplication, division, addition and subtraction. Mulitiplication and division show up in the first table because they have higher precedence than addition and subtraction, which show up in the second table. We're also defining them as infix operators, with a specific grammar and all being left associative via ``AssocLeft``."
msgstr ""

#: ../source/cookbook/parsing.rst:274
#: c0a5d72037284e67a16348136c31a9d0
msgid "Building a Calculator"
msgstr ""

#: ../source/cookbook/parsing.rst:276
#: d8fba75e58e44449be015bd4649718c6
msgid "Calculator.idr"
msgstr ""

#: ../source/cookbook/parsing.rst:388
#: 904c062ebb3e4d95a271a62992e3489e
msgid "Testing out our calculator gives us back the following output:"
msgstr ""
